{"took":32,"timed_out":false,"_shards":{"total":5,"successful":5,"failed":0},"hits":{"total":11013,"max_score":4.3954697,"hits":[{"_index":"blockbuilder","_type":"blocks","_id":"7f14a531dec565ca0884","_score":4.3954697,"_source":{"userId":"vicapow","description":"WebGL + d3.layout.force","created_at":"2015-02-11T17:45:45Z","updated_at":"2015-08-29T14:15:15Z","api":["d3.random.normal","d3.select","d3.range","d3.layout.force","d3.timer","d3.behavior.drag","d3.mouse"],"colors":["#d2b48c"],"readme":"","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <title></title>\n    <style>\nbody {\n  margin: 0;\n}\n    </style>\n  </head>\n  <body>\n<script type=\"x-shader/x-vertex\" id=\"vertexshader\">\n  attribute float size;\n  uniform float pointSize;\n  uniform vec3 color;\n  uniform float alpha;\n  varying vec4 vColor;\n  varying vec2 myPosition;\n  varying float mySize;\n  void main() {\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    gl_PointSize = size;\n    mySize = size;\n    gl_Position = projectionMatrix * mvPosition;\n    vColor = vec4(color, alpha);\n  }\n</script>\n\n<script type=\"x-shader/x-fragment\" id=\"fragmentshader\">\n  varying vec4 vColor;\n  varying vec2 myPosition;\n  varying float mySize;\n  void main() {\n    float f = 0.5;\n    float d = abs(distance(gl_PointCoord - f, vec2(0.0, 0.0)));\n    float pixelD = (d + 0.5) * mySize;\n    if(pixelD + 0.5 < mySize) {\n      gl_FragColor = vec4(vColor.xyz, 0.9);\n    } else if(pixelD < mySize) {\n      gl_FragColor = vec4(vColor.xyz, 0.1);\n    } else {\n      discard;\n    }\n  }\n</script>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.3/d3.min.js\" charset=\"utf-8\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r70/three.min.js\" charset=\"utf-8\"></script>\n<script>\n\n'use strict'\nvar scene, camera, renderer;\nvar geometry, material, mesh;\nvar width = window.innerWidth, height = window.innerHeight\nconsole.log(width, height)\nscene = new THREE.Scene()\ncamera = new THREE.OrthographicCamera(width / - 2, width / 2, height / 2, height / - 2, 1, 10000)\nscene.add(camera)\ncamera.position.z = 1000\n\n// geometry = new THREE.BoxGeometry( 200, 200, 200 )\n// material = new THREE.MeshBasicMaterial({color: 0xff0000})\n// mesh = new THREE.Mesh(geometry, material)\n// scene.add(mesh)\n\nfunction uniforms(opts) {\n  opts = opts || {}\n  return {\n    color: {\n      type: 'c',\n      value: new THREE.Color(0x3498db)\n    },\n    alpha: { type: 'f', value: 0.7 },\n    pointSize: { type: 'f', value: 10 },\n    shouldResize: { type: '1i', value: opts.shouldResize ? 1 : 0 }\n  }\n}\n\nvar particles = 1000\nvar mouseIdx = 200\nvar positions = new Float32Array(particles * 3)\nvar dx = 2\nvar norm = d3.random.normal(0, 100)\nfor(var i = 0; i < positions.length; i+=3) {\n  var x = norm(), y = norm(), z = norm()\n  if (i / 3 < particles / 3) x -= 0.5, y += 1, z -= 0.5\n  else if (i / 3 < particles / 3 * 2) x += dx, y += dx, z += dx\n  else x -= dx, y -= dx, z -= dx\n  positions[i] = x, positions[i + 1] = y, positions[i + 2] = z\n}\nvar sizes = new Float32Array(particles)\nfor(var i = 0; i < particles; i++) sizes[i] = Math.random() * 10 + 3\n\nvar attributes = {\n  size: { type: 'f', value: [] }\n}\n\nvar cloudMat = new THREE.ShaderMaterial({\n    uniforms:       uniforms(),\n    attributes:     attributes,\n    vertexShader:   d3.select('#vertexshader').node().textContent,\n    fragmentShader: d3.select('#fragmentshader').node().textContent,\n    transparent:    true,\n    setDepthTest: false,\n    // blending: THREE.CustomBlending,\n    // blendEquation: THREE.AddEquation,\n    // blendSrc: THREE.SrcAlphaSaturate,\n    // blendDst: THREE.OneMinusSrcAlphaFactor,\n})\n\nvar cloudGeom = new THREE.BufferGeometry()\nvar posBuff = new THREE.BufferAttribute(positions, 3)\ncloudGeom.addAttribute('position', posBuff)\ncloudGeom.addAttribute('size', new THREE.BufferAttribute(sizes, 1))\ncloudGeom.computeBoundingSphere()\n\nvar pointCloud = new THREE.PointCloud(cloudGeom, cloudMat)\nscene.add(pointCloud)\n\nrenderer = new THREE.WebGLRenderer({alpha: true})\nrenderer.setSize(width, height)\ndocument.body.appendChild(renderer.domElement)\n\nvar nodes = d3.range(particles).map(function(d) { return {} })\nvar mouseNode = { fixed: true }\nnodes.push(mouseNode)\n\n// mouseNode.fixed = true\n\nvar force = d3.layout.force()\n  .nodes(nodes)\n  .size([width, height])\n  .charge(function(d, i) { return -sizes[i] || -500 })\n  // .chargeDistance(10)\n  .start()\n\nvar mousePosition = [0, 0]\nd3.timer(function(d) {\n  force.start()\n  mouseNode.x = mousePosition[0], mouseNode.y = mousePosition[1]\n  for(var i = 0; i + 1 < nodes.length; i++) {\n    positions[i * 3] = nodes[i].x - width / 2\n    positions[i * 3 + 1] = - (nodes[i].y - height / 2)\n  }\n  posBuff.needsUpdate = true // Important!\n  renderer.render(scene, camera)\n})\n\nd3.select('canvas')\n  .on('mousemove', updateMouse)\n  .call(d3.behavior.drag().on('drag', updateMouse))\n\nfunction updateMouse() {\n  var p = d3.mouse(this)\n  mousePosition = p\n}\n\n    </script>\n  </body>\n</html>","filenames":["Readme.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"3669455","_score":1.9504704,"_source":{"userId":"GerHobbelt","description":"d3.js: using layout.force to plot tree graphs (where nodes may have multiple parents) - Part 1: pure tree","created_at":"2012-09-07T20:44:51Z","updated_at":"2015-10-10T09:28:02Z","api":["d3.layout.force","d3.select","d3.json","d3.layout.hierarchy","d3.quantile","d3.random.normal","d3.zip.apply","d3.min","d3.bisector","d3.xhr","d3.text","d3.formatPrefix","d3.map","d3.round","d3.event.stopPropagation","d3.event.preventDefault","d3.interpolateNumber","d3.transform","d3.rgb","d3.hsl","d3.lab","d3.hcl","d3.interpolate","d3.interpolateArray","d3.interpolateString","d3.interpolateRgb","d3.ns.qualify","d3.requote","d3.dispatch","d3.ease.apply","d3.timer","d3.ease","d3.tween","d3.rebind","d3.range.apply","d3.format","d3.bisect","d3.scale.linear","d3.scale.pow","d3.range","d3.scale.ordinal","d3.svg.diagonal","d3.transition","d3.selection.call","d3.touches","d3.mouse","d3.geom.quadtree","d3.behavior.drag","d3.sum","d3.permute","d3.max","d3.merge","d3.geo.albers","d3.geo.albersUsa","d3.geom.polygon","d3.geo.greatArc","d3.time.format","d3.time.dayOfYear","d3.time.sundayOfYear","d3.time.mondayOfYear","d3.time.format.utc","d3.time.year","d3.time.day"],"colors":["#000000","#9ecae1","#3182bd","#c6dbef","#fd8d3c","#ff0000","#ffa500","#d2b48c","#0000ff","#ffffff","#f0f8ff","#faebd7","#00ffff","#7fffd4","#f0ffff","#f5f5dc","#ffe4c4","#ffebcd","#8a2be2","#a52a2a","#deb887","#5f9ea0","#7fff00","#d2691e","#ff7f50","#6495ed","#fff8dc","#dc143c","#00008b","#008b8b","#b8860b","#a9a9a9","#006400","#bdb76b","#8b008b","#556b2f","#ff8c00","#9932cc","#8b0000","#e9967a","#8fbc8f","#483d8b","#2f4f4f","#00ced1","#9400d3","#ff1493","#00bfff","#696969","#1e90ff","#b22222","#fffaf0","#228b22","#ff00ff","#dcdcdc","#f8f8ff","#ffd700","#daa520","#808080","#008000","#adff2f","#f0fff0","#ff69b4","#cd5c5c","#4b0082","#fffff0","#f0e68c","#e6e6fa","#fff0f5","#7cfc00","#fffacd","#add8e6","#f08080","#e0ffff","#fafad2","#d3d3d3","#90ee90","#ffb6c1","#ffa07a","#20b2aa","#87cefa","#778899","#b0c4de","#ffffe0","#00ff00","#32cd32","#faf0e6","#800000","#66cdaa","#0000cd","#ba55d3","#9370db","#3cb371","#7b68ee","#00fa9a","#48d1cc","#c71585","#191970","#f5fffa","#ffe4e1","#ffe4b5","#ffdead","#000080","#fdf5e6","#808000","#6b8e23","#ff4500","#da70d6","#eee8aa","#98fb98","#afeeee","#db7093","#ffefd5","#ffdab9","#cd853f","#ffc0cb","#dda0dd","#b0e0e6","#800080","#bc8f8f","#4169e1","#8b4513","#fa8072","#f4a460","#2e8b57","#fff5ee","#a0522d","#c0c0c0","#87ceeb","#6a5acd","#708090","#fffafa","#00ff7f","#4682b4","#008080","#d8bfd8","#ff6347","#40e0d0","#ee82ee","#f5deb3","#f5f5f5","#ffff00","#9acd32","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf","#aec7e8","#ffbb78","#98df8a","#ff9896","#c5b0d5","#c49c94","#f7b6d2","#c7c7c7","#dbdb8d","#9edae5","#393b79","#5254a3","#6b6ecf","#9c9ede","#637939","#8ca252","#b5cf6b","#cedb9c","#8c6d31","#bd9e39","#e7ba52","#e7cb94","#843c39","#ad494a","#d6616b","#e7969c","#7b4173","#a55194","#ce6dbd","#de9ed6","#6baed6","#e6550d","#fdae6b","#fdd0a2","#31a354","#74c476","#a1d99b","#c7e9c0","#756bb1","#9e9ac8","#bcbddc","#dadaeb","#636363","#969696","#bdbdbd","#d9d9d9"],"readme":"# Experiment …… <a href=\"http://bl.ocks.org/3669455\" title=\"view this gist via bl.ocks.org\">∆</a> <a href=\"http://bl.ocks.org/GerHobbelt\" title=\"view a list of all my gists at bl.ocks.org\">∞</a>\n\n# Constructing a tree view using the d3.layout.force\n\nThis is prelude to constructing tree-like graphs using the force layout.\n\n\n## Lessons learned\n\n- when coding constraints which are really strict, e.g. binding a certain node or set of nodes \n  to a specific y coordinate (node.depth ~ y position in a vertical tree), it is opportune\n  to 'insinuate' the constraint rather than enforce it, i.e. you should apply the constraint\n  as if it was a force, i.e. verlet-integrate the delta, using the tick.alpha strength.\n  Of course nothing stops you from *strengthening* the applicatiuon of the constraint \n  when the `alpha` value is near zero (i.e. we're almost stable/at the end of the force iteration).\n\n- you can edit both .x/.y and .px/.py in the `tick` handler, but any 'force-like' constraints\n  should best be applied to the .px/.py components as then they will mix with the repulse and\n  verlet integration logic in the next round.\n\n- given the two items above, it is opportune to code a constraint like 'stay within visible area'\n  as a dual constraint: one which clips the x/y node coordinates to ensure they stick within the\n  visible area, and a second part which is a 'force' applied to repulse any nodes close to the\n  edge(s): if you don't do the latter, you'll get graph views where a lot of nodes hug the edge(s)\n  and don't resolve themselves to move back into the visible area proper. (Drag any graph to the\n  edge with such a constraint and you're getting a very jittery graph where a lot of the nodes\n  bounce against the edges but don't 'move away'. That's why you need such a second 'repulse force'\n  to make this happen and make the graph look good, even when dragged near the edge.\n\n\n## Implementation Nodes, er, Notes\n\nAll constraints are applied in the force.on(\"tick\") event handler.\n\nWe also implement drag behaviour, which, like any other use of `node.fixed`, will add a .px/.py coordinate \npair for each node under the hood. To prevent any 'Crazy Ivan jumping' of nodes and other unexpected behaviour, we must ensure that \n.x/.y and .px/.py match once we are done in the force.tick handler, otherwise the \nnext mouseenter/drag will behave very oddly.\nIt is always a good rule to set both .px/.py and .x/.y when you update force nodes' x/y coordinates.\n\nThis example is derived off the D3 example `examples/force/force-collapsible.html`.\n\nThe code requires a D3 version which includes (pull request #803](https://github.com/mbostock/d3/pull/803).\n","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">\n    <title>Force-Directed Graph: Collapsible, Hierarchical</title>\n    <script src=\"readme.js\"></script> <!-- hide d3.v2.js from bl.ocks.org output by naming it readme.ls -->\n    <style type=\"text/css\">\n\ncircle.node {\n  cursor: pointer;\n  stroke: #000;\n  stroke-width: .5px;\n}\n\nline.link {\n  fill: none;\n  stroke: #9ecae1;\n  stroke-width: 1.5px;\n}\n\n    </style>\n  </head>\n  <body>\n    <div id=\"chart\"></div>\n\n<script type=\"text/javascript\" src=\"http://gerhobbelt.github.com/bl.ocks.org-hack/fixit.js\" ></script>\n\n    <script type=\"text/javascript\">\n\nvar width = 960,\n    height = 500,\n    node,\n    link,\n    root;\n\nvar force = d3.layout.force()\n    .on(\"tick\", tick)\n    .charge(function(d) {\n      return d._children ? -d.size / 100 : d.children ? -100 : -30;\n    })\n    .linkDistance(function(d) {\n      return d.target._children ? 50 : 30;\n    })\n    .size([width, height]);\n\nvar vis = d3.select(\"#chart\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\nd3.json(\"flare.json\", function(json) {\n  root = json;\n  root.fixed = true;\n  root.px = root.py = 0;\n  update();\n});\n\nfunction update(nodes) {\n  var nodes = flatten(root);\n  var links = d3.layout.hierarchy().links(nodes);\n\n  // make sure we set .px/.py as well as node.fixed will use those .px/.py to 'stick' the node to:\n  if (!root.px) {\n    // root have not be set / dragged / moved: set initial root position\n    root.px = root.x = width / 2;\n    root.py = root.y = circle_radius(root) + 2;\n  }\n\n  // Restart the force layout.\n  force\n      .nodes(nodes)\n      .links(links)\n      .start();\n\n  // Update the links…\n  link = vis.selectAll(\"line.link\")\n      .data(links, function(d) { return d.target.id; });\n\n  // Enter any new links.\n  link.enter().insert(\"line\", \".node\")\n      .attr(\"class\", \"link\")\n      .attr(\"x1\", function(d) { return d.source.x; })\n      .attr(\"y1\", function(d) { return d.source.y; })\n      .attr(\"x2\", function(d) { return d.target.x; })\n      .attr(\"y2\", function(d) { return d.target.y; });\n\n  // Exit any old links.\n  link.exit().remove();\n\n  // Update the nodes…\n  node = vis.selectAll(\"circle.node\")\n      .data(nodes, function(d) { return d.id; })\n      .style(\"fill\", color);\n\n  node.transition()\n      .attr(\"cy\", function(d) { return d.y; })\n      .attr(\"r\", function(d) { return circle_radius(d); });\n\n  // Enter any new nodes.\n  node.enter().append(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"cx\", function(d) { return d.x; })\n      .attr(\"cy\", function(d) { return d.y; })\n      .attr(\"r\", function(d) { return circle_radius(d); })\n      .style(\"fill\", color)\n      .on(\"click\", click)\n      .call(force.drag);\n\n  // Exit any old nodes.\n  node.exit().remove();\n}\n\nfunction tick() {\n  // Apply the constraints:\n  //\n  force.nodes().forEach(function(d) {\n    if (!d.fixed) {\n      var r = circle_radius(d) + 4, dx, dy, ly = 30;\n\n      // #1: constraint all nodes to the visible screen:\n      //d.x = Math.min(width - r, Math.max(r, d.x));\n      //d.y = Math.min(height - r, Math.max(r, d.y));\n\n      // #1.0: hierarchy: same level nodes have to remain with a 1 LY band vertically:\n      if (d.children || d._children) {\n        var py = 0;\n        if (d.parent) {\n          py = d.parent.y;\n        }\n        d.py = d.y = py + d.depth * ly + r;\n      }\n\n      // #1a: constraint all nodes to the visible screen: links\n      dx = Math.min(0, width - r - d.x) + Math.max(0, r - d.x);\n      dy = Math.min(0, height - r - d.y) + Math.max(0, r - d.y);\n      d.x += 2 * Math.max(-ly, Math.min(ly, dx));\n      d.y += 2 * Math.max(-ly, Math.min(ly, dy));\n      // #1b: constraint all nodes to the visible screen: charges ('repulse')\n      dx = Math.min(0, width - r - d.px) + Math.max(0, r - d.px);\n      dy = Math.min(0, height - r - d.py) + Math.max(0, r - d.py);\n      d.px += 2 * Math.max(-ly, Math.min(ly, dx));\n      d.py += 2 * Math.max(-ly, Math.min(ly, dy));\n\n      // #2: hierarchy means childs must be BELOW parents in Y direction:\n      if (d.parent) {\n        d.y = Math.max(d.y, d.parent.y + ly);\n        d.py = Math.max(d.py, d.parent.py + ly);\n      }\n    }\n  });\n\n\n  link.attr(\"x1\", function(d) { return d.source.x; })\n      .attr(\"y1\", function(d) { return d.source.y; })\n      .attr(\"x2\", function(d) { return d.target.x; })\n      .attr(\"y2\", function(d) { return d.target.y; });\n\n  node.attr(\"cx\", function(d) { return d.x; })\n      .attr(\"cy\", function(d) { return d.y; });\n}\n\n// Color leaf nodes orange, and packages white or blue.\nfunction color(d) {\n  return d._children ? \"#3182bd\" : d.children ? \"#c6dbef\" : \"#fd8d3c\";\n}\n\nfunction circle_radius(d) {\n  return d.children ? 4.5 : Math.sqrt(d.size) / 10;\n}\n\n// Toggle children on click.\nfunction click(d) {\n  if (d.children) {\n    d._children = d.children;\n    d.children = null;\n  } else {\n    d.children = d._children;\n    d._children = null;\n  }\n  update();\n}\n\n// Returns a list of all nodes under the root.\n//\n// Also assign each node a reasonable starting x/y position: we can do better than random placement since we're force-layout-ing a hierarchy!\nfunction flatten(root) {\n  var nodes = [], i = 0, depth = 0, level_widths = [1], max_width, max_depth = 1, kx, ky;\n\n  function recurse(node, parent, depth, x) {\n    if (node.children) {\n      var w = level_widths[depth + 1] || 0;\n      level_widths[depth + 1] = w + node.children.length;\n      max_depth = Math.max(max_depth, depth + 1);\n      node.size = node.children.reduce(function(p, v, i) {\n        return p + recurse(v, node, depth + 1, w + i);\n      }, 0);\n    }\n    if (!node.id) node.id = ++i;\n    node.parent = parent;\n    node.depth = depth;\n    if (!node.px) {\n      node.y = depth;\n      node.x = x;\n    }\n    nodes.push(node);\n    return node.size;\n  }\n\n  root.size = recurse(root, null, 0);\n\n  // now correct/balance the x positions:\n  max_width = 1;\n  for (i = level_widths.length; --i > 0; ) {\n    max_width = Math.max(max_width, level_widths[i]);\n  }\n  kx = (width - 20) / max_width;\n  ky = (height - 20) / max_depth;\n  for (i = nodes.length; --i >= 0; ) {\n    var node = nodes[i];\n    if (!node.px) {\n      node.y *= ky;\n      node.y += 10 + ky / 2;\n      node.x *= kx;\n      node.x += 10 + kx / 2;\n    }\n  }\n\n  return nodes;\n}\n\n    </script>\n  </body>\n</html>\n","filenames":[".gitignore","README.md","flare.json","index.html","readme.js","sync-d3.sh"]}},{"_index":"blockbuilder","_type":"blocks","_id":"040c4eb87d36de3c87d3","_score":0.9818379,"_source":{"userId":"emeeks","description":"Ch. 6, Fig. 8 - D3.js in Action","created_at":"2014-11-18T04:09:45Z","updated_at":"2016-03-18T03:31:26Z","api":["d3.select","d3.scale.linear","d3.extent","d3.layout.force","d3.selectAll"],"colors":["#d2b48c","#808080","#000000"],"readme":"This is the code for Chapter 6, Figure 8 from [D3.js in Action](http://manning.com/meeks/) showing how to create a force-directed network using **d3.layout.force()** as well as SVG markers for arrowheads.","code":"<html>\n<head>\n  <title>D3 in Action Chapter 6 - Example 3</title>\n  <meta charset=\"utf-8\" />\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n<script src=\"https://d3js.org/queue.v1.min.js\" type=\"text/JavaScript\"></script>\n</head>\n<style>\n  svg {\n    height: 500px;\n    width: 500px;\n    border: 1px solid gray;\n  }\n\n</style>\n<body>\n\n<div id=\"viz\">\n  <svg>\n  </svg>\n</div>\n</body>\n  <footer>\n    \n<script>\n       var marker = d3.select(\"svg\").append('defs')\n            .append('marker')\n            .attr(\"id\", \"Triangle\")\n            .attr(\"refX\", 12)\n            .attr(\"refY\", 6)\n            .attr(\"markerUnits\", 'userSpaceOnUse')\n            .attr(\"markerWidth\", 12)\n            .attr(\"markerHeight\", 18)\n            .attr(\"orient\", 'auto')\n            .append('path')\n            .attr(\"d\", 'M 0 0 12 6 0 12 3 6');\n            \n    queue()\n    .defer(d3.csv, \"nodelist.csv\")\n    .defer(d3.csv, \"edgelist.csv\")\n    .await(function(error, file1, file2) { createForceLayout(file1, file2); });\n\n    function createForceLayout(nodes,edges) {\n      var nodeHash = {};\n      for (x in nodes) {\n        nodeHash[nodes[x].id] = nodes[x];\n      }\n      for (x in edges) {\n        edges[x].weight = parseInt(edges[x].weight);\n        edges[x].source = nodeHash[edges[x].source];\n        edges[x].target = nodeHash[edges[x].target];\n      }\n      \n//      chargeScale = d3.scale.linear().domain(d3.extent(nodes, function(d) {return d.followers})).range([-500,-2000])\n//      nodeSize = d3.scale.linear().domain(d3.extent(nodes, function(d) {return d.followers})).range([5,20])\n      var weightScale = d3.scale.linear().domain(d3.extent(edges, function(d) {return d.weight})).range([.1,1])\n      force = d3.layout.force()\n//      .charge(-1000)\n      .charge(function (d) {return d.weight * -500})\n      .gravity(.3)\n//      .linkDistance(50)\n//      .linkStrength(function (d) {return weightScale(d.weight)})\n      .size([500,500]).nodes(nodes)\n      .links(edges).on(\"tick\", forceTick);\n\n      d3.select(\"svg\").selectAll(\"line.link\").data(edges, function (d) {return d.source.id + \"-\" + d.target.id}).enter()\n      .append(\"line\")\n      .attr(\"class\", \"link\")\n      .style(\"stroke\", \"black\")\n      .style(\"opacity\", .5)\n      .style(\"stroke-width\", function(d) {return d.weight});\n      \n      var nodeEnter = d3.select(\"svg\").selectAll(\"g.node\").data(nodes, function (d) {return d.id}).enter()\n      .append(\"g\")\n      .attr(\"class\", \"node\")\n      .call(force.drag())\n      .on(\"click\", fixNode);\n      \n      function fixNode(d) {\n        d3.select(this).select(\"circle\").style(\"stroke-width\", 4);\n        d.fixed = true;\n      }\n      \n      nodeEnter.append(\"circle\")\n      .attr(\"r\", 5)\n      .style(\"fill\", \"lightgray\")\n      .style(\"stroke\", \"black\")\n      .style(\"stroke-width\", \"1px\");\n\n      nodeEnter.append(\"text\")\n      .style(\"text-anchor\", \"middle\")\n      .attr(\"y\", 15)\n      .text(function(d) {return d.id})\nd3.selectAll(\"line\").attr(\"marker-end\", \"url(#Triangle)\");\n      force.start();\n\n      function forceTick() {\n      d3.selectAll(\"line.link\")\n      .attr(\"x1\", function (d) {return d.source.x})\n      .attr(\"x2\", function (d) {return d.target.x})\n      .attr(\"y1\", function (d) {return d.source.y})\n      .attr(\"y2\", function (d) {return d.target.y});\n      \n      d3.selectAll(\"g.node\")\n      .attr(\"transform\", function (d) {return \"translate(\"+d.x+\",\"+d.y+\")\"})\n      }\n    }\n</script>\n  </footer>\n\n</html>\n","filenames":["edgelist.csv","index.html","nodelist.csv","readme.md","thumbnail.png"],"thumb":"2b0e3f6441ad12bf257a981731674a79bd0ba88a"}},{"_index":"blockbuilder","_type":"blocks","_id":"40f002975239918add44","_score":0.851311,"_source":{"userId":"cpietsch","description":"Voronoi Images","created_at":"2016-01-04T10:40:36Z","updated_at":"2016-01-04T10:41:36Z","api":["d3.range","d3.geom.voronoi","d3.select","d3.json"],"colors":[],"readme":"Using [voronoi tessellation](http://bl.ocks.org/mbostock/4060366) on random points as a surface for images. From here you could distribute the points in a more meaningfull way e.g. using t-SNE or d3.layout.force()","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<body>\n<script src=\"//d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n<script>\n\n\nvar width = 960,\n    height = 500;\n\nvar vertices = d3.range(100).map(function(d) {\n  return [Math.random() * width, Math.random() * height];\n});\n\nvar voronoi = d3.geom.voronoi()\n    .clipExtent([[0, 0], [width, height]]);\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\nvar clip = svg.append(\"g\").selectAll(\"clipPath\");\nvar image = svg.append(\"g\").selectAll(\"image\");\n\nvar flickrApi = \"https://api.flickr.com/services/rest/?method=flickr.photos.getRecent&api_key=ab8509e656e68cbf711c216c0208cfe4&format=json&nojsoncallback=1\";\n\n\nd3.json(flickrApi, function(data){\n  console.log(\"flickrApi\", data);\n\n  var imgs = data.photos.photo.map(function(d){\n    return \"https://farm\"+ d.farm +\".staticflickr.com/\"+ d.server +\"/\"+ d.id +\"_\"+ d.secret +\"_m.jpg\";\n  })\n\n  render(imgs);\n})\n\nfunction render(imgs) {\n\n  voro = voronoi(vertices).map(d3.geom.polygon);\n\n  clip.data(voro, polygon).enter().append(\"clipPath\")\n    .attr(\"id\", function(d,i){ return \"clip\"+i; })\n    .append(\"path\")\n    .attr(\"d\", polygon)\n     \n  image.data(voro, polygon).enter().append(\"image\")\n    .style(\"opacity\",0)\n    .attr(\"width\", 240)\n    .attr(\"height\", 180)\n    .attr(\"x\", function(d){ return d.centroid()[0]-120; })\n    .attr(\"y\", function(d){ return d.centroid()[1]-90; })\n    .attr(\"xlink:href\", function(d,i){ return imgs[i] })\n    .attr(\"clip-path\", function(d,i) { return \"url(#clip\"+i+\")\"; })\n    .on(\"load\", function(d){\n      d3.select(this).transition().style(\"opacity\",1)\n    })\n\n}\n\nfunction polygon(d) {\n  return \"M\" + d.join(\"L\") + \"Z\";\n}\n\n</script>","filenames":["README.md","index.html","thumbnail.png"],"thumb":"46bf562f7221b85eb67a63733190495f93031550"}},{"_index":"blockbuilder","_type":"blocks","_id":"5993342","_score":0.7974434,"_source":{"userId":"nsonnad","description":"Circle-bound D3 force layout","created_at":"2013-07-14T05:51:40Z","updated_at":"2015-12-19T17:39:18Z","api":["d3.select","d3.range","d3.layout.force"],"colors":["#fff8d1","#3db1ff","#4f4f4f"],"readme":"Circle-bound nodes in [d3.layout.force()](https://github.com/mbostock/d3/wiki/Force-Layout), using a variation of Mike Bostock's rectangular [Bounded Force Layout](http://bl.ocks.org/mbostock/1129492). Here we calculate the maximum and minimum `x` for a given `y` in the circle, and vice versa.","code":"<html>\n<head>\n    <title>Circular bounds</title>\n<script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n</head>\n<body>\n<div id=\"chart\"></div>\n\n<script>\nvar margin = 30,\n    w = 500 - margin * 2,\n    h = w,\n    radius = w / 2,\n    strokeWidth = 4,\n    hyp2 = Math.pow(radius, 2),\n    nodeBaseRad = 5;\n\nvar svg = d3.select('#chart').append('svg')\n    .attr('width', w + margin * 2)\n    .attr('height', h + margin * 2)\n.append('g')\n    .attr('transform', 'translate(' + margin + ',' + margin + ')');\n\nvar pool = svg.append('circle')\n    .style('stroke-width', strokeWidth * 2)\n    .attr({\n        class: 'pool',\n        r: radius,\n        cy: 0,\n        cx: 0,\n        transform: 'translate(' + w / 2 + ',' + h / 2 + ')'\n    });\n\nfunction randomNodes(n) {\n    var data = [],\n        range = d3.range(n);\n\n    for (var i = range.length - 1; i >= 0; i--) {\n        data.push({\n            rad: Math.floor(Math.random() * 12)\n        });\n    }\n    return data;\n}\n\nvar nodeData = randomNodes(80);\n\nvar force = d3.layout.force()\n    .charge(-50)\n    .gravity(0.05)\n    .nodes(nodeData)\n    .size([w, h]);\n\nvar nodes = svg.selectAll('.nodes')\n    .data(nodeData)\n.enter().append('circle')\n    .attr({\n        class: 'nodes',\n        r: function (d) { return d.rad + nodeBaseRad; },\n        fill: \"#fff8d1\"\n    })\n\nfunction pythag(r, b, coord) {\n    r += nodeBaseRad;\n\n    // force use of b coord that exists in circle to avoid sqrt(x<0)\n    b = Math.min(w - r - strokeWidth, Math.max(r + strokeWidth, b));\n\n    var b2 = Math.pow((b - radius), 2),\n        a = Math.sqrt(hyp2 - b2);\n\n    // radius - sqrt(hyp^2 - b^2) < coord < sqrt(hyp^2 - b^2) + radius\n    coord = Math.max(radius - a + r + strokeWidth,\n                Math.min(a + radius - r - strokeWidth, coord));\n\n    return coord;\n}\n\nfunction tick() {\n    nodes.attr('cx', function (d) { return d.x = pythag(d.rad, d.y, d.x); })\n        .attr('cy', function (d) { return d.y = pythag(d.rad, d.x, d.y); });\n}\n\nnodes.call(force.drag);\n\nforce.on('tick', tick)\n    .start();\n</script>\n</body>\n</html>","filenames":["README.md","index.html","style.css","thumbnail.png"],"thumb":"4b2e70c10819ba099ba710474cef10d62354ff6d"}},{"_index":"blockbuilder","_type":"blocks","_id":"1768f929ffafb7a2238f7438a866dc37","_score":0.7569596,"_source":{"userId":"GitNoise","description":"Bound d3 with repulsion","created_at":"2016-04-08T21:14:22Z","updated_at":"2016-04-11T19:06:02Z","api":["d3.range","d3.scale.category10","d3.select","d3.layout.force","d3.geom.quadtree"],"colors":["#d6d6d6","#ffffff","#808080","#000000","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf","#3db1ff","#4f4f4f"],"readme":"Circle-bound nodes in [d3.layout.force()](https://github.com/mbostock/d3/wiki/Force-Layout), using a variation of Mike Bostock's rectangular [Bounded Force Layout](http://bl.ocks.org/mbostock/1129492). Here we calculate the maximum and minimum `x` for a given `y` in the circle, and vice versa.\n\nforked from <a href='http://bl.ocks.org/nsonnad/'>nsonnad</a>'s block: <a href='http://bl.ocks.org/nsonnad/5993342'>Circle-bound D3 force layout</a>","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n  svg { \n  \tborder: 1px solid black;\n  }\n</style>\n<body style=\"padding:40px\">\n\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/sylvester/0.1.3/sylvester.min.js\"></script> \n<script src=\"//d3js.org/d3.v3.min.js\"></script>\n<script>  \nvar width = 500, \n    height = 500, \n    radius = 20,  \n    padding = 100;\n    \nvar nodes = d3.range(10).map(function() { return {\n  radius: radius,\n  x: padding + Math.random() * (width - padding*2),\n  y: padding + Math.random() * (height - padding*2)\n}; }),\n    color = d3.scale.category10();\n   \nfunction MoveToClosestWall(d) {\n  if (d.x < width/2 && d.y < height/2 && d.y > d.x) d.x = 0;\n  if (d.x < width/2 && d.y < height/2 && d.x >= d.y) d.y = 0;\n \n  if (d.x >= width/2 && d.y < height/2 && width - d.x > d.y ) d.y = 0;\n  if (d.x >= width/2 && d.y < height/2 && width - d.x <= d.y) d.x = width;\n  \n  if (d.x < width/2 && d.y >= height/2 && d.x < height - d.y) d.x = 0;\n  if (d.x < width/2 && d.y >= height/2 && d.x >= height - d.y) d.y = height;\n  \n  if (d.x >= width/2 && d.y >= height/2 && width - d.x > height - d.y) d.y = height;\n  if (d.x >= width/2 && d.y >= height/2 && width - d.x <= height - d.y) d.x = width;\n}  \n\n  var left = Line.create([0,0], [0,height]);\n  var right = Line.create([width,0], [width,height]);\n  var bottom = Line.create([0,0], [width,0]);\n  var top = Line.create([0,height], [width,height]);\n  \nconsole.log(left, right, bottom, top);\n\nfunction ProjectOnLine(d) {\n  var origin = {x: width/2; y: height/2;}\n  \n}\n  \nnodes.forEach(function(d) {\n    d.orgX = d.x; \n    d.orgY = d.y;\n    //MoveToClosestWall(d);\n\t})  \n\n  var svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n  \n  var borders = svg.append(\"g\").classed(\"borders\", true);\n  borders.append(\"line\")\n\t\t.attr({\n    \tx1: 0, y1: 0,\n      x2: width, y2: height,\n      stroke: \"#d6d6d6\"\n  });\n  \n  borders.append(\"line\")\n\t\t.attr({\n    \tx1: 0, y1: height,\n      x2: width, y2: 0,\n      stroke: \"#d6d6d6\"\n  });\n  \n  borders.append(\"line\")\n\t\t.attr({\n    \tx1: width/2, y1: 0,\n      x2: width/2, y2: height,\n      stroke: \"#d6d6d6\"\n  }); \n  \n   borders.append(\"line\")\n\t\t.attr({\n    \tx1: 0, y1: height/2,\n      x2: width, y2: height/2,\n      stroke: \"#d6d6d6\"\n  });\n \n \n  var group = svg.selectAll(\".first\").data(nodes).enter().append(\"g\").classed(\"first\", true);\n  group.append(\"line\")\n    .attr({\n      x1: function(d) { return d.x; },\n      y1: function(d) { return d.y; },\n      x2: function(d) { return d.orgX; },\n      y2: function(d) { return d.orgY; },\n  \t\t\"stroke\": \"#d6d6d6\"});\n      \n  group.append(\"circle\")   \n    .attr({\n      cx: function(d) { return d.orgX; },\n      cy: function(d) { return d.orgY; },\n      r: 3,\n      fill: \"gray\",\n  \t\t\"stroke\": \"gray\"});\n  \n  group.append(\"circle\")\n    .attr({\n      cx: function(d) { return d.x; },\n      cy: function(d) { return d.y; },\n      r: 3,\n      fill: \"white\",\n  \t\t\"stroke\": \"gray\"});\n  \nvar force = d3.layout.force()\n    .gravity(0) \n    .charge(-200) \n    .nodes(nodes) \n.size([width, height])\n .on('end', function() { \n   nodes.forEach(function(d,i) {  \n     \n    var g = svg.append(\"g\");\n     g.append(\"line\")          \n      .style(\"stroke\", \"gray\")  \n      .attr(\"x1\", d.orgX)    \n      .attr(\"y1\", d.orgY)\n      .attr(\"x2\", d.x)    \n      .attr(\"y2\", d.y); \n\n  g.append(\"circle\")\n       \t.attr({\n          cx: d.x,\n          cy: d.y,\n          r: radius,\n          fill: \"white\",\n          stroke: \"gray\"     \n        });\n     \n       g.append(\"svg:image\")\n        .attr(\"xlink:href\",  \"https://image.freepik.com/free-icon/chinese-temple_318-104239.png\")\n        .attr(\"x\", d.x - radius/2)\n        .attr(\"y\", d.y - radius/2)\n        .attr(\"height\", radius)\n        .attr(\"width\", radius);\n   });  \n }); \n  \nforce.start();   \n  \nsvg.selectAll(\".move\")\n    .data(nodes)\n  .enter().append(\"circle\")\n\t.classed(\"move\", true)\n    .attr(\"r\", function(d) { return d.radius; })\n    .attr(\"cx\", function(d) { return d.x; })\n    .attr(\"cy\", function(d) { return d.y; })\n\t\t.style({\n      fill: \"url(#bkgrdimg)\",\n      stroke: \"gray\"\n\t\t});\n  \n  \n     \n\nforce.on(\"tick\", function(e) {\n  var q = d3.geom.quadtree(nodes),\n      i = 0,\n      n = nodes.length;\n  \n  while (++i < n) q.visit(collide(nodes[i]));\n  \n  svg.selectAll(\".move\")\n      .attr(\"cx\", function(d) { return d.x = Math.max(radius, Math.min(width - radius, d.x)); })\n      .attr(\"cy\", function(d) { return d.y = Math.max(radius, Math.min(height - radius, d.y)); });\n  \n});\n\n  \nfunction collide(node) {\n  var r = node.radius,\n      nx1 = node.x - r,\n      nx2 = node.x + r,\n      ny1 = node.y - r,\n      ny2 = node.y + r;\n  return function(quad, x1, y1, x2, y2) {\n    if (quad.point && (quad.point !== node)) {\n      var x = node.x - quad.point.x,\n          y = node.y - quad.point.y,\n          l = Math.sqrt(x * x + y * y),\n          r = node.radius + quad.point.radius;\n      if (l < r) {\n        l = (l - r) / l * .5;\n        node.x -= x *= l;\n        node.y -= y *= l;\n        quad.point.x += x;\n        quad.point.y += y;\n      }\n    }\n    return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;\n  };\n}\n  \n</script>\n","filenames":["README.md","index.html","style.css"]}},{"_index":"blockbuilder","_type":"blocks","_id":"6850cf2d083597d36900","_score":0.5981661,"_source":{"userId":"emeeks","description":"Particle Edges Dendrogram","created_at":"2015-12-03T18:39:37Z","updated_at":"2016-03-08T01:40:38Z","api":["d3.json","d3.scale.category20c","d3.layout.tree","d3.svg.diagonal","d3.select","d3.timer","d3.selectAll"],"colors":["#d2b48c","#ffffff","#000000","#3182bd","#6baed6","#9ecae1","#c6dbef","#e6550d","#fd8d3c","#fdae6b","#fdd0a2","#31a354","#74c476","#a1d99b","#c7e9c0","#756bb1","#9e9ac8","#bcbddc","#dadaeb","#636363","#969696","#bdbdbd","#d9d9d9"],"readme":"Particle edges from [d3_glyphEdges](https://github.com/emeeks/d3-glyphEdges) are the most difficult edge type to implement. Here's an example using a dendrogram and the connecting paths from the dendrogram. Remember that `d3_glyphEdge.mutate.particle` mutates the edge data object, spawning new particles, updating the position of existing particles and deleting particles that have reached the end of the path, and it's this array that you use to represent the particles (either with SVG as in this example or, if you're dealing with a lot of particles, probably canvas). As such, an edge object needs to have, along with `.source` and `.target`, `.frequency` (a positive number) to indicate the number of particles created per tick and `.particles` (an array) to hold the created particles.\n\n`d3_glyphEdge.mutate.particle` does not include its own tick function so you need to create your own. This example uses `d3.timer` whereas [this network example](http://bl.ocks.org/emeeks/aaa995cde6621745e906) uses the built-in tick function in `d3.layout.force`.","code":"\n<!DOCTYPE html>\n\n<head>\n  <title>Particle Edges Dendrogram</title>\n</head>\n<meta charset=\"utf-8\">\n<style>\n\nsvg {\n  height: 500px;\n  width: 500px;\n}\n\n</style>\n<body>\n<div id=\"viz\">\n<svg></svg>\n</div>\n</body>\n\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js\"></script>\n<script src=\"d3-glyphEdge.js\" charset=\"utf-8\" type=\"text/javascript\"></script>\n<script>\n\nd3.json(\"sotu.json\", dendrogram);\n\nfunction dendrogram(data) {\n  data = data.values[0];\n\n  var blahColor = d3.scale.category20c();\n\n  treeChart = d3.layout.tree();\n      treeChart.size([500,460])\n      .children(function(d) {return d[\"values\"]})\n\n  var linkGenerator = d3.svg.diagonal()\n\n  var chartG = d3.select(\"svg\")\n    .append(\"g\")\n    .attr(\"class\", \"dendrogram\")\n    .attr(\"transform\", \"translate(0,20)\");\n\n    chartG\n    .selectAll(\"g.link\")\n    .data(treeChart.links(treeChart(data)))\n    .enter().append(\"g\")\n    .attr(\"class\", \"link\")\n    .append(\"path\")\n    .attr(\"d\", linkGenerator)\n    .style(\"fill\", \"none\")\n    .style(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"4px\")\n    .style(\"stroke-opacity\", 0.05)\n    .each(function (d) {\n      //edges need a .frequency and a .particles\n      //.particles is an empty array that will collect particle datapoints for this edge\n      d.particles = [];\n      //.frequency is the number of particles per tick or, if the value is less than 1, the percent chance of a particle to be generated during that tick\n      d.frequency = Math.random() * 0.1;\n      //Why not a random color for the particles on each edge?\n      d.color = blahColor(parseInt(Math.random() * 20));\n      //And let's set a random speed for the particles on each edge, this is the number of pixels a particle moves per tick\n      d.speed = Math.random() + 1;\n    })\n\n    chartG\n    .selectAll(\"circle\")\n    .data(treeChart(data))\n    .enter().append(\"circle\")\n    .attr(\"r\", 2)\n    .style(\"stroke-width\", \"0.5px\")\n    .style(\"stroke-opacity\", 0.75)\n    .attr(\"cx\", function (d) {return d.x})\n    .attr(\"cy\", function (d) {return d.y})\n    .style(\"fill\", \"white\")\n    .style(\"stroke\", \"black\")\n\n  var t = d3.timer(tick, 1000);\n\n  function tick(elapsed, time) {\n    console.log(\"t\");\n    particles();\n  }\n\n}\n\nfunction particles() {\n\n    d3.selectAll(\"g.link\")\n      .each(function (d, i) {\n\n        /* particle edges take an edge data object, an actual path from which to derive the particle position (hence why we use .node() to get the actual svg:path element associated with the selection), a width of the path to determine the jitter of the particles and a speed for the particles. */\n\n          d3_glyphEdge.mutate.particle(d, d3.select(this).select(\"path\").node(), 3, d.speed);\n\n        /* d3_glyphEdge.mutate.particle mutates the .particles array of the edge sent to it, adding new particles, updating the position of existing particles and deleting particles that have reached the end of the path. We use that array to instantiate elements to represent each particle (here using SVG but you could also use canvas) */\n\n          d3.select(this).selectAll(\"circle\")\n            .data(d.particles)\n            .enter()\n            .append(\"circle\")\n            .style(\"fill-opacity\", .85)\n            .style(\"fill\", d.color)\n            .attr(\"r\", 1.5);\n\n          d3.select(this).selectAll(\"circle\")\n            .data(d.particles)\n            .exit()\n            .remove();\n\n          d3.select(this).selectAll(\"circle\")\n            .attr(\"cx\", function (p) {return p.x})\n            .attr(\"cy\", function (p) {return p.y});\n      })\n\n}\n\n</script>","filenames":["README.md","d3-glyphEdge.js","index.html","sotu.json","thumbnail.png"],"thumb":"541f6f8d8b28943fd03f1ae060c12fc639eedf6a"}},{"_index":"blockbuilder","_type":"blocks","_id":"14c943d8f198d9f3fef2","_score":0.5272137,"_source":{"userId":"john-guerra","description":"Force in a Box algorithm","created_at":"2014-11-07T01:56:19Z","updated_at":"2016-03-05T19:22:18Z","api":["d3.select","d3.scale.category20","d3.layout.forceInABox","d3.json"],"colors":["#ffffff","#999999","#d2b48c","#1f77b4","#aec7e8","#ff7f0e","#ffbb78","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5","#8c564b","#c49c94","#e377c2","#f7b6d2","#7f7f7f","#c7c7c7","#bcbd22","#dbdb8d","#17becf","#9edae5"],"readme":"forceInABox\n===========\n\nForce in a box is A d3.js force extension that implements the Group-in-a-box layout algorithm to distribute nodes in a network according to their clusters. The algorithm uses a treemap to compute focis that are later used to distribute each cluster into it's own box.\n\nTo use it you need to include the library, and use the forceInABox instead of the normal d3.layout.force\n\n```html\n\t<script type=\"text/javascript\" src=\"forceInABox.js\">   </script>\n```\n```js\n\t//create the force and specify the grouping parameter\n\tvar force = d3.layout.forceInABox()\n\t\t\t\t\t.groupBy(\"group\");\n\n\t//Add nodes and edges\n\tforce.nodes(nodes)\n\t\t.edges(edges)\n\t\t.start();\n\n\t//Add the onTick method to the tick event\n\tforce.on(\"tick\", function(e) {\n      force.onTick(e);\n    };\n```\n\n\n[forceInABox repo](https://github.com/john-guerra/forceInABox)\n\n","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\n.node {\n  stroke: #fff;\n  stroke-width: 1.5px;\n}\n\n.link {\n  stroke: #999;\n  stroke-opacity: .6;\n}\n\n.cell {\n  fill: none;\n  stroke: grey;\n}\n\n</style>\n<body>\n<input id=\"checkGroupInABox\" type=\"checkbox\">Group in a Box</input>\n<input id=\"checkShowTreemap\" type=\"checkbox\">Show Treemap</input>\n<script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n<script type=\"text/javascript\" src=\"http://dutovis.com/forceInABox/forceInABox.js\"></script>\n<script>\n\nvar useGroupInABox = true,\n  drawTreeMap = false;\n\nd3.select(\"#checkGroupInABox\").property(\"checked\", useGroupInABox);\nd3.select(\"#checkShowTreemap\").property(\"checked\", drawTreeMap);\n\nvar width = 900,\n    height = 450;\n\nvar color = d3.scale.category20();\n\nvar force = d3.layout.forceInABox()\n    .charge(-120)\n    .linkDistance(50)\n    .linkStrengthInterCluster(0.01)\n    .gravityToFoci(0.2)\n    .gravityOverall(0.05)\n    .size([width, height])\n    .groupBy(\"group\");\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\nd3.json(\"miserables.json\", function(error, graph) {\n\n  force\n      .nodes(graph.nodes)\n      .links(graph.links)\n      .start();\n\n  var link = svg.selectAll(\".link\")\n      .data(graph.links)\n    .enter().append(\"line\")\n      .attr(\"class\", \"link\")\n      .style(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\n  var node = svg.selectAll(\".node\")\n      .data(graph.nodes)\n    .enter().append(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"r\", 5)\n      .call(force.drag)\n      .style(\"fill\", function(d) { return color(d.group); });\n\n  node.append(\"title\")\n      .text(function(d) { return d.name; });\n\n  force.on(\"tick\", function(e) {\n    if (useGroupInABox) {\n      force.onTick(e);\n    }\n\n    link.attr(\"x1\", function(d) { return d.source.x; })\n        .attr(\"y1\", function(d) { return d.source.y; })\n        .attr(\"x2\", function(d) { return d.target.x; })\n        .attr(\"y2\", function(d) { return d.target.y; });\n\n    node.attr(\"cx\", function(d) { return d.x; })\n        .attr(\"cy\", function(d) { return d.y; });\n  });\n\n  d3.select(\"#checkGroupInABox\").on(\"change\", function () {\n    force.stop();\n    useGroupInABox = d3.select(\"#checkGroupInABox\").property(\"checked\");\n    force.enableGrouping(useGroupInABox);\n    force.start();\n  });\n\n  d3.select(\"#checkShowTreemap\").on(\"change\", function () {\n    drawTreeMap = d3.select(\"#checkShowTreemap\").property(\"checked\");\n    if (drawTreeMap) {\n      force.drawTreemap(svg);\n    } else {\n      force.deleteTreemap(svg);\n    }\n  });\n\n});\n\n</script>","filenames":["README.md","index.html","miserables.json","thumbnail.png"],"thumb":"b7853a44cb60e63d5f3b705f2525a97234ca32ef"}},{"_index":"blockbuilder","_type":"blocks","_id":"6dd7b5b74b81badaebe3397dddf74260","_score":0.5253037,"_source":{"userId":"serouvivek","description":"d3","created_at":"2016-04-15T09:19:07Z","updated_at":"2016-04-15T09:19:07Z","api":["d3.select"],"colors":["#a72d1a","#5db9e3"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/0bff3139b4ff3fa3eb3f96dfb126ac4e'>d3</a>","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width:100%; height: 100% }\n  </style>\n</head>\n\n<body>\n  <script>\n    // Feel free to change or delete any of the code you see!\n    var svg = d3.select(\"body\").append(\"svg\")\n    svg.append(\"rect\")\n      .attr({x: 100, y: 10, width: 700, height: 480})\n      .style({ fill: \"#a72d1a\"})\n      .transition().duration(3000).ease(\"bounce\")\n      .style({ fill: \"#5db9e3\"})\n\n    console.log(\"you are now rocking with d3\", d3);\n  </script>\n</body>\n","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"d25690581801fc0c1cfd","_score":0.52421933,"_source":{"userId":"emeeks","description":"Networks - Intro 2","created_at":"2015-07-25T23:50:11Z","updated_at":"2016-03-17T02:07:45Z","api":["d3.csv","d3.layout.force","d3.select"],"colors":["#cc9999","#996666","#d2b48c","#808080"],"readme":"Intro Example 2 for [How to Create Effective Network Data Visualization](http://elijahmeeks/networkviz/)\n\nHere's the same network dataset from the last example laid out as a network. The force-directed layout that D3 uses (d3.layout.force) expects arrays of nodes and arrays of edges. In order to create those necessary arrays, we walk through the edgelist in firm.csv and create the referenced nodes from the source and target id values in the edge list.\n\nThe resulting ball of spaghetti is all too common in finished network data visualization. Compared to the earlier bar charts, this is a horrible data visualization product and says nothing, other than perhaps \"this is complex\" but mostly, \"the person who created this is more interested in technology than they are in communication.\"","code":"<html>\n<head>\n  <title>Drawing a simple network without filtering</title>\n  <meta charset=\"utf-8\" />\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n</head>\n<style>\n  svg {\n    height: 500px;\n    width: 500px;\n    border: 1px solid gray;\n  }\n</style>\n<body>\n\n<div id=\"viz\">\n  <svg>\n  </svg>\n</div>\n</body>\n  <footer>\n<script>\n\nd3.csv(\"firm.csv\",function(error,data) {dataViz(data)});\n\nfunction dataViz(incData) {\n\n  var nodeHash = {};\n  var nodes = [];\n  var edges = [];\n\n  incData.forEach(function (edge) {\n    if (!nodeHash[edge.source]) {\n      nodeHash[edge.source] = {id: edge.source, label: edge.source};\n      nodes.push(nodeHash[edge.source]);\n    }\n    if (!nodeHash[edge.target]) {\n      nodeHash[edge.target] = {id: edge.target, label: edge.target};\n      nodes.push(nodeHash[edge.target]);\n    }\n    edges.push({source: nodeHash[edge.source], target: nodeHash[edge.target], weight: edge.weight});\n  });\n\n  var force = d3.layout.force().nodes(nodes).links(edges)\n  .size([500,500])\n  .charge(-200)\n  .linkDistance(100)\n  .on(\"tick\", updateNetwork);\n\n  d3.select(\"svg\").selectAll(\"line\")\n  .data(edges)\n  .enter()\n  .append(\"line\")\n  .style(\"stroke-width\", \"1px\")\n  .style(\"stroke\", \"#CC9999\");\n\n  d3.select(\"svg\").selectAll(\"circle\")\n  .data(nodes)\n  .enter()\n  .append(\"circle\")\n  .style(\"fill\", \"#996666\")\n  .attr(\"r\", 5);\n\n  force.start();\n\n  function updateNetwork() {\n    d3.select(\"svg\").selectAll(\"line\")\n      .attr(\"x1\", function (d) {return d.source.x})\n      .attr(\"x2\", function (d) {return d.target.x})\n      .attr(\"y1\", function (d) {return d.source.y})\n      .attr(\"y2\", function (d) {return d.target.y});\n\n    d3.select(\"svg\").selectAll(\"circle\")\n      .attr(\"cx\", function (d) {return d.x})\n      .attr(\"cy\", function (d) {return d.y});\n  }\n\n\n\n}\n</script>\n  </footer>\n\n</html>\n","filenames":["firm.csv","index.html","readme.md","thumbnail.png"],"thumb":"f8fb87df63ab3ac64b6ec9ace8599b59e87eecf7"}},{"_index":"blockbuilder","_type":"blocks","_id":"1159696","_score":0.51850766,"_source":{"userId":"bewest","description":"d3 ","created_at":"2011-08-20T21:36:31Z","updated_at":"2015-09-26T21:08:05Z","api":["d3.range","d3.select","d3.behavior.zoom"],"colors":["#aaaaaa","#eeeeee","#000000","#facfcf","#ff0000","#ffff00","#b0c4de","#4682b4","#0000ff"],"readme":"","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">\n    <title>Hexagons Test</title>\n    <script type=\"text/javascript\" src=\"https://raw.github.com/bewest/d3/bewest/d3.js\"></script>\n    <script type=\"text/javascript\" src=\"https://raw.github.com/bewest/d3/bewest/d3.behavior.js\"></script>\n    <script type=\"text/javascript\" src=\"https://raw.github.com/bewest/d3/bewest/d3.time.js\"></script>\n    <style type=\"text/css\">\nsvg {\n    border: solid 1px #aaa;\n    background: #eee;\n}\n\nrect.border {\n  fill: none;\n  stroke: red;\n}\nrect {\n    fill: lightsteelblue;\n    stroke: #000;\n    stroke-width: .5px;\n}\n\nrect.even {\n    fill: lightsteelblue;\n}\nrect.odd {\n    fill: #FACFCF;\n}\n\n.highlight {\n      fill: red;\n}\n    </style>\n  </head>\n  <body>\n    <script type=\"text/javascript\">\n// <![CDATA[\n\nvar w = 800,\n    h = 500,\n    padding = 0;\n    \nvar diameter = 50;\nvar tileSize = 256;\n\nvar offset = diameter / 2;\nvar data = [];\nvar index = 0;\n// X\nd3.range(0, w * 2,  diameter ).map(function(v1, i) {\n    // Y\n    d3.range(0, h, h).map(function(v2, j) {\n    console.log(['x', v1, i], ['y', v2, j]);\n        //var x = j % 2 ? v1 + offset : v1,\n        var x = v1,\n            y = v2;\n        data.push({\n            id: index++,\n            centroid: [x, y],\n            coordinates: [i, j, (i + j) * -1],\n            //customName: 'test',\n            visible: x >= padding && x <= w - padding && y >= padding && y <= h - padding\n        });\n    });\n});\n\n\n\nvar border = 10;\n\nvar svg = d3.select(\"body\")\n    .append(\"svg:svg\")\n    .attr(\"width\", w)\n    .attr(\"height\", h)\n    .attr(\"pointer-events\", \"all\");\n\nsvg.call(d3.behavior.zoom().on(\"zoom\", move));\n    \n    svg.append(\"svg:rect\")\n    .attr(\"x\", border)\n    .attr(\"y\", border)\n    .attr('width', w - (border*2))\n    .attr('height', h - (border*2))\n    .attr('class', 'border')\n    ;\n    \n    \nrender();\n\nfunction mouseover(d, i) {\n    d3.select(this)\n        .attr(\"class\", \"highlight\");\n}\n\nfunction mouseout(d, i) {\n    d3.select(this)\n        .attr(\"class\", i % 2 ? 'odd' : 'even');\n}\n\nfunction click(d, i) {\n    d.customName = Date.now();\n    console.log(\"click\", this, d, i);\n    d3.select(this)\n        .style(\"fill\", \"yellow\");\n}\n\nfunction removeClicked() {\n    svg.selectAll(\"path\")\n        .filter(function(d) { \n            return d.customName != 'test'; \n        })\n        .remove();\n}\n\nfunction move() {\n    var x = d3.event.translate[0],\n        y = d3.event.translate[1]\n    \n    console.log(x,y);\n    data.filter(function(d) {\n        return !d.visible \n            && d.centroid[0] + x >= padding \n            && d.centroid[0] + x <= w - padding \n            ;\n    /*\n            && d.centroid[1] + y >= padding \n            && d.centroid[1] + y <= h - padding;\n    */\n    }).map(function(d) {\n        console.log(x,y, d.centroid, d);\n        d.visible = true;\n        return d;\n    });\n    \n    data.filter(function(d) {\n        return d.visible \n            && (d.centroid[0] + x < padding \n                || d.centroid[0] + x > w - padding\n               )\n            ;\n    /*\n                || d.centroid[1] + y < padding \n                || d.centroid[1] + y > h - padding);\n    */\n    }).map(function(d) {\n        console.log(d.id, 'invisible');\n        d.visible = false;\n        return d;\n    });\n    /*\n    */\n    \n    render();\n    \n    // do the move\n    svg.selectAll(\"g\")\n        .attr(\"transform\", \"translate(\" + [x, 10] + \")\" /*+ \"scale(\" + d3.event.scale + \")\"*/);\n}\n\nfunction render() {\n    var grid = svg.selectAll(\"g\")\n        .data(\n            data.filter(function(d) { return d.visible; }), \n            function(d) { return d.id; }\n        );\n\n  var tile= grid.enter()\n        .sort(function(a, b) { return a.id - b.id; })\n        .append(\"svg:g\")\n        .attr('class', function(d, i) {\n          return i % 2 ? 'odd' : 'even';\n        })\n        ;\n    tile\n        .append(\"svg:rect\")\n        .attr('width', diameter)\n        .attr('height', diameter)\n        .attr('id', function(d, i) { return  \"g_\" + d.id; })\n        .attr('class', function(d, i) {\n          return i % 2 ? 'odd' : 'even';\n        })\n        .attr('x', function(d, i) {\n          return d.centroid[0];\n        })\n        .attr('y', function(d) {\n          // return 0;\n          return d.centroid[1];\n        })\n        .on(\"mouseover\", mouseover)\n        .on(\"mouseout\", mouseout)\n        .on(\"click\", click)\n        ;\n        tile\n          .append('svg:text').text(function(d,i) { return d.id; })\n          .attr('dy', '.71em')\n          .attr('stroke', 'black')\n          .attr('x', function(d, i) {\n            return d.centroid[0] + 6;\n            // return i * diameter + 6;\n          })\n          .attr('y', function(d, i) {\n            return d.centroid[1] + 6;\n            // return i * diameter + 6;\n          })\n          // .attr('y', '6')\n        //.attr('x', 10)\n        ;\n    \n    grid.exit().remove();\n}\n\n\n// ]]>\n    </script>\n  </body>\n</html>\n\n","filenames":["README d3 blather","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"528b427834c7004dba89","_score":0.5124679,"_source":{"userId":"jalapic","description":"Networks - Intro 2","created_at":"2015-11-08T22:11:50Z","updated_at":"2015-11-08T22:14:58Z","api":["d3.csv","d3.layout.force","d3.select"],"colors":["#cc9999","#996666","#d2b48c","#808080"],"readme":"Intro Example 2 for [How to Create Effective Network Data Visualization](http://elijahmeeks/networkviz/)\n\nHere's the same network dataset from the last example laid out as a network. The force-directed layout that D3 uses (d3.layout.force) expects arrays of nodes and arrays of edges. In order to create those necessary arrays, we walk through the edgelist in firm.csv and create the referenced nodes from the source and target id values in the edge list.\n\nThe resulting ball of spaghetti is all too common in finished network data visualization. Compared to the earlier bar charts, this is a horrible data visualization product and says nothing, other than perhaps \"this is complex\" but mostly, \"the person who created this is more interested in technology than they are in communication.\"","code":"<html>\n<head>\n  <title>Drawing a simple network without filtering</title>\n  <meta charset=\"utf-8\" />\n<script src=\"http://d3js.org/d3.v3.min.js\" type=\"text/JavaScript\"></script>\n</head>\n<style>\n  svg {\n    height: 500px;\n    width: 500px;\n    border: 1px solid gray;\n  }\n</style>\n<body>\n\n<div id=\"viz\">\n  <svg>\n  </svg>\n</div>\n</body>\n  <footer>\n<script>\n\nd3.csv(\"firm.csv\",function(error,data) {dataViz(data)});\n\nfunction dataViz(incData) {\n\n  var nodeHash = {};\n  var nodes = [];\n  var edges = [];\n\n  // create node array - from edgelist\n  incData.forEach(function (edge) {\n    if (!nodeHash[edge.source]) {\n      nodeHash[edge.source] = {id: edge.source, label: edge.source};\n      nodes.push(nodeHash[edge.source]);\n    }\n    if (!nodeHash[edge.target]) {\n      nodeHash[edge.target] = {id: edge.target, label: edge.target};\n      nodes.push(nodeHash[edge.target]);\n    }\n    edges.push({source: nodeHash[edge.source], target: nodeHash[edge.target], weight: edge.weight});  //create edge array\n  });\n\n  // requires array of nodes with positions to use as input \n  var force = d3.layout.force().nodes(nodes).links(edges)\n  .size([500,500])\n  .charge(-200) //how much to attract/repel\n  .linkDistance(100)\n  .on(\"tick\", updateNetwork);\n\n  d3.select(\"svg\").selectAll(\"line\")\n  .data(edges)\n  .enter()\n  .append(\"line\")\n  .style(\"stroke-width\", \"1px\")\n  .style(\"stroke\", \"#CC9999\");\n\n  d3.select(\"svg\").selectAll(\"circle\")\n  .data(nodes)\n  .enter()\n  .append(\"circle\")\n  .style(\"fill\", \"#996666\")\n  .attr(\"r\", 5);\n\n  force.start();  // start animation of forced layout\n\n  function updateNetwork() {\n    d3.select(\"svg\").selectAll(\"line\")\n      .attr(\"x1\", function (d) {return d.source.x})\n      .attr(\"x2\", function (d) {return d.target.x})\n      .attr(\"y1\", function (d) {return d.source.y})\n      .attr(\"y2\", function (d) {return d.target.y});\n\n    d3.select(\"svg\").selectAll(\"circle\")\n      .attr(\"cx\", function (d) {return d.x})\n      .attr(\"cy\", function (d) {return d.y});\n  }\n\n\n\n}\n</script>\n  </footer>\n\n</html>\n","filenames":["README.md","firm.csv","index.html","readme.md"]}},{"_index":"blockbuilder","_type":"blocks","_id":"bd76db6e38915c30fc5b","_score":0.47292233,"_source":{"userId":"cool-Blue","description":"self-sorting nodes in d3 fdg","created_at":"2015-08-28T19:37:54Z","updated_at":"2015-08-31T16:51:43Z","api":["d3.select","d3.format","d3.layout.force","d3.max","d3.geom.quadtree","d3.range","d3.scale.category10"],"colors":["#cccccc","#ffa500","#0000ff","#000000","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf"],"readme":"## Force Directed Graph with self sorting nodes - Inertial winnowing\n### Features  \n  - **_<a id=\"collisions\">Collisions between nodes</a>_**  \n  Based on [this](http://bl.ocks.org/mbostock/3231298) example but enhanced to simulate inertia.  The distance each node is moved away from the collision is proportional to their relative mass.  Since [gravity](https://github.com/mbostock/d3/wiki/Force-Layout#gravity) is switched on and [friction](https://github.com/mbostock/d3/wiki/Force-Layout#friction) is set for low damping, the heavier nodes will move towards the center of the graph and the smaller nodes pushed out of the way.  The mass is calculated assuming the nodes are spheres, using  r<sup>3</sup>, and the rebounds calculated according to relative \"mass\".  \n  \n```javascript\n  force.alpha(a/0.99*(1 - x))\n```  \n### d3 features  used\n  1.  [d3.layout.force](https://github.com/mbostock/d3/wiki/API-Reference#force)\n  2.  [Ordinal Scales](https://github.com/mbostock/d3/wiki/Ordinal-Scales)\n  1.  [d3.format](https://github.com/mbostock/d3/wiki/Formatting#d3_format)\n  1.  [d3.range](https://github.com/mbostock/d3/wiki/Arrays#d3_range)\n  1.  [d3.geom.quadtree](https://github.com/mbostock/d3/wiki/Quadtree-Geom)  \n  ","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n    body {\n        /*margin: 200px 500px 100px 500px;*/\n    }\n\n    #inputs {\n        display: inline-block;\n        margin: 0 0 0 0.5em;\n    }\n\n    #panel {\n        display: inline-block;\n        margin: 0 0 0 100px;\n        border: none;\n        box-sizing: border-box;\n        background-color: black;\n    }\n\n    #metrics {\n        display: inline-block;\n    }\n\n    label, input {\n        text-align: left;\n        width: 3.5em;\n        color: orange;\n        /*padding-left: 1em;*/\n        background-color: black;\n        outline: none;\n        border: none;\n    }\n\n    circle {\n        stroke: black;\n    }\n\n    svg {\n        display: block;\n        overflow: visible;\n        border: none;\n        background: black;\n        margin: 0 100px 0 100px;\n    }\n\n    text {\n        text-anchor: middle;\n    }\n\n    rect {\n        stroke: #ccc;\n    }\n\n</style>\n<body>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n<!--<script src=\"d3 CB.js\"></script>-->\n<script\n    src=\"https://cdnjs.cloudflare.com/ajax/libs/tinycolor/1.1.2/tinycolor.min.js\"></script>\n<script src=\"https://gitcdn.xyz/repo/cool-Blue/d3-lib/master/filters/shadow.js\"></script>\n<script\n    src=\"https://gitcdn.xyz/repo/cool-Blue/d3-lib/master/elapsedTime/elapsed-time-1.0.js\"></script>\n<script>\n    var inputs = d3.select(\"body\").append(\"div\")\n            .attr(\"id\", \"metrics\")\n            .attr(\"id\", \"panel\")\n            .append(\"div\").attr({id: \"inputs\"}),\n        nodeCount = inputs.append(\"label\")\n            .attr(\"for\", \"nodeCount\")\n            .text(\"nodes: \")\n            .append(\"input\")\n            .attr({id    : \"nodeCount\",\n                class    : \"numIn\",\n                type     : \"number\",\n                min      : \"100\",\n                max      : \"5,000\",\n                step     : \"100\",\n                inputmode: \"numeric\"\n            });\n\n    var elapsedTime = ElapsedTime(\"#panel\", {\n            border : 0, margin: 0, \"box-sizing\": \"border-box\",\n            padding: \"0 0 0 3px\", background: \"black\", \"color\": \"orange\"\n        })\n            .message(function(value) {\n                var this_lap = this.lap().lastLap, aveLap = this.aveLap(this_lap)\n                return 'alpha:' + d3.format(\" >7,.3f\")(value)\n                    + '\\ttick time:' + d3.format(\" >8,.4f\")(this_lap)\n                    + ' (' + d3.format(\" >4,.3f\")(this.aveLap(this_lap)) + ')'\n                    + '\\tframe rate:' + d3.format(\" >4,.1f\")(1 / aveLap) + \" fps\"\n            }),\n\n        width = 960 - 200,\n        height = 500 - elapsedTime.selection.node().clientHeight,\n        padding = 4, // separation between nodes\n        maxRadius = 7;\n\n    var n = 500, // total number of nodes\n        m = 1, // number of distinct layers\n        c = 10,\n        g  = 0.2, g2 = 0.1,\n        f1 = 0.5, f2 = 0.01,\n        q2 = -40;\n\n    var tick = (function() {\n            var phase = -1, stage1 = true;\n\n            function tick(e) {\n                viz.circle.each(viz.collide(e.alpha * 40));\n                if(e.alpha < 0.02 || !(phase = ++phase %  4)) {\n                    elapsedTime.mark(e.alpha);\n                    viz.circle.attr({\n                        cx: function(d) {\n                            return d.x;\n                        },\n                        cy: function(d) {\n                            return d.y;\n                        }\n                    });\n                }\n                if(stage1 && e.alpha < 0.03) {\n                    console.log(\"stage2\")\n                    force.friction(f2)\n                        .charge(q2)\n                        .gravity(g2)\n                        .start().alpha(e.alpha);\n                    stage1 = false;\n                }\n                force.alpha(e.alpha / 0.99 * 0.998)\n            }\n\n            tick.reset = function() {\n                stage1 = true;\n            };\n            return tick;\n        })(),\n        force = d3.layout.force()\n            .size([width, height])\n            .gravity(g)\n            .charge(0)\n            .friction(f1)\n            .on(\"tick\", tick)\n            .on(\"start\", function() {\n                elapsedTime.start(1000);\n                force\n                    .gravity(g)\n                    .charge(0)\n                    .friction(f1)\n                tick.reset();\n            });\n    force.drag().on(\"dragend\", function(){force.alpha(0.05)})\n\n    var svg = d3.select(\"body\").append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .append(\"g\"),\n        bubble = Bubble(svg);\n\n    var viz = update(force, n, padding);\n\n    nodeCount\n        .property(\"value\", n)\n        .on(\"change\", function() {\n            viz = update(force, this.value, padding);\n            this.blur();\n        });\n\n    elapsedTime.selection.style({\n        width: (width\n        - parseFloat(window.getComputedStyle(d3.select(\"#inputs\").node()).getPropertyValue(\"width\"))\n        - parseFloat(window.getComputedStyle(d3.select(\"#inputs\").node()).getPropertyValue(\"margin-left\")))\n        + \"px\"\n    });\n\n    function Collide(nodes, padding) {\n        // Resolve collisions between nodes.\n        var maxRadius = d3.max(nodes, function(d) {\n            return d.radius\n        });\n        return function collide(alpha) {\n            var quadtree = d3.geom.quadtree(nodes);\n            return function(d) {\n                var r   = d.radius + maxRadius + padding,\n                    nx1 = d.x - r,\n                    nx2 = d.x + r,\n                    ny1 = d.y - r,\n                    ny2 = d.y + r;\n                quadtree.visit(function(quad, x1, y1, x2, y2) {\n                    var possible = !(x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1);\n                    if(quad.point && (quad.point !== d) && possible) {\n                        var x  = d.x - quad.point.x,\n                            y  = d.y - quad.point.y,\n                            l  = Math.sqrt(x * x + y * y),\n                            r  = d.radius + quad.point.radius + padding,\n                            m  = Math.pow(quad.point.radius, 4),\n                            mq = Math.pow(d.radius, 4),\n                            mT = m + mq;\n                        if(l < r) {\n                            for(; Math.abs(l) == 0;) {\n                                x = Math.round(Math.random() * r);\n                                y = Math.round(Math.random() * r);\n                                l = Math.sqrt(x * x + y * y);\n                            }\n                            //move the nodes away from each other along the radial (normal) vector\n                            //taking relative mass into consideration, the sign is already established\n                            //in calculating x and y and the nodes are modelled as spheres for calculating mass\n                            l = (r - l) / l * (1 + alpha);\n                            d.x += (x *= l) * m / mT;\n                            d.y += (y *= l) * m / mT;\n                            quad.point.x -= x * mq / mT;\n                            quad.point.y -= y * mq / mT;\n                        }\n                    }\n                    return !possible;\n                });\n            };\n        }\n    }\n    function initNodes(force, n, padding) {\n        var rMax = Math.pow(500 / n * 50, 0.5);\n        force.stop()\n            .nodes(d3.range(n).map(function() {\n                var u = Math.random(),\n                    v = -Math.log(u);\n                return {\n                    radius     : Math.pow(v, 0.8) * rMax,\n                    color      : Math.floor(u * c),\n                    x          : width / 2,\n                    y          : height / 2,\n                    get v() {\n                        var d = this;\n                        return {x: d.x - d.px || d.x || 0, y: d.y - d.py || d.y || 0}\n                    },\n                    frustration: (function() {\n                        //if they can't get home, they get angry, but, as soon as they're home, they're fine\n                        var anger = 1;\n                        return function() {\n                            var d = this, anxious = (Math.abs(d.cy - d.y) > w.rangeBand()\n                            / 2);\n                            return anger = anxious ? anger + windUp.value() : 1;\n                        }\n                    })()\n                }\n            }))\n            .start();\n        return Collide(force.nodes(), padding);\n    }\n    function update(force, n, padding) {\n        return {\n            collide: initNodes(force, n, padding),\n            circle : (function() {\n                var update = svg.selectAll(\"circle\")\n                    .data(force.nodes());\n                update.enter().append(\"circle\");\n                update.exit().remove();\n                update.attr(\"r\", function(d) {\n                    return d.radius;\n                })\n                    .call(bubble.call)\n                    .call(force.drag)\n                return update;\n            })()\n        };\n    }\n    function Bubble(svg) {\n        var colors = d3.range(20).map(d3.scale.category10()).map(function(d) {\n            return filters.sphere(svg, d, 1)\n        });\n        return {\n            call: function(selection) {\n                selection.style(\"fill\", function(d) {\n                    return colors[d.color]\n                })\n            },\n            map : function(d, i, data) {\n                d.fill = colors[~~(Math.random() * 20)];\n            },\n            fill: function(d) {\n                return d.fill\n            }\n        }\n    }\n    ;\n\n</script>\n</body>\n","filenames":["index.html","readme.md","thumbnail.png"],"thumb":"232169a9d33bcf2a85deea004dc54a19b7091470"}},{"_index":"blockbuilder","_type":"blocks","_id":"9239214","_score":0.46077913,"_source":{"userId":"bollwyvl","description":"d3 fishbone","created_at":"2014-02-26T21:40:43Z","updated_at":"2015-12-04T13:17:14Z","api":["d3.scale.log","d3.layout.force","d3.select","d3.fishbone","d3.event.stopPropagation","d3.json"],"colors":["#111111","#444444","#888888","#aaaaaa","#000000","#333333","#666666","#d2b48c","#ffffff"],"readme":"﻿**Click to drag nodes.** \n\nThis is a [Fishbone or Ishikawa][ish] diagram, which shows contributions of\ndifferent levels of a hierarchy to a main concept.\n\nIt is implemented in [d3.js][d3], nominally using the\n_[Towards Reusable Charts][trc]_ pattern. Positioning is done by\n[`d3.layout.force`][force], though a fair amount of pre-processing along the\nlines of [`d3.layout.tree`][tree] is done.\n\nThis work could be significantly enhanced to improve the customizability of\nthe code, as well as interactivity of the diagram:\n\n- collapsible nodes\n- better layout of overlapping branches, twigs\n- more customizable marks (currently just text and lines, though sub-selection\n  should work just fine)\n- interactive creation\n  - drag and drop\n  - [Markdown-based][editor]\n\nIf you have insights, or make modifications, share them on\n[the thread on the d3-js discussion group][gg] that spurred this work!\n\n[ish]: http://en.wikipedia.org/wiki/Ishikawa_diagram\n[d3]: http://d3js.org\n[trc]: http://bost.ocks.org/mike/chart\n[gg]: https://groups.google.com/forum/#!topic/d3-js/4IaKPfeZDt8\n[force]: https://github.com/mbostock/d3/wiki/Force-Layout\n[tree]: https://github.com/mbostock/d3/wiki/Tree-Layout\n[editor]: http://bl.ocks.org/bollwyvl/9265219","code":"﻿<!DOCTYPE html>\n  <head>\n    <title>d3 Fishbone diagram</title>\n    <meta charset=\"utf-8\">\n    <style>\n      @import url(\"./style.css\");\n    </style>\n  </head>\n  <body>\n    <script src=\"http://cdnjs.cloudflare.com/ajax/libs/d3/3.4.1/d3.min.js\" charset=\"utf-8\"></script>\n    <script src=\"./d3.fishbone.js\" charset=\"utf-8\"></script>\n    <script>\n      // create the configurable selection modifier\n      var fishbone = d3.fishbone();\n      \n      // load the data\n      d3.json(\"./data.json\", function(data){\n        // the most reliable way to get the screen size\n        var size = (function(){\n            return {width: this.clientWidth, height: this.clientHeight};\n          }).bind(window.document.documentElement),\n        \n        svg = d3.select(\"body\")\n          .append(\"svg\")\n          // firefox needs a real size\n          .attr(size())\n          // set the data so the reusable chart can find it\n          .datum(data)\n          // set up the default arrowhead\n          .call(fishbone.defaultArrow)\n          // call the selection modifier\n          .call(fishbone);\n          \n        // this is the actual `force`: just start it\n        fishbone.force().start();\n        \n        // handle resizing the window\n        d3.select(window).on(\"resize\", function(){\n          fishbone.force()\n            .size([size().width, size().height])\n            .start();\n          svg.attr(size())\n        });\n        \n      });\n      \n    </script>\n  </body>\n</html>","filenames":["README.md","d3.fishbone.js","data.json","index.html","style.css","thumbnail.png"],"thumb":"a185d90f94d891b0f9609530f715295a691b6914"}},{"_index":"blockbuilder","_type":"blocks","_id":"3637711","_score":0.45695496,"_source":{"userId":"GerHobbelt","description":"d3.js: force layout with 'pinning' nodes after dragging (SHIFT or CTRL key)","created_at":"2012-09-05T14:47:02Z","updated_at":"2015-10-10T04:58:06Z","api":["d3.svg.line","d3.scale.pow","d3.scale.log","d3.scale.category20","d3.geom.hull","d3.select","d3.scale.linear","d3.behavior.drag","d3.json","d3.layout.force","d3.timer","d3.quantile","d3.random.normal","d3.zip.apply","d3.min","d3.bisector","d3.xhr","d3.text","d3.formatPrefix","d3.map","d3.round","d3.event.stopPropagation","d3.event.preventDefault","d3.interpolateNumber","d3.transform","d3.rgb","d3.hsl","d3.lab","d3.hcl","d3.interpolate","d3.interpolateArray","d3.interpolateString","d3.interpolateRgb","d3.ns.qualify","d3.requote","d3.dispatch","d3.ease.apply","d3.ease","d3.tween","d3.rebind","d3.range.apply","d3.format","d3.bisect","d3.range","d3.scale.ordinal","d3.svg.diagonal","d3.transition","d3.selection.call","d3.touches","d3.mouse","d3.geom.quadtree","d3.layout.hierarchy","d3.sum","d3.permute","d3.max","d3.merge","d3.geo.albers","d3.geo.albersUsa","d3.geom.polygon","d3.geo.greatArc","d3.time.format","d3.time.dayOfYear","d3.time.sundayOfYear","d3.time.mondayOfYear","d3.time.format.utc","d3.time.year","d3.time.day"],"colors":["#cccccc","#555555","#ffffff","#333333","#00eeee","#33bbbb","#231f20","#939598","#58595b","#ff0000","#ffa500","#d2b48c","#008000","#b0c4de","#4682b4","#0000ff","#1f77b4","#aec7e8","#ff7f0e","#ffbb78","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5","#8c564b","#c49c94","#e377c2","#f7b6d2","#7f7f7f","#c7c7c7","#bcbd22","#dbdb8d","#17becf","#9edae5","#f0f8ff","#faebd7","#00ffff","#7fffd4","#f0ffff","#f5f5dc","#ffe4c4","#000000","#ffebcd","#8a2be2","#a52a2a","#deb887","#5f9ea0","#7fff00","#d2691e","#ff7f50","#6495ed","#fff8dc","#dc143c","#00008b","#008b8b","#b8860b","#a9a9a9","#006400","#bdb76b","#8b008b","#556b2f","#ff8c00","#9932cc","#8b0000","#e9967a","#8fbc8f","#483d8b","#2f4f4f","#00ced1","#9400d3","#ff1493","#00bfff","#696969","#1e90ff","#b22222","#fffaf0","#228b22","#ff00ff","#dcdcdc","#f8f8ff","#ffd700","#daa520","#808080","#adff2f","#f0fff0","#ff69b4","#cd5c5c","#4b0082","#fffff0","#f0e68c","#e6e6fa","#fff0f5","#7cfc00","#fffacd","#add8e6","#f08080","#e0ffff","#fafad2","#d3d3d3","#90ee90","#ffb6c1","#ffa07a","#20b2aa","#87cefa","#778899","#ffffe0","#00ff00","#32cd32","#faf0e6","#800000","#66cdaa","#0000cd","#ba55d3","#9370db","#3cb371","#7b68ee","#00fa9a","#48d1cc","#c71585","#191970","#f5fffa","#ffe4e1","#ffe4b5","#ffdead","#000080","#fdf5e6","#808000","#6b8e23","#ff4500","#da70d6","#eee8aa","#98fb98","#afeeee","#db7093","#ffefd5","#ffdab9","#cd853f","#ffc0cb","#dda0dd","#b0e0e6","#800080","#bc8f8f","#4169e1","#8b4513","#fa8072","#f4a460","#2e8b57","#fff5ee","#a0522d","#c0c0c0","#87ceeb","#6a5acd","#708090","#fffafa","#00ff7f","#008080","#d8bfd8","#ff6347","#40e0d0","#ee82ee","#f5deb3","#f5f5f5","#ffff00","#9acd32","#393b79","#5254a3","#6b6ecf","#9c9ede","#637939","#8ca252","#b5cf6b","#cedb9c","#8c6d31","#bd9e39","#e7ba52","#e7cb94","#843c39","#ad494a","#d6616b","#e7969c","#7b4173","#a55194","#ce6dbd","#de9ed6","#3182bd","#6baed6","#9ecae1","#c6dbef","#e6550d","#fd8d3c","#fdae6b","#fdd0a2","#31a354","#74c476","#a1d99b","#c7e9c0","#756bb1","#9e9ac8","#bcbddc","#dadaeb","#636363","#969696","#bdbdbd","#d9d9d9"],"readme":"Pinning nodes (or groups of nodes) in force layout after drag: .fixed bits …… <a href=\"http://bl.ocks.org/3637711\" title=\"view this gist via bl.ocks.org\">∆</a> <a href=\"http://bl.ocks.org/GerHobbelt\" title=\"view a list of all my gists at bl.ocks.org\">∞</a>\n==========================================================================\n\nDerived from the D3.js example [force_cluster.html](https://github.com/mbostock/d3/blob/master/examples/force/force-cluster.html) and [gist 3104394](http://bl.ocks.org/3104394).\n\nFeatures\n========\n\n- all of [gist 3104394](http://bl.ocks.org/3104394) [@ github](https://gist.github.com/3104394)\n- keep SHIFT or CTRL pressed when ending a drag move to 'pin' the node/group there: SHIFT will 'pin' all group nodes; you may drag individual nodes of the group around while they will remain pinned hat way.\n- showcases a tweaked 'miserables.json' file which includes 'circular links' i.e. links which connect node A to node A (~ self-reference)\n\nKnown Bugs\n----------\n\n- doesn't work with vanilla d3.layout.force as it would clear out the .fixed member; this code uses an augmented d3.js file. [pull request #798](https://github.com/mbostock/d3/pull/798)\n- .fixed PIN state doesn't correctly propagate/clear when you click nodes to expand/contract them from/to group nodes.\n\nUsage\n-----\n\n* Slide the 'debug level' slider to see the various debug levels visually; the hospital curves are (top): force.alpha and (bottom) total x/y change squared: a measurement for the amount of movement of nodes in the graph. Note that the bottom curve is inverted, so that when both meet, you're getting close to done. :-)\n* Click on node to expand or collapse. When a node has 'bundled' outgoing links, the first click will expand only those (a.k.a. 2nd display mode / expand state = 1), the next click will then expand the group node itself.\n* Click on hull (which shows up when you expanded a group node) to collapse the group.\n* Drag node to move entire graph around.\n\nNotes\n-----\n\nThe ability to draw circular references is following the overall force design used here, \nwhere helper nodes (and ditto links) are used to produce the bezier-based links; \na self-reference is nothing but yet another nodeA -> helper -> nodeB link chain where\n'nodeB' just happens to be nodeA again.\n\nThis code uses two(2) d3.layout.force() forces: one to layout the original nodes (or their group node equivalent),\nthe second is used to layout all the helper nodes (which are only visible in debug modes 1 and 2): the latter are \nused to construct the bezier paths representing the links.\n","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <title>Clustered Network</title>\n    <script src=\"readme.js\"></script> <!-- hide d3.v2.js from bl.ocks.org output by naming it readme.ls -->\n    <link href='http://fonts.googleapis.com/css?family=Gudea:700,400italic,400' rel='stylesheet' type='text/css'>\n    <style type=\"text/css\">\nsvg {\n  border: 1px solid #ccc;\n}\nbody {\n  font: 10px 'Gudea', sans-serif;\n}\ntext {\n  font-family: 'Gudea', sans-serif;\n  font-size: 9pt;\n}\ncircle.node {\n  fill: lightsteelblue;\n  stroke: #555;\n  stroke-width: 3px;\n}\ncircle.leaf {\n  stroke: #fff;\n  stroke-width: 1.5px;\n}\ncircle.link-expanded {\n  stroke: #555;\n  stroke-width: 3px;\n  stroke-dasharray: 2px 4px;\n}\ncircle.helper {\n  stroke-width: 0;\n  fill: #333;\n  opacity: 0.6;\n}\ncircle.center-of-mass {\n  fill: white;\n  stroke: red;\n  stroke-width: 5px;\n}\npath.hull {\n  fill: lightsteelblue;\n  fill-opacity: 0.3;\n}\npath.hlink {\n  stroke: #333;\n  stroke-opacity: 0.5;\n  fill: none;\n  pointer-events: none;\n}\npath.trace-alpha {\n  stroke: #0ee;\n  stroke-opacity: 0.8;\n  stroke-width: 1.5px;\n  fill: none;\n  pointer-events: none;\n}\npath.trace-c2 {\n  stroke: #3bb;\n  stroke-opacity: 0.8;\n  stroke-width: 1.5px;\n  fill: none;\n  pointer-events: none;\n}\nline.link {\n  stroke: red;\n  stroke-opacity: 0.7;\n  pointer-events: none;\n}\n    </style>\n  </head>\n  <body>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"controls\" visibility=\"hidden\">\n  <g visibility=\"visible\">\n    <rect x=\"0\" y=\"0.55\" opacity=\"0.6\" fill=\"#FFFFFF\" stroke=\"#231F20\" stroke-miterlimit=\"10\" width=\"192\" height=\"22\"/>\n    <text transform=\"matrix(1 0 0 1 4.5066 15.343)\"  >Debug level:</text>\n    <g id=\"slider-debug-level\">\n      <line id=\"slider-x-debug-level\" fill=\"none\" stroke=\"#939598\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"73.5\" y1=\"11.05\" x2=\"160.5\" y2=\"11.05\"/>\n      <rect id=\"sliderpos-debug-level\" x=\"77\" y=\"3.55\" fill=\"#58595B\" stroke=\"#231F20\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" width=\"4\" height=\"15\"/>\n            <text id=\"sliderval-debug-level\" transform=\"matrix(1 0 0 1 164.6638 15.343)\"  >?????</text>\n    </g>\n  </g>\n</svg>\n\n<script type=\"text/javascript\" src=\"http://gerhobbelt.github.com/bl.ocks.org-hack/fixit.js\" ></script>\n\n    <script type=\"text/javascript\">\nvar width = 960,        // svg width\n    height = 500,       // svg height\n    dr = 4,             // default point radius\n    off = 15,           // cluster hull offset\n    cycle_curvep = 0.5, // cyclic ~ self-referential links: determines the 'radius' of the bezier path constructed for the link\n    expand = {},        // expanded clusters\n    data, net, force1, force2, hullg, hull, linkg, helper_linkg, link, hlink, nodeg, helper_nodeg, node, hnode,\n    debug = 3,          // 0: disable, 1: all, 2: only force2 + curves, 3: curves only\n    alpha_trace = [], alpha_line, alpha_scale, debug_g,\n    c2_trace = [], c2_line, c2_scale, debug_g;\n\n    //for (var gn = 0; gn < 20; gn++) expand[gn] = 2;\n\nalpha_line = d3.svg.line()\n  .x(function(d, i) {\n    return i + 10;\n  })\n  .y(function(d, i) {\n    return d;\n  });\n\nalpha_scale = d3.scale.pow().exponent(-1.0).domain([5,.005]).range([10, height - 10]).clamp(true);\n\nc2_scale = d3.scale.log().domain([0.01, width * height]).range([10, height - 10]).clamp(true);\n\nc2_line = d3.svg.line()\n  .x(function(d, i) {\n    return i + 10;\n  })\n  .y(function(d, i) {\n    return d;\n  });\n\nvar curve = d3.svg.line()\n  .interpolate(\"cardinal-closed\")\n  .tension(.85);\n\nvar fill = d3.scale.category20();\n\nfunction noop() { return false; }\n\nfunction nodeid(n) {\n  return n.size > 0 ? \"_g_\" + n.group + \"_\" + n.expansion : n.name;\n}\n\nfunction linkid(l) {\n  var u = nodeid(l.source),\n      v = nodeid(l.target);\n  return u<v ? u+\"|\"+v : v+\"|\"+u;\n}\n\nfunction getGroup(n) { return n.group; }\n\nfunction cycleState(d) {\n  var g = d.group, s = expand[g] || 0;\n  // it's no use 'expanding the intergroup links only' for nodes which only have 1 outside link for real:\n  if (d.ig_link_count < 2)\n    s = (s ? 0 : 2);\n  else {\n    s++; s %= 3;\n  }\n  return expand[g] = s;\n}\n\n// constructs the network to visualize\nfunction network(data, prev) {\n  expand = expand || {};\n  var gm = {},    // group map\n      nm = {},    // node map\n      nml = {},   // node map for left-side 'link path helper nodes'\n      nmr = {},   // node map for right-side 'link path helper nodes'\n      nmc = {},   // node map for cyclic ~ self-referencing 'link path helper nodes'\n      nmimg = {}, // node map for cloned nodes for force2\n      lm = {},    // link maps - lm ~ lml-lmm-lmr\n      lml = {},\n      lmm = {},\n      lmr = {},\n      lmc = {},\n      gn = {},                  // previous group nodes\n      gc = {},                  // previous group centroids\n      nodes = [],               // output nodes\n      links = [],               // output links\n      helper_nodes = [],        // helper force graph nodes\n      helper_links = [];        // helper force graph links\n      helper_render_links = []; // helper force graph links\n  var k;\n\n  // process previous nodes for reuse or centroid calculation\n  if (prev) {\n    prev.nodes.forEach(function(n) {\n      var i = getGroup(n), o;\n      if (n.size > 0) {\n        gn[i] = n;\n        n.size = 0;\n        n.ig_link_count = 0;\n        n.link_count = 0;\n        n.first_link = null;\n        n.first_link_target = null;\n      } else {\n        o = gc[i] || (gc[i] = {x:0,y:0,count:0});\n        o.x += n.x;\n        o.y += n.y;\n        o.count += 1; // we count regular nodes here, so .count is a measure for the number of nodes in the group\n      }\n    });\n  }\n\n  // determine nodes\n  for (k=0; k < data.nodes.length; ++k) {\n    var n = data.nodes[k],\n        i = getGroup(n),\n        expansion = expand[i] || 0,\n        l = gm[i] || (gm[i]=gn[i]) || (gm[i]={group:i, size:0, nodes:[], ig_link_count:0, link_count:0, expansion: expansion, fixed: n.fixed || 0}),\n        img;\n\n    // we need to create a NEW object when expansion changes from 0->1 for a group node\n    // in order to break the references from the d3 selections, so that the next time\n    // this group node will indeed land in the 'enter()' set\n    if (l.expansion != expansion) {\n      l = gn[i] = gm[i] = {group:l.group, x:l.x, y: l.y, size:l.size, nodes:l.nodes, ig_link_count:l.ig_link_count, link_count:l.link_count, expansion: expansion, fixed: l.fixed};\n    }\n\n    if (expansion == 2) {\n      // the node should be directly visible\n      nm[nodeid(n)] = n;\n      if (!n.fixed) n.fixed = 0; // make sure .fixed member is set/numeric\n      img = {ref: n, x: n.x, y: n.y, size: n.size || 0, fixed: n.fixed | 1, id: nodeid(n)};\n      nmimg[nodeid(n)] = img;\n      nodes.push(n);\n      helper_nodes.push(img);\n      if (gn[i]) {\n        // place new nodes at cluster location (plus jitter)\n        n.x = gn[i].x + Math.random();\n        n.y = gn[i].y + Math.random();\n      }\n    } else {\n      // the node is part of a collapsed cluster\n      if (l.size == 0) {\n        // if new cluster, add to set and position at centroid of leaf nodes\n        nm[nodeid(n)] = l;\n        l.size = 1;                     // hack to make nodeid() work correctly for the new group node\n        nm[nodeid(l)] = l;\n        img = {ref: l, x: l.x, y: l.y, size: l.size || 0, fixed: l.fixed | 1, id: nodeid(l)};\n        nmimg[nodeid(l)] = img;\n        l.size = 0;                     // undo hack\n        nmimg[nodeid(n)] = img;\n        nodes.push(l);\n        helper_nodes.push(img);\n        if (gc[i]) {\n          l.x = gc[i].x / gc[i].count;\n          l.y = gc[i].y / gc[i].count;\n        }\n      } else {\n        // have element node point to group node:\n        nm[nodeid(n)] = l; // l = shortcut for: nm[nodeid(l)];\n        nmimg[nodeid(n)] = nmimg[nodeid(l)];\n      }\n      l.nodes.push(n);\n    }\n    // always count group size as we also use it to tweak the force graph strengths/distances\n    l.size += 1;\n    n.group_data = l;\n    n.link_count = 0;\n    n.first_link = null;\n    n.first_link_target = null;\n  }\n\n  // determine links\n  for (k=0; k<data.links.length; ++k) {\n    var e = data.links[k],\n        u = getGroup(e.source),\n        v = getGroup(e.target),\n        rui, rvi, ui, vi, lu, rv, ustate, vstate, uimg, vimg,\n        i, ix,\n        l, ll, l_, lr;\n    if (u != v) {\n      gm[u].ig_link_count++;\n      gm[v].ig_link_count++;\n    }\n    ustate = expand[u] || 0;\n    vstate = expand[v] || 0;\n    // while d3.layout.force does convert link.source and link.target NUMERIC values to direct node references,\n    // it doesn't for other attributes, such as .real_source, so we do not use indexes in nm[] but direct node\n    // references to skip the d3.layout.force implicit links conversion later on and ensure that both .source/.target\n    // and .real_source/.real_target are of the same type and pointing at valid nodes.\n    rui = nodeid(e.source);\n    rvi = nodeid(e.target);\n    u = nm[rui];\n    v = nm[rvi];\n    if (u == v) {\n      // skip non-original links from node to same (A-A); they are rendered as 0-length lines anyhow. Less links in array = faster animation.\n      if (ustate < 2)\n        continue;\n\n      // self-referential 'links' are produced as 2 links+1 helper node; this is a generalized approach so we\n      // can support multiple self-referential links as thanks to the force layout\n      // those helpers will all be in different places, hence the link 'path' for each\n      // parallel link will be different.\n      ui = nodeid(u);\n      i = ui+\"|\"+ui+\"|\"+k;\n      l = lm[i] || (lm[i] = {source:u, target:u, size:0, distance: 0});\n      l.cyclic = true;\n      ix = i;\n      // link(u,v) ==> u -> lu -> u\n      lu = nmc[ix] || (nmc[ix] = data.helpers.cyclic[ix] || (data.helpers.cyclic[ix] = {ref: u, id: \"_ch_\" + ix, size: -1, link_ref: l, cyclic_helper: true}));\n      uimg = nmimg[ui];\n      l_ = lmc[ix] || (lmc[ix] = {g_ref: l, ref: e, id: \"c\"+ix, source:uimg, target: lu, real_source:u, size: 0, distance: 0, cyclic: true});\n      l.size += 1;\n      l_.size += 1;\n      continue;\n    }\n    // 'links' are produced as 3 links+2 helper nodes; this is a generalized approach so we\n    // can support multiple links between element nodes and/or groups, always, as each\n    // 'original link' gets its own set of 2 helper nodes and thanks to the force layout\n    // those helpers will all be in different places, hence the link 'path' for each\n    // parallel link will be different.\n    ui = nodeid(u);\n    vi = nodeid(v);\n    i = (ui < vi ? ui+\"|\"+vi : vi+\"|\"+ui);\n    l = lm[i] || (lm[i] = {source:u, target:v, size:0, distance: 0});\n    if (ustate == 1) {\n      ui = rui;\n    }\n    if (vstate == 1) {\n      vi = rvi;\n    }\n    ix = (ui < vi ? ui+\"|\"+vi+\"|\"+ustate+\"|\"+vstate : vi+\"|\"+ui+\"|\"+vstate+\"|\"+ustate);\n    ix = (ui < vi ? ui+\"|\"+vi : vi+\"|\"+ui);\n    // link(u,v) ==> u -> lu -> rv -> v\n    lu = nml[ix] || (nml[ix] = data.helpers.left[ix]  || (data.helpers.left[ix]  = {ref: u, id: \"_lh_\" + ix, size: -1, link_ref: l}));\n    rv = nmr[ix] || (nmr[ix] = data.helpers.right[ix] || (data.helpers.right[ix] = {ref: v, id: \"_rh_\" + ix, size: -1, link_ref: l}));\n    uimg = nmimg[ui];\n    vimg = nmimg[vi];\n    ll = lml[ix] || (lml[ix] = {g_ref: l, ref: e, id: \"l\"+ix, source:uimg, target:  lu, real_source:u, real_target:v, size:0, distance: 0, left_seg  : true});\n    l_ = lmm[ix] || (lmm[ix] = {g_ref: l, ref: e, id: \"m\"+ix, source:  lu, target:  rv, real_source:u, real_target:v, size:0, distance: 0, middle_seg: true});\n    lr = lmr[ix] || (lmr[ix] = {g_ref: l, ref: e, id: \"r\"+ix, source:  rv, target:vimg, real_source:u, real_target:v, size:0, distance: 0, right_seg : true});\n    l.size += 1;\n    ll.size += 1;\n    l_.size += 1;\n    lr.size += 1;\n\n    // these are only useful for single-linked nodes, but we don't care; here we have everything we need at minimum cost.\n    if (l.size == 1) {\n      u.link_count++;\n      v.link_count++;\n      u.first_link = l;\n      v.first_link = l;\n      u.first_link_target = v;\n      v.first_link_target = u;\n    }\n  }\n\n  for (k in lm) { links.push(lm[k]); }\n  for (k in lml) { helper_links.push(lml[k]); }\n  for (k in lmm) { helper_links.push(lmm[k]); helper_render_links.push(lmm[k]); }\n  for (k in lmr) { helper_links.push(lmr[k]); }\n  for (k in lmc) { helper_links.push(lmc[k]); helper_render_links.push(lmc[k]); }\n  for (k in nml) { helper_nodes.push(nml[k]); }\n  for (k in nmr) { helper_nodes.push(nmr[k]); }\n  for (k in nmc) { helper_nodes.push(nmc[k]); }\n  //for (k in nmc) { nodes.push(nmc[k]); }\n\n  return {nodes: nodes, links: links, helper_nodes: helper_nodes, helper_links: helper_links, helper_render_links: helper_render_links};\n}\n\nfunction convexHulls(nodes, offset) {\n  var hulls = {};\n\n  // create point sets\n  for (var k=0; k<nodes.length; ++k) {\n    var n = nodes[k];\n    if (n.size) continue;\n    var i = getGroup(n),\n        l = hulls[i] || (hulls[i] = []);\n    l.push([n.x - offset, n.y - offset]);\n    l.push([n.x - offset, n.y + offset]);\n    l.push([n.x + offset, n.y - offset]);\n    l.push([n.x + offset, n.y + offset]);\n  }\n\n  // create convex hulls\n  var hullset = [];\n  for (i in hulls) {\n    hullset.push({group: i, path: d3.geom.hull(hulls[i])});\n  }\n\n  return hullset;\n}\n\nfunction drawCluster(d) {\n  return curve(d.path); // 0.8\n}\n\n// these functions call init(); by declaring them here,\n// they don't have the old init() as a closure any more.\n// This should save us some memory and cycles when using\n// this in a long-running setting.\n\nfunction on_hull_click(d) {\n  if (debug == 1) console.log(\"node click\", d, arguments, this, expand[d.group]);\n  // clicking on 'path helper nodes' shouln't expand/collapse the group node:\n  if (d.size < 0)\n    return;\n  cycleState(d);\n  init();\n}\n\nfunction on_node_click(d) {\n  if (debug == 1) console.log(\"node click\", d, arguments, this, expand[d.group]);\n  // clicking on 'path helper nodes' shouln't expand/collapse the group node:\n  if (d.size < 0)\n    return;\n  cycleState(d);\n  init();\n}\n\n// --------------------------------------------------------\n\nvar vis = d3.select(\"svg\")\n  .attr(\"width\", width)\n  .attr(\"height\", height);\n\nvar debug_ui = vis.select(\"#slider-debug-level\");\ndebug_ui.select(\"#sliderval-debug-level\").text(debug);\nvar dbg = debug_ui.select(\"#slider-x-debug-level\");\nx1 = +dbg.attr(\"x1\");\nx2 = +dbg.attr(\"x2\");\nvar debug_ui_scale = d3.scale.linear().domain([0,3]).range([+dbg.attr(\"x1\")+3.5, +dbg.attr(\"x2\")-3.5-4]).clamp(true);\n\n// as per http://bl.ocks.org/1557377; correction for latest d3 lib: origin(Object) doesn't cut it.\nvar slider_drag = d3.behavior.drag()\n/*\n        .origin(function(d, i) {\n            // must return {x: value, y: value} object\n            var owner = this.ownerSVGElement;\n            var rect = owner.getBoundingClientRect();\n            // (window.scrollX || window.scrollY) ?\n            //return {x: rect.left - this.clientLeft, y: rect.top - this.clientTop};\n            return {x: rect.left, y: rect.top};\n        })\n*/\n  .on(\"drag\", slider_dragmove);\n\ndebug_ui.select(\"#sliderpos-debug-level\")\n  .attr(\"x\", debug_ui_scale(debug))\n  .call(slider_drag);\n\nfunction slider_dragmove(d) {\n  if (!isFinite(d3.event.x))\n    return;\n  var dv = debug_ui_scale.invert(d3.event.x);\n  dv = Math.round(dv);\n  d3.select(this)\n    .attr(\"x\", debug_ui_scale(dv));\n  debug_ui.select(\"#sliderval-debug-level\").text(dv);\n  if (dv != debug) {\n    debug = dv;\n\n    helper_nodeg\n      .selectAll(\"*\")\n        .remove();\n    linkg\n      .selectAll(\"*\")\n        .remove();\n    vis.select(\"#center-of-mass\")\n      .attr(\"display\", (debug == 1) ? null : \"none\");\n    debug_g\n      .attr(\"display\", debug ? null : \"none\");\n\n    init();\n  }\n}\n\ndebug_g = vis.append(\"g\");\ndebug_g\n  .append(\"path\")\n  .attr(\"class\", \"trace-alpha\");\ndebug_g\n  .append(\"path\")\n  .attr(\"class\", \"trace-c2\");\n\nvar pathgen = d3.svg.line().interpolate(\"basis\");\nvar cycle_pathgen = d3.svg.line().interpolate(\"basis\");\n\nd3.json(\"miserables-with-cycles.json\", function(json) {\n  /*\n  JSON layout:\n\n  {\n    \"nodes\": [\n      {\n        \"name\"  : \"bla\",    // in this code, this is expected to be a globally unique string (as it's used for the id via nodeid())\n        \"group\" : 1         // group ID (number)\n      },\n      ...\n    ],\n    \"links\": [\n      {\n        \"source\" : 1,       // nodes[] index (number; is immediately converted to direct nodes[index] reference)\n        \"target\" : 0,       // nodes[] index (number; is immediately converted to direct nodes[index] reference)\n        \"value\"  : 1        // [not used in this force layout]\n      },\n      ...\n    ]\n  }\n  */\n  data = json;\n  for (var i=0; i<data.links.length; ++i) {\n    o = data.links[i];\n    o.source = data.nodes[o.source];\n    o.target = data.nodes[o.target];\n  }\n  // prepare data struct to also carry our 'path helper nodes':\n  data.helpers = {left: {}, right: {}, cyclic: {}};\n\n  hullg = vis.append(\"g\");\n  //if (debug && debug < 3) {\n    linkg = vis.append(\"g\");\n    helper_nodeg = vis.append(\"g\");\n  //}\n  helper_linkg = vis.append(\"g\");\n  nodeg = vis.append(\"g\");\n  //if (debug == 1) {\n    node = vis.append(\"g\")\n        .attr(\"id\", \"center-of-mass\")\n      .append(\"circle\")\n        .attr(\"class\", \"center-of-mass\")\n        .attr(\"visibility\", (debug == 1) ? \"visible\" : \"hidden\")\n        .attr(\"r\", 10);\n  //}\n\n  init();\n\n  vis.attr(\"opacity\", 1e-6)\n    .transition()\n    .duration(1000)\n    .attr(\"opacity\", 1);\n});\n\nfunction init() {\n  if (force1) force1.stop();\n\n  net = network(data, net);\n\n  force1 = d3.layout.force()\n      .nodes(net.nodes)\n      .links(net.links)\n      .size([width, height])\n      .linkDistance(function(l, i) {\n        //return 300;\n        var n1 = l.source, n2 = l.target,\n            g1 = n1.group_data || n1, g2 = n2.group_data || n2,\n            n1_is_group = n1.size || 0, n2_is_group = n2.size || 0,\n            rv = 300;\n        // larger distance for bigger groups:\n        // both between single nodes and _other_ groups (where size of own node group still counts),\n        // and between two group nodes.\n        //\n        // reduce distance for groups with very few outer links,\n        // again both in expanded and grouped form, i.e. between individual nodes of a group and\n        // nodes of another group or other group node or between two group nodes.\n        //\n        // The latter was done to keep the single-link groups close.\n        if (n1.group == n2.group) {\n          if ((n1.link_count < 2 && !n1_is_group) || (n2.link_count < 2 && !n2_is_group)) {\n            // 'real node' singles: these don't need a big distance to make the distance, if you whumsayin' ;-)\n            rv = 2;\n          } else if (!n1_is_group && !n2_is_group) {\n            rv = 2;\n          } else if (g1.link_count < 4 || g2.link_count < 4) {\n            rv = 100;\n          }\n        } else {\n          if (!n1_is_group && !n2_is_group) {\n            rv = 50;\n          } else if ((n1_is_group && n2_is_group) && (g1.link_count < 4 || g2.link_count < 4)) {\n            // 'real node' singles: these don't need a big distance to make the ditance, if you whumsayin' ;-)\n            rv = 100;\n          } else if ((n1_is_group && g1.link_count < 2) || (n2_is_group && g2.link_count < 2)) {\n            // 'real node' singles: these don't need a big distance to make the ditance, if you whumsayin' ;-)\n            rv = 30;\n          } else if (!n1_is_group || !n2_is_group) {\n            rv = 100;\n          }\n        }\n        return l.distance = rv;\n      })\n      .gravity(1.0)             // gravity+charge tweaked to ensure good 'grouped' view (e.g. green group not smack between blue&orange, ...\n      .charge(function(d, i) {  // ... charge is important to turn single-linked groups to the outside\n        if (d.size > 0) {\n          return -5000;  // group node\n        } else {\n          // 'regular node'\n          return -1000;\n        }\n      })\n      .friction(0.7)   // friction adjusted to get dampened display: less bouncy bouncy ball [Swedish Chef, anyone?]\n      .on(\"end\", function() {\n        // done\n      })\n      .on(\"start\", function() {\n        // zip nada\n      })\n      .start();\n\n  /*\n  And here's the crazy idea for allowing AND rendering multiple links between 2 nodes, etc., as the initial attempt\n  to include the 'helper' nodes in the basic 'force' failed dramatically from a visual PoV: we 'overlay' the basic\n  nodes+links force with a SECOND force layout which 'augments' the original force layout by having it 'layout' all\n  the helper nodes (with their links) between the 'fixed' REAL nodes, which are laid out by the original force.\n\n  This way, we also have the freedom to apply a completely different force field setup to the helpers (no gravity\n  as it doesn't make sense for helpers, different charge values, etc.).\n  */\n  force2 = d3.layout.force()\n      .nodes(net.helper_nodes)\n      .links(net.helper_links)\n      .size([width, height])\n      .linkDistance(function(l, i) {\n        var n1 = l.real_source, n2 = l.real_target, rv,\n            lr = l.g_ref,\n            n1r, n2r,\n            dx, dy;\n        if (l.cyclic)\n          return 15;\n        if (lr.source.size > 0 || lr.target.size > 0)\n          return 20;\n        return 1;\n      })\n      .gravity(0.0)   // just a tad of gravidy to help keep those curvy buttocks decent\n      .charge(function(d, i) {\n        // helper nodes have a medium-to-high charge, depending on the number of links the related force link represents.\n        // Hence bundles of links fro A->B will have helper nodes with huge charges: better spreading of the link paths.\n        //\n        // Unless we're looking at helpers for links between 'real nodes', NOT GROUPS: in that case we want to keep\n        // the lines are straight as posssible as there would only be one relation for A->B anyway, so we lower the charge\n        // for such nodes and helpers.\n        if (d.fixed)\n          return -10;\n        var l = d.link_ref,\n            c = l.link_count || 1;\n        if (l.source.size > 0 || l.target.size > 0)\n          return -30;\n        return -1;\n      })\n      .friction(0.95)\n      .start()\n      .stop();          // and immediately stop! force.tick will drive this one every tick!\n\n  hullg.selectAll(\"path.hull\").remove();\n  hull = hullg.selectAll(\"path.hull\")\n      .data(convexHulls(net.nodes, off))\n      .enter().append(\"path\")\n        .attr(\"class\", \"hull\")\n        .attr(\"d\", drawCluster)\n        .style(\"fill\", function(d) { return fill(d.group); })\n        .on(\"click\", on_hull_click);\n\n  if (debug == 1) {\n    link = linkg.selectAll(\"line.link\").data(net.links, linkid);\n    link.exit().remove();\n    link.enter().append(\"line\")\n        .attr(\"class\", \"link\")\n        .attr(\"x1\", function(d) { return d.source.x; })\n        .attr(\"y1\", function(d) { return d.source.y; })\n        .attr(\"x2\", function(d) { return d.target.x; })\n        .attr(\"y2\", function(d) { return d.target.y; });\n    // both existing and enter()ed links may have changed stroke width due to expand state change somewhere:\n    link.style(\"stroke-width\", function(d) { return d.size || 1; });\n  }\n\n  hlink = helper_linkg.selectAll(\"path.hlink\").data(net.helper_render_links, function(d) {\n    return d.id;\n  });\n  hlink.exit().remove();\n  hlink.enter().append(\"path\")\n      .attr(\"class\", \"hlink\");\n  // both existing and enter()ed links may have changed stroke width due to expand state change somewhere:\n  hlink.style(\"stroke-width\", function(d) { return d.size || 1; });\n\n\n  if (debug && debug < 3) {\n    hnode = helper_nodeg.selectAll(\"circle.node\").data(net.helper_nodes, function(d) {\n      return d.id;\n    });\n    hnode.exit().remove();\n    hnode.enter().append(\"circle\")\n        // if (d.size) -- d.size > 0 when d is a group node.\n        // d.size < 0 when d is a 'path helper node'.\n        .attr(\"class\", function(d) {\n          return \"node\" + (d.size > 0 ? \"\" : d.size < 0 ? \" helper\" : \" leaf\");\n        })\n        .attr(\"r\", function(d) {\n          return d.size > 0 ? d.size + dr : d.size < 0 ? 2 : dr + 1;\n        })\n        .attr(\"cx\", function(d) { return d.x; })\n        .attr(\"cy\", function(d) { return d.y; })\n        .style(\"fill\", function(d) { return fill(d.group); });\n  }\n\n  node = nodeg.selectAll(\"circle.node\").data(net.nodes, nodeid);\n  node.exit().remove();\n  node.enter().append(\"circle\")\n      // if (d.size) -- d.size > 0 when d is a group node.\n      // d.size < 0 when d is a 'path helper node'.\n      .attr(\"class\", function(d) {\n        return \"node\" + (d.size > 0 ? d.expansion ? \" link-expanded\" : \"\" : \" leaf\");\n      })\n      .attr(\"r\", function(d) {\n        return d.size > 0 ? d.size + dr : dr + 1;\n      })\n      .attr(\"cx\", function(d) { return d.x; })\n      .attr(\"cy\", function(d) { return d.y; })\n      .style(\"fill\", function(d) { return fill(d.group); })\n      .on(\"click\", on_node_click);\n\n  node.call(force1.drag);\n\n  var force1_drag = force1.drag(); // WORKS IN EXTENDED D#.js ONLY!\n\n  var drag_in_progress = false;\n  var change_squared = width * height;\n\n  function on_drag_start(d) {\n    if (debug == 1) console.log(\"node drag START\", d, arguments, this, expand[d.group]);\n\n    drag_in_progress = true;\n  }\n\n  function on_drag_end(d) {\n    if (debug == 1) console.log(\"node drag END\", d, arguments, this, expand[d.group]);\n\n    drag_in_progress = false;\n\n    // When CTRL key is pressed, we PIN the dragged node to the current location.\n    // When SHIFT key is pressed, we PIN the entire expanded group to the current location. (only when node is a non-group one, i.e. in expanded group mode.\n    // When neither have been pressed, we RELEASE the PIN on the node.\n    // (To release the PIN on a group, click to cycle the group expand state: switching back to group node (state=0/1) releases the group PIN.)\n    var e = d3.event.sourceEvent;\n    if (e.ctrlKey || e.shiftKey) {\n      d.fixed |= 0x08;\n    } else {\n      d.fixed &= ~0x08;\n    }\n    var g = getGroup(d);\n    var s = expand[g] || 0;\n    if (e.shiftKey && s == 2) {\n      net.nodes.forEach(function(d, i) {\n        if (getGroup(d) == g) {\n          d.fixed |= 0x10;\n        }\n      });\n    }\n  }\n\n  force1_drag\n    .on(\"dragstart\", on_drag_start)\n    .on(\"drag\", function(d) {\n      //\n    })\n    .on(\"dragend\", on_drag_end);\n\n  // CPU load redux for the fix, part 3: jumpstart the annealing process again when the user moves the mouse outside the node,\n  // when we believe the drag is still going on; even when it isn't anymore, but D3 doesn't inform us about that!\n  node\n    .on(\"mouseout.ger_fix\", function(d) {\n      if (debug == 1) console.log(\"mouseout.ger_fix\", this, arguments, d.fixed, drag_in_progress);\n      if (drag_in_progress) {\n        force1.resume();\n      }\n    });\n\n  var resume_threshold = 0.05;\n\n  force1.on(\"tick\", function(e) {\n    if (debug) {\n      alpha_trace.push(alpha_scale(e.alpha));\n      if (alpha_trace.length > width - 20)\n        alpha_trace.shift();\n      debug_g.select(\"path.trace-alpha\")\n          .attr(\"d\", alpha_line(alpha_trace));\n\n      c2_trace.push(c2_scale(change_squared));\n      if (c2_trace.length > width - 20)\n        c2_trace.shift();\n      debug_g.select(\"path.trace-c2\")\n          .attr(\"d\", c2_line(c2_trace));\n    }\n\n    /*\n    Force all nodes with only one link to point outwards.\n\n    To do this, we first calculate the center mass (okay, we wing it, we fake node 'weight'),\n    then see whether the target node for links from single-link nodes is closer to the\n    center-of-mass than us, and if it isn't, we push the node outwards.\n    */\n    var center = {x: 0, y: 0, weight: 0}, singles = [], centroids = {},\n        size, c, k, mx, my, dx, dy, alpha;\n\n    net.nodes.forEach(function(n) {\n      var w = Math.max(1, n.size || 0, n.weight || 0),\n          i = getGroup(n),\n          gc = centroids[i] || (centroids[i] = { x:0, y:0, weight: 0});\n\n      center.x += w * n.x;\n      center.y += w * n.y;\n      center.weight += w;\n\n      gc.x += w * n.x;\n      gc.y += w * n.y;\n      gc.weight += w;\n\n      if (n.size > 0 ? n.link_count < 4 : n.group_data.link_count < 3)\n        singles.push(n);\n    });\n\n    size = force1.size();\n\n    mx = size[0] / 2;\n    my = size[1] / 2;\n\n    for (k in centroids) {\n      var gc = centroids[k];\n      gc.x /= gc.weight;\n      gc.y /= gc.weight;\n    }\n\n    singles.forEach(function(n) {\n      var l = n.first_link, n2 = n.first_link_target,\n          proj, ax, bx, ay, by, k, x, y, alpha, rej, power,\n          dx, dy,\n          n_is_group = n.size || 0,\n          ng = n.group_data || n,\n          c2,\n          w = Math.max(1, n.size || 0, n.weight || 0),\n          i = getGroup(n),\n          gc = centroids[i];\n\n      // haven't decided what to do for unconnected nodes, yet...\n      if (!l)\n        return;\n\n      // apply amplification of the 'original' alpha:\n      // 1.0 for singles and double-connected nodes, close to 0 for highly connected nodes, rapidly decreasing.\n      // Use this as we want to give those 'non-singles' a little bit of the same 'push out' treatment.\n      // Reduce effect for 'real nodes' which are singles: they need much less encouragement!\n      power = Math.max(2, n_is_group ? n.link_count : n.group_data.link_count);\n      power = 2 / power;\n\n      alpha = e.alpha * power;\n\n      // undo/revert gravity forces (or as near as we can get, here)\n      //\n      // revert for truely single nodes, revert just a wee little bit for dual linked nodes,\n      // only reduce ever so slighty for nodes with few links (~ 3) that made it into this\n      // 'singles' selection\n      if (k = alpha * force1.gravity() * (0.8 + power)) {\n        dx = (mx - n.x) * k;\n        dy = (my - n.y) * k;\n        n.x -= dx;\n        n.y -= dy;\n\n        center.x -= dx * w;\n        center.y -= dy * w;\n        gc.x -= dx * w;\n        gc.y -= dy * w;\n      }\n    });\n\n    // move the entire graph so that its center of mass sits at the center, period.\n    center.x /= center.weight;\n    center.y /= center.weight;\n\n    if (debug == 1) {\n      c = vis.selectAll(\"circle.center-of-mass\")\n          .attr(\"cx\", center.x)\n          .attr(\"cy\", center.y);\n    }\n\n    dx = mx - center.x;\n    dy = my - center.y;\n\n    alpha = e.alpha * 5;\n    dx *= alpha;\n    dy *= alpha;\n\n    net.nodes.forEach(function(n) {\n      n.x += dx;\n      n.y += dy;\n    });\n\n\n    change_squared = 0;\n\n    // fixup .px/.py so drag behaviour and annealing get the correct values, as\n    // force.tick() would expect .px and .py to be the .x and .y of yesterday.\n    net.nodes.forEach(function(n) {\n      // restrain all nodes to window area\n      var k, dx, dy,\n          r = (n.size > 0 ? n.size + dr : dr + 1) + 2 /* styled border outer thickness and a bit */;\n\n      dx = 0;\n      if (n.x < r)\n        dx = r - n.x;\n      else if (n.x > size[0] - r)\n        dx = size[0] - r - n.x;\n\n      dy = 0;\n      if (n.y < r)\n        dy = r - n.y;\n      else if (n.y > size[1] - r)\n        dy = size[1] - r - n.y;\n\n      k = 1.2;\n\n      n.x += dx * k;\n      n.y += dy * k;\n      // restraining completed.......................\n\n      // fixes 'elusive' node behaviour when hovering with the mouse (related to force.drag)\n      if (n.fixed) {\n        // 'elusive behaviour' ~ move mouse near node and node would take off, i.e. act as an elusive creature.\n        n.x = n.px;\n        n.y = n.py;\n      }\n      n.px = n.x;\n      n.py = n.y;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n\n    // also restrain helper nodes to within the visible area --> link paths are almost always ket in-view:\n    net.helper_nodes.forEach(function(n) {\n      // restrain all nodes to window area\n      var k, dx, dy,\n          r = (n.size > 0 ? n.size : 1) + 5 /* heuristic */;\n\n      dx = 0;\n      if (n.x < r)\n        dx = r - n.x;\n      else if (n.x > size[0] - r)\n        dx = size[0] - r - n.x;\n\n      dy = 0;\n      if (n.y < r)\n        dy = r - n.y;\n      else if (n.y > size[1] - r)\n        dy = size[1] - r - n.y;\n\n      k = 1.2;\n\n      n.x += dx * k;\n      n.y += dy * k;\n      // restraining completed.......................\n\n      n.px = n.x;\n      n.py = n.y;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n\n    if (!isFinite(change_squared))\n      change_squared = width * height;\n\n    // kick the force2 to also do a bit of annealing alongside:\n    // to make it do something, we need to surround it alpha-tweaking stuff, though.\n    force2.resume();\n    force2.tick();\n    force2.stop();\n\n    // fast stop + the drag fix, part 2:\n    if (change_squared < .05) {\n      if (debug == 1) console.log(\"fast stop: CPU load redux\");\n      force1.stop();\n      // fix part 4: monitor D3 resetting the drag marker:\n      if (drag_in_progress) {\n        if (debug == 1) console.log(\"START monitor drag in progress\", drag_in_progress);\n        d3.timer(function() {\n          force1.resume();\n          if (debug == 1) console.log(\"monitor drag in progress: drag ENDED\", drag_in_progress);\n          // Quit monitoring as soon as we noticed the drag ENDED.\n          // Note: we continue to monitor at +500ms intervals beyond the last tick\n          //       as this timer function ALWAYS kickstarts the force layout again\n          //       through force.resume().\n          //       d3.timer() API only accepts an initial delay; we can't set this\n          //       thing to scan, say, every 500msecs until the drag is done,\n          //       so we do it that way, via the revived force.tick process.\n          return true;\n        }, 500);\n      }\n    } else if (change_squared > net.nodes.length * 0.1 * resume_threshold && e.alpha < resume_threshold) {\n      // jolt the alpha (and the visual) when there's still a lot of change when we hit the alpha threshold.\n      force1.alpha(e.alpha *= 2); //force.resume(), but now with decreasing alpha starting value so the jolts don't get so big.\n\n      // And 'dampen out' the trigger point, so it becomes harder and harder to trigger the threshold.\n      // This is done to cope with those instable (forever rotating, etc.) layouts...\n      resume_threshold *= 0.75;\n    } else {\n      //console.log(\"fast stop tracking: \", change_squared, net.nodes.length * 0.1 * resume_threshold, e.alpha, resume_threshold);\n    }\n\n    //--------------------------------------------------------------------\n\n    if (!hull.empty()) {\n      hull.data(convexHulls(net.nodes, off))\n          .attr(\"d\", drawCluster);\n    }\n\n    if (debug == 1) {\n      link.attr(\"x1\", function(d) { return d.source.x; })\n          .attr(\"y1\", function(d) { return d.source.y; })\n          .attr(\"x2\", function(d) { return d.target.x; })\n          .attr(\"y2\", function(d) { return d.target.y; });\n    }\n\n    node.attr(\"cx\", function(d) { return d.x; })\n        .attr(\"__name__\", function(d) { return d.name || \"xxx\"; })\n        .attr(\"cy\", function(d) { return d.y; });\n  });\n\n\n\n  var log_count = 100;\n\n\n\n\n  force2.on(\"tick\", function(e) {\n    /*\n      Update all 'real'=fixed nodes.\n    */\n    net.helper_nodes.forEach(function(n) {\n      var o;\n      if (n.fixed) {\n        o = n.ref;\n        n.px = n.x = o.x;\n        n.py = n.y = o.y;\n      }\n    });\n    net.helper_links.forEach(function(l) {\n      var o = l.g_ref;\n      l.distance = o.distance;\n    });\n\n    // NOTE: force2 is fully driven by force(1), but still there's need for 'fast stop' handling in here\n    //       as our force2 may be more 'joyous' in animating the links that force is animating the nodes\n    //       themselves. Hence we also take the delta movement of the helper nodes into account!\n    net.helper_nodes.forEach(function(n) {\n      // skip the 'fixed' buggers: those are already accounted for in force.tick!\n      if (n.fixed)\n        return;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n    if (!isFinite(change_squared))\n      change_squared = width * height;\n\n    //--------------------------------------------------------------------\n\n    var logged = false;\n\n    hlink.attr(\"d\", function(d) {\n      if (isFinite(d.real_source.x)) {\n        var linedata, dx, dy, f;\n        if (d.cyclic) {\n          // construct round-ish bezier from node to helper and back again:\n          dx = d.target.x - d.real_source.x;\n          dy = d.target.y - d.real_source.y;\n          linedata = [\n              [d.real_source.x, d.real_source.y],\n              [d.target.x - cycle_curvep * dy, d.target.y + cycle_curvep * dx],\n              [d.target.x + cycle_curvep * dx, d.target.y + cycle_curvep * dy],\n              [d.target.x + cycle_curvep * dy, d.target.y - cycle_curvep * dx],\n              [d.real_source.x, d.real_source.y]\n          ];\n          return cycle_pathgen(linedata);\n        } else {\n          linedata = [\n              [d.real_source.x, d.real_source.y],\n              [d.source.x, d.source.y],\n              [d.target.x, d.target.y],\n              [d.real_target.x, d.real_target.y]\n          ];\n          return pathgen(linedata);\n        }\n      } else {\n        if (!logged) {\n          console.log(\"boom\");\n          logged = true;\n        }\n        return null;\n      }\n    });\n\n    if (debug && debug < 3) {\n      hnode.attr(\"cx\", function(d) { return d.x; })\n           .attr(\"cy\", function(d) { return d.y; });\n    }\n  });\n}\n\n    </script>\n  </body>\n</html>\n","filenames":[".gitignore","CREDITS","README.md","index.html","miserables-with-cycles.json","readme.js","sync-d3.sh"]}},{"_index":"blockbuilder","_type":"blocks","_id":"7afd8ab920fd01779e01","_score":0.44468084,"_source":{"userId":"cool-Blue","description":"self sorting nodes in d3 fdg II","created_at":"2015-08-29T15:40:41Z","updated_at":"2015-08-31T18:59:34Z","api":["d3.select","d3.format","d3.scale.linear","d3.layout.force","d3.max","d3.geom.quadtree","d3.range","d3.scale.category10"],"colors":["#cccccc","#ffa500","#d2b48c","#0000ff","#000000","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf"],"readme":"## Force Directed Graph with self sorting nodes - Position swapping\n### Features  \n  - _**<a id=\"gravity\">Accelerated annealing</a>**_  \n  The annealing calc is done every tick but, until alpha drops below 0.05, the viz is only updated every nth tick (n is currently 4).  This delivers significant reductions in the time to reach equilibrium (roughly a factor of 2). \n  - **_<a id=\"force\">Force dynamics</a>_**  \n  The force dynamics are a function of alpha, with two phases.  The initial phase has zero charge, low gravity and low damping.  This is designed to maximise mixing and sorting.  The second phase has a higher gravity and a large, negative charge and much higher damping, this is designed to clean up and stabilise the presentation of the nodes. \n  - **_<a id=\"collisions\">Collisions between nodes</a>_**  \n  Based on [this](http://bl.ocks.org/mbostock/3231298) example but enhanced to sort the radial position of the nodes based on size, with larger nodes closer to the center.  Every collision is used as an opportunity to correct the relative positions. If they are out of position then the radial ordinates of the colliding nodes (in polar coordinates) are swapped.  The sorting efficiency is therefore reliant on good mixing in the collisions.  In order to maximise the mixing, the nodes are all created at the same point in the center of the graph.  When the nodes are swapped, their velocities are preserved. This is done by also changing the previous points (`p.px` and `p.py`).  The mass is calculated assuming the nodes are spheres, using  r<sup>3</sup>, and the rebounds calculated according to relative \"mass\".  \n  \n```javascript\n  force.alpha(a/0.99*(1 - x))\n```  \n### d3 features  used\n  1.  [d3.layout.force](https://github.com/mbostock/d3/wiki/API-Reference#force)\n  2.  [Ordinal Scales](https://github.com/mbostock/d3/wiki/Ordinal-Scales)\n  1.  [d3.format](https://github.com/mbostock/d3/wiki/Formatting#d3_format)\n  1.  [d3.range](https://github.com/mbostock/d3/wiki/Arrays#d3_range)\n  1.  [d3.geom.quadtree](https://github.com/mbostock/d3/wiki/Quadtree-Geom)  \n  ","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n    body {\n        /*margin: 200px 500px 100px 500px;*/\n    }\n\n    #inputs {\n        display: inline-block;\n        margin: 0 0 0 0.5em;\n    }\n    #panel  {\n        display: inline-block;\n        margin: 0 0 0 100px;\n        border: none;\n        box-sizing: border-box;\n        background-color: black;\n    }\n\n    #metrics {\n        display: inline-block;\n    }\n\n    label, input {\n        text-align: left;\n        width: 3.5em;\n        color: orange;\n        /*padding-left: 1em;*/\n        background-color: black;\n        outline: none;\n        border: none;\n    }\n\n    circle {\n        stroke: black;\n        /*stroke: #ccc;*/\n        /*stroke-opacity: 0.5;*/\n        /*stroke-width: 6;*/\n    }\n\n    svg {\n        display: block;\n        overflow: visible;\n        border: none;\n        background: black;\n        margin: 0 100px 0 100px;\n    }\n\n    text {\n        text-anchor: middle;\n    }\n\n    rect {\n        stroke: #ccc;\n    }\n\n</style>\n<body>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n<!--<script src=\"d3 CB.js\"></script>-->\n<script\n    src=\"https://cdnjs.cloudflare.com/ajax/libs/tinycolor/1.1.2/tinycolor.min.js\"></script>\n<script src=\"https://gitcdn.xyz/repo/cool-Blue/d3-lib/master/filters/shadow.js\"></script>\n<script\n    src=\"https://gitcdn.xyz/repo/cool-Blue/d3-lib/master/elapsedTime/elapsed-time-1.0.js\"></script>\n<script>\n    var inputs = d3.select(\"body\").append(\"div\")\n            .attr(\"id\", \"metrics\")\n            .append(\"div\").attr({id: \"panel\"})\n            .append(\"div\").attr({id: \"inputs\"}),\n        nodeCount = inputs.append(\"label\")\n            .attr(\"for\", \"nodeCount\")\n            .text(\"nodes: \")\n            .append(\"input\")\n            .attr({\n                id       : \"nodeCount\",\n                class    : \"numIn\",\n                type     : \"number\",\n                min      : \"100\",\n                max      : \"5,000\",\n                step     : \"100\",\n                inputmode: \"numeric\"\n            });\n\n    var elapsedTime = ElapsedTime(\"#panel\", {\n            border : 0, margin: 0, \"box-sizing\": \"border-box\",\n            padding: \"0 0 0 3px\", background: \"black\", \"color\": \"orange\"\n        })\n            .message(function(value) {\n                var this_lap = this.lap().lastLap, aveLap = this.aveLap(this_lap)\n                return 'alpha:' + d3.format(\" >7,.3f\")(value)\n                    + '\\ttick time:' + d3.format(\" >8,.4f\")(this_lap)\n                    + ' (' + d3.format(\" >4,.3f\")(this.aveLap(this_lap)) + ')'\n                    + '\\tframe rate:' + d3.format(\" >4,.1f\")(1 / aveLap) + \" fps\"\n                    + '\\ttime:' + d3.format(\" >4,.1f\")(this.t()) + \" sec\"\n            }),\n\n        width = 960 - 200,\n        height = 500 - elapsedTime.selection.node().clientHeight,\n        padding = 1, // separation between nodes\n        maxRadius = 7;\n\n    var n = 500, // total number of nodes\n        m = 1, // number of distinct layers\n        c  = 10,\n        g  = 0.01, g2 = 0.05,\n        f1 = 0.01, f2 = 0.001,\n        q2 = -4000;\n\n    var x = d3.scale.linear()\n            .domain([-width / 2, width / 2])\n            .range([0, width]),\n        y = d3.scale.linear()\n            .domain([-height / 2, height / 2])\n            .range([height, 0]);\n\n    var tick = (function() {\n            var phase = -1, stage1 = true;\n\n            function tick(e) {\n                viz.circle.each(viz.collide(e.alpha));\n                if(e.alpha < 0.02 || !(phase = ++phase % 6)) {\n                    elapsedTime.mark(e.alpha);\n                    viz.circle.attr({\n                        cx: function(d) {\n                            return d.x;\n                        },\n                        cy: function(d) {\n                            return d.y;\n                        }\n                    });\n                }\n                if(stage1 && e.alpha < 0.07) {\n                    console.log(\"stage2\")\n                    force.friction(f2)\n                        .charge(q2)\n                        .gravity(g2)\n                        .start().alpha(e.alpha);\n                    stage1 = false;\n                }\n                force.alpha(e.alpha / 0.99 * 0.99)\n            }\n\n            tick.reset = function() {\n                stage1 = true;\n            };\n            return tick;\n        })(),\n        force = d3.layout.force()\n            .size([width, height])\n            .gravity(.01)\n            .charge(0)\n            .friction(.01)\n            .on(\"tick\", tick)\n            .on(\"start\", function() {\n                elapsedTime.start(1000);\n                tick.reset();\n                force\n                    .gravity(g)\n                    .charge(0)\n                    .friction(f1)\n            });\n\n    var svg = d3.select(\"body\").append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .append(\"g\"),\n        bubble = Bubble(svg);\n\n    var viz = update(force, n, padding);\n\n    nodeCount\n        .property(\"value\", n)\n        .on(\"change\", function() {\n            viz = update(force, this.value, padding);\n            this.blur();\n        });\n\n    elapsedTime.selection.style({\n        width: (width\n        - parseFloat(window.getComputedStyle(d3.select(\"#inputs\").node()).getPropertyValue(\"width\"))\n        - parseFloat(window.getComputedStyle(d3.select(\"#inputs\").node()).getPropertyValue(\"margin-left\")))\n        + \"px\"\n    });\n\n    function Collide(nodes, padding) {\n        // Resolve collisions between nodes.\n        var maxRadius = d3.max(nodes, function(d) {\n            return d.q.radius\n        });\n        return function collide(alpha) {\n            var quadtree = d3.geom.quadtree(nodes);\n            return function(d) {\n                var r   = d.radius + maxRadius + padding,\n                    nx1 = d.x - r,\n                    nx2 = d.x + r,\n                    ny1 = d.y - r,\n                    ny2 = d.y + r;\n                quadtree.visit(function v(quad, x1, y1, x2, y2) {\n                    var possible = !(x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1);\n                    if(quad.point && (quad.point !== d) && possible) {\n                        var x = d.x - quad.point.x,\n                            y = d.y - quad.point.y,\n                            l = Math.sqrt(x * x + y * y),\n                            r = d.radius + quad.point.radius + padding;\n                        if(l < r) {\n                            for(; Math.abs(l) == 0;) {\n                                x = Math.round(Math.random() * r);\n                                y = Math.round(Math.random() * r);\n                                l = Math.sqrt(x * x + y * y);\n                            }\n                            ;\n                            //move the nodes away from each other along the radial (normal) vector\n                            //taking relative size into consideration, the sign is already established\n                            //in calculating x and y\n                            l = (r - l) / l * (1 + alpha);\n\n                            // if the nodes are in the wrong radial order for there size, swap radius ordinate\n                            var rel = d.radius / quad.point.radius, bigger = (rel > 1),\n                                rad = d.r / quad.point.r, farther = rad > 1;\n                            if(bigger && farther || !bigger && !farther) {\n                                var d_r = d.r;\n                                d.r = quad.point.r;\n                                quad.point.r = d_r;\n                                d_r = d.pr;\n                                d.pr = quad.point.pr;\n                                quad.point.pr = d_r;\n                            }\n                            // move nodes apart but preserve their velocity\n                            d.x += (x *= l);\n                            d.y += (y *= l);\n                            d.px += x;\n                            d.py += y;\n                            quad.point.x -= x;\n                            quad.point.y -= y;\n                            quad.point.px -= x;\n                            quad.point.py -= y;\n                        }\n                    }\n                    return !possible;\n                });\n            };\n        }\n    }\n    function initNodes(force, n, padding) {\n        var rMax = Math.pow(500 / n * 50, 0.5);\n        force.stop()\n        force.nodes(d3.range(n).map(function() {\n            var layer = Math.floor(Math.random() * m),\n                u = Math.random(),\n                v     = -Math.log(u);\n            return {\n                radius: Math.sqrt(v) * rMax,\n                color : Math.floor(u * c),\n                x     : x(0),\n                y     : y(0),\n                get v() {\n                    var d = this;\n                    return {\n                        x: x.invert(d.x - d.px || d.x || 0),\n                        y: y.invert(d.y - d.py || d.y || 0)\n                    }\n                },\n                get polar() {\n                    var xx = x.invert(this.x), yy = y.invert(this.y);\n                    return [Math.sqrt(xx * xx + yy * yy), Math.atan2(yy, xx)]\n                },\n                set polar(p) {\n                    var r = p[0], theta = p[1];\n                    return [this.x = x(r * Math.cos(theta)), this.y = y(r\n                        * Math.sin(theta))]\n                },\n                get r() {\n                    var xx = x.invert(this.x), yy = y.invert(this.y);\n                    return Math.sqrt(xx * xx + yy * yy);\n                },\n                get theta() {\n                    var xx = x.invert(this.x), yy = y.invert(this.y);\n                    return Math.atan2(yy, xx)\n                },\n                set r(_) {\n                    var theta = this.theta;\n                    return [this.x = x(_ * Math.cos(theta)), this.y = y(_\n                        * Math.sin(theta))]\n                },\n                set theta(_) {\n                    var r = this.r;\n                    return [this.x = x(r * Math.cos(_)), this.y = y(r * Math.sin(_))]\n                },\n\n                get pr() {\n                    var xx = x.invert(this.px), yy = y.invert(this.py);\n                    return Math.sqrt(xx * xx + yy * yy);\n                },\n                get ptheta() {\n                    var xx = x.invert(this.px), yy = y.invert(this.py);\n                    return Math.atan2(yy, xx)\n                },\n                set pr(_) {\n                    var theta = this.ptheta;\n                    return [this.px = x(_ * Math.cos(theta)), this.py = y(_\n                        * Math.sin(theta))]\n                },\n                set ptheta(_) {\n                    var r = this.pr;\n                    return [this.px = x(r * Math.cos(_)), this.py = y(r * Math.sin(_))]\n                },\n            };\n        }));\n\n        force.nodes().forEach(function(d) {\n            d.q = {};\n            Object.keys(d).forEach(function(p) {\n                if(!isNaN(d[p])) Object.defineProperty(d.q, p, {\n                    get: function q() {\n                        var dq = Math.round(d[p]);\n                        if(isNaN(dq)) console.log([myName(arguments), d[p]].join(\": \"));\n                        return dq\n                    }\n                });\n            })\n        });\n        force.start();\n        return Collide(force.nodes(), padding);\n    }\n    function update(force, n, padding) {\n        elapsedTime.start(1000);\n\n        return {\n            collide: initNodes(force, n, padding),\n            circle : (function() {\n                var update = svg.selectAll(\"circle\")\n                    .data(force.nodes());\n                update.enter().append(\"circle\");\n                update.exit().remove();\n                update.attr(\"r\", function(d) {\n                    return d.radius;\n                })\n                    //            .style(\"fill\", function (d) {\n                    //              return d.color;\n                    //            })\n                    .call(bubble.call)\n                    .call(force.drag)\n                return update;\n            })()\n        };\n    }\n    function Bubble(svg) {\n        var colors = d3.range(20).map(d3.scale.category10()).map(function(d) {\n            return filters.sphere(svg, d, 1)\n        });\n        return {\n            call: function(selection) {\n                selection.style(\"fill\", function(d) {\n                    return colors[d.color]\n                })\n            },\n            map : function(d, i, data) {\n                d.fill = colors[~~(Math.random() * 20)];\n            },\n            fill: function(d) {\n                return d.fill\n            }\n        }\n    }\n    ;\n    function myName(args) {\n        return /function\\s+(\\w*)\\(/.exec(args.callee)[1];\n    }\n</script>\n</body>\n\n","filenames":["2015-08-31_22-26-49.png","index.html","readme.md","thumbnail.png"],"thumb":"dc5bbfc999200866f370a8e515ba03adcf2ac511"}},{"_index":"blockbuilder","_type":"blocks","_id":"5480231","_score":0.4252128,"_source":{"userId":"milroc","description":null,"created_at":"2013-04-29T07:43:18Z","updated_at":"2015-12-16T18:49:08Z","api":["d3.svg.line","d3.scale.pow","d3.scale.log","d3.scale.category20","d3.geom.hull","d3.select","d3.scale.linear","d3.behavior.drag","d3.json","d3.layout.force","d3.timer","d3.quantile","d3.random.normal","d3.zip.apply","d3.min","d3.bisector","d3.xhr","d3.text","d3.formatPrefix","d3.map","d3.round","d3.event.stopPropagation","d3.event.preventDefault","d3.interpolateNumber","d3.transform","d3.rgb","d3.hsl","d3.lab","d3.hcl","d3.interpolate","d3.interpolateArray","d3.interpolateString","d3.interpolateRgb","d3.ns.qualify","d3.requote","d3.dispatch","d3.ease.apply","d3.ease","d3.tween","d3.rebind","d3.range.apply","d3.format","d3.bisect","d3.range","d3.scale.ordinal","d3.svg.diagonal","d3.transition","d3.selection.call","d3.touches","d3.mouse","d3.geom.quadtree","d3.layout.hierarchy","d3.sum","d3.permute","d3.max","d3.merge","d3.geo.albers","d3.geo.albersUsa","d3.geom.polygon","d3.geo.greatArc","d3.time.format","d3.time.dayOfYear","d3.time.sundayOfYear","d3.time.mondayOfYear","d3.time.format.utc","d3.time.year","d3.time.day"],"colors":["#cccccc","#555555","#ffffff","#333333","#00eeee","#33bbbb","#231f20","#939598","#58595b","#ff0000","#ffa500","#d2b48c","#008000","#b0c4de","#4682b4","#0000ff","#1f77b4","#aec7e8","#ff7f0e","#ffbb78","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5","#8c564b","#c49c94","#e377c2","#f7b6d2","#7f7f7f","#c7c7c7","#bcbd22","#dbdb8d","#17becf","#9edae5","#f0f8ff","#faebd7","#00ffff","#7fffd4","#f0ffff","#f5f5dc","#ffe4c4","#000000","#ffebcd","#8a2be2","#a52a2a","#deb887","#5f9ea0","#7fff00","#d2691e","#ff7f50","#6495ed","#fff8dc","#dc143c","#00008b","#008b8b","#b8860b","#a9a9a9","#006400","#bdb76b","#8b008b","#556b2f","#ff8c00","#9932cc","#8b0000","#e9967a","#8fbc8f","#483d8b","#2f4f4f","#00ced1","#9400d3","#ff1493","#00bfff","#696969","#1e90ff","#b22222","#fffaf0","#228b22","#ff00ff","#dcdcdc","#f8f8ff","#ffd700","#daa520","#808080","#adff2f","#f0fff0","#ff69b4","#cd5c5c","#4b0082","#fffff0","#f0e68c","#e6e6fa","#fff0f5","#7cfc00","#fffacd","#add8e6","#f08080","#e0ffff","#fafad2","#d3d3d3","#90ee90","#ffb6c1","#ffa07a","#20b2aa","#87cefa","#778899","#ffffe0","#00ff00","#32cd32","#faf0e6","#800000","#66cdaa","#0000cd","#ba55d3","#9370db","#3cb371","#7b68ee","#00fa9a","#48d1cc","#c71585","#191970","#f5fffa","#ffe4e1","#ffe4b5","#ffdead","#000080","#fdf5e6","#808000","#6b8e23","#ff4500","#da70d6","#eee8aa","#98fb98","#afeeee","#db7093","#ffefd5","#ffdab9","#cd853f","#ffc0cb","#dda0dd","#b0e0e6","#800080","#bc8f8f","#4169e1","#8b4513","#fa8072","#f4a460","#2e8b57","#fff5ee","#a0522d","#c0c0c0","#87ceeb","#6a5acd","#708090","#fffafa","#00ff7f","#008080","#d8bfd8","#ff6347","#40e0d0","#ee82ee","#f5deb3","#f5f5f5","#ffff00","#9acd32","#393b79","#5254a3","#6b6ecf","#9c9ede","#637939","#8ca252","#b5cf6b","#cedb9c","#8c6d31","#bd9e39","#e7ba52","#e7cb94","#843c39","#ad494a","#d6616b","#e7969c","#7b4173","#a55194","#ce6dbd","#de9ed6","#3182bd","#6baed6","#9ecae1","#c6dbef","#e6550d","#fd8d3c","#fdae6b","#fdd0a2","#31a354","#74c476","#a1d99b","#c7e9c0","#756bb1","#9e9ac8","#bcbddc","#dadaeb","#636363","#969696","#bdbdbd","#d9d9d9"],"readme":"Pinning nodes (or groups of nodes) in force layout after drag: .fixed bits …… <a href=\"http://bl.ocks.org/3637711\" title=\"view this gist via bl.ocks.org\">∆</a> <a href=\"http://bl.ocks.org/GerHobbelt\" title=\"view a list of all my gists at bl.ocks.org\">∞</a>\n==========================================================================\n\nDerived from the D3.js example [force_cluster.html](https://github.com/mbostock/d3/blob/master/examples/force/force-cluster.html) and [gist 3104394](http://bl.ocks.org/3104394).\n\nFeatures\n========\n\n- all of [gist 3104394](http://bl.ocks.org/3104394) [@ github](https://gist.github.com/3104394)\n- keep SHIFT or CTRL pressed when ending a drag move to 'pin' the node/group there: SHIFT will 'pin' all group nodes; you may drag individual nodes of the group around while they will remain pinned hat way.\n- showcases a tweaked 'miserables.json' file which includes 'circular links' i.e. links which connect node A to node A (~ self-reference)\n\nKnown Bugs\n----------\n\n- doesn't work with vanilla d3.layout.force as it would clear out the .fixed member; this code uses an augmented d3.js file. [pull request #798](https://github.com/mbostock/d3/pull/798)\n- .fixed PIN state doesn't correctly propagate/clear when you click nodes to expand/contract them from/to group nodes.\n\nUsage\n-----\n\n* Slide the 'debug level' slider to see the various debug levels visually; the hospital curves are (top): force.alpha and (bottom) total x/y change squared: a measurement for the amount of movement of nodes in the graph. Note that the bottom curve is inverted, so that when both meet, you're getting close to done. :-)\n* Click on node to expand or collapse. When a node has 'bundled' outgoing links, the first click will expand only those (a.k.a. 2nd display mode / expand state = 1), the next click will then expand the group node itself.\n* Click on hull (which shows up when you expanded a group node) to collapse the group.\n* Drag node to move entire graph around.\n\nNotes\n-----\n\nThe ability to draw circular references is following the overall force design used here, \nwhere helper nodes (and ditto links) are used to produce the bezier-based links; \na self-reference is nothing but yet another nodeA -> helper -> nodeB link chain where\n'nodeB' just happens to be nodeA again.\n\nThis code uses two(2) d3.layout.force() forces: one to layout the original nodes (or their group node equivalent),\nthe second is used to layout all the helper nodes (which are only visible in debug modes 1 and 2): the latter are \nused to construct the bezier paths representing the links.\n","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <title>Clustered Network</title>\n    <script src=\"readme.js\"></script> <!-- hide d3.v2.js from bl.ocks.org output by naming it readme.ls -->\n    <link href='http://fonts.googleapis.com/css?family=Gudea:700,400italic,400' rel='stylesheet' type='text/css'>\n    <style type=\"text/css\">\nsvg {\n  border: 1px solid #ccc;\n}\nbody {\n  font: 10px 'Gudea', sans-serif;\n}\ntext {\n  font-family: 'Gudea', sans-serif;\n  font-size: 9pt;\n}\ncircle.node {\n  fill: lightsteelblue;\n  stroke: #555;\n  stroke-width: 3px;\n}\ncircle.leaf {\n  stroke: #fff;\n  stroke-width: 1.5px;\n}\ncircle.link-expanded {\n  stroke: #555;\n  stroke-width: 3px;\n  stroke-dasharray: 2px 4px;\n}\ncircle.helper {\n  stroke-width: 0;\n  fill: #333;\n  opacity: 0.6;\n}\ncircle.center-of-mass {\n  fill: white;\n  stroke: red;\n  stroke-width: 5px;\n}\npath.hull {\n  fill: lightsteelblue;\n  fill-opacity: 0.3;\n}\npath.hlink {\n  stroke: #333;\n  stroke-opacity: 0.5;\n  fill: none;\n  pointer-events: none;\n}\npath.trace-alpha {\n  stroke: #0ee;\n  stroke-opacity: 0.8;\n  stroke-width: 1.5px;\n  fill: none;\n  pointer-events: none;\n}\npath.trace-c2 {\n  stroke: #3bb;\n  stroke-opacity: 0.8;\n  stroke-width: 1.5px;\n  fill: none;\n  pointer-events: none;\n}\nline.link {\n  stroke: red;\n  stroke-opacity: 0.7;\n  pointer-events: none;\n}\n    </style>\n  </head>\n  <body>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"controls\" visibility=\"hidden\">\n  <g visibility=\"visible\">\n    <rect x=\"0\" y=\"0.55\" opacity=\"0.6\" fill=\"#FFFFFF\" stroke=\"#231F20\" stroke-miterlimit=\"10\" width=\"192\" height=\"22\"/>\n    <text transform=\"matrix(1 0 0 1 4.5066 15.343)\"  >Debug level:</text>\n    <g id=\"slider-debug-level\">\n      <line id=\"slider-x-debug-level\" fill=\"none\" stroke=\"#939598\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"73.5\" y1=\"11.05\" x2=\"160.5\" y2=\"11.05\"/>\n      <rect id=\"sliderpos-debug-level\" x=\"77\" y=\"3.55\" fill=\"#58595B\" stroke=\"#231F20\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" width=\"4\" height=\"15\"/>\n            <text id=\"sliderval-debug-level\" transform=\"matrix(1 0 0 1 164.6638 15.343)\"  >?????</text>\n    </g>\n  </g>\n</svg>\n\n<script type=\"text/javascript\" src=\"http://gerhobbelt.github.com/bl.ocks.org-hack/fixit.js\" ></script>\n\n    <script type=\"text/javascript\">\nvar width = 960,        // svg width\n    height = 500,       // svg height\n    dr = 4,             // default point radius\n    off = 15,           // cluster hull offset\n    cycle_curvep = 0.5, // cyclic ~ self-referential links: determines the 'radius' of the bezier path constructed for the link\n    expand = {},        // expanded clusters\n    data, net, force1, force2, hullg, hull, linkg, helper_linkg, link, hlink, nodeg, helper_nodeg, node, hnode,\n    debug = 3,          // 0: disable, 1: all, 2: only force2 + curves, 3: curves only\n    alpha_trace = [], alpha_line, alpha_scale, debug_g,\n    c2_trace = [], c2_line, c2_scale, debug_g;\n\n    //for (var gn = 0; gn < 20; gn++) expand[gn] = 2;\n\nalpha_line = d3.svg.line()\n  .x(function(d, i) {\n    return i + 10;\n  })\n  .y(function(d, i) {\n    return d;\n  });\n\nalpha_scale = d3.scale.pow().exponent(-1.0).domain([5,.005]).range([10, height - 10]).clamp(true);\n\nc2_scale = d3.scale.log().domain([0.01, width * height]).range([10, height - 10]).clamp(true);\n\nc2_line = d3.svg.line()\n  .x(function(d, i) {\n    return i + 10;\n  })\n  .y(function(d, i) {\n    return d;\n  });\n\nvar curve = d3.svg.line()\n  .interpolate(\"cardinal-closed\")\n  .tension(.85);\n\nvar fill = d3.scale.category20();\n\nfunction noop() { return false; }\n\nfunction nodeid(n) {\n  return n.size > 0 ? \"_g_\" + n.group + \"_\" + n.expansion : n.name;\n}\n\nfunction linkid(l) {\n  var u = nodeid(l.source),\n      v = nodeid(l.target);\n  return u<v ? u+\"|\"+v : v+\"|\"+u;\n}\n\nfunction getGroup(n) { return n.group; }\n\nfunction cycleState(d) {\n  var g = d.group, s = expand[g] || 0;\n  // it's no use 'expanding the intergroup links only' for nodes which only have 1 outside link for real:\n  if (d.ig_link_count < 2)\n    s = (s ? 0 : 2);\n  else {\n    s++; s %= 3;\n  }\n  return expand[g] = s;\n}\n\n// constructs the network to visualize\nfunction network(data, prev) {\n  expand = expand || {};\n  var gm = {},    // group map\n      nm = {},    // node map\n      nml = {},   // node map for left-side 'link path helper nodes'\n      nmr = {},   // node map for right-side 'link path helper nodes'\n      nmc = {},   // node map for cyclic ~ self-referencing 'link path helper nodes'\n      nmimg = {}, // node map for cloned nodes for force2\n      lm = {},    // link maps - lm ~ lml-lmm-lmr\n      lml = {},\n      lmm = {},\n      lmr = {},\n      lmc = {},\n      gn = {},                  // previous group nodes\n      gc = {},                  // previous group centroids\n      nodes = [],               // output nodes\n      links = [],               // output links\n      helper_nodes = [],        // helper force graph nodes\n      helper_links = [];        // helper force graph links\n      helper_render_links = []; // helper force graph links\n  var k;\n\n  // process previous nodes for reuse or centroid calculation\n  if (prev) {\n    prev.nodes.forEach(function(n) {\n      var i = getGroup(n), o;\n      if (n.size > 0) {\n        gn[i] = n;\n        n.size = 0;\n        n.ig_link_count = 0;\n        n.link_count = 0;\n        n.first_link = null;\n        n.first_link_target = null;\n      } else {\n        o = gc[i] || (gc[i] = {x:0,y:0,count:0});\n        o.x += n.x;\n        o.y += n.y;\n        o.count += 1; // we count regular nodes here, so .count is a measure for the number of nodes in the group\n      }\n    });\n  }\n\n  // determine nodes\n  for (k=0; k < data.nodes.length; ++k) {\n    var n = data.nodes[k],\n        i = getGroup(n),\n        expansion = expand[i] || 0,\n        l = gm[i] || (gm[i]=gn[i]) || (gm[i]={group:i, size:0, nodes:[], ig_link_count:0, link_count:0, expansion: expansion, fixed: n.fixed || 0}),\n        img;\n\n    // we need to create a NEW object when expansion changes from 0->1 for a group node\n    // in order to break the references from the d3 selections, so that the next time\n    // this group node will indeed land in the 'enter()' set\n    if (l.expansion != expansion) {\n      l = gn[i] = gm[i] = {group:l.group, x:l.x, y: l.y, size:l.size, nodes:l.nodes, ig_link_count:l.ig_link_count, link_count:l.link_count, expansion: expansion, fixed: l.fixed};\n    }\n\n    if (expansion == 2) {\n      // the node should be directly visible\n      nm[nodeid(n)] = n;\n      if (!n.fixed) n.fixed = 0; // make sure .fixed member is set/numeric\n      img = {ref: n, x: n.x, y: n.y, size: n.size || 0, fixed: n.fixed | 1, id: nodeid(n)};\n      nmimg[nodeid(n)] = img;\n      nodes.push(n);\n      helper_nodes.push(img);\n      if (gn[i]) {\n        // place new nodes at cluster location (plus jitter)\n        n.x = gn[i].x + Math.random();\n        n.y = gn[i].y + Math.random();\n      }\n    } else {\n      // the node is part of a collapsed cluster\n      if (l.size == 0) {\n        // if new cluster, add to set and position at centroid of leaf nodes\n        nm[nodeid(n)] = l;\n        l.size = 1;                     // hack to make nodeid() work correctly for the new group node\n        nm[nodeid(l)] = l;\n        img = {ref: l, x: l.x, y: l.y, size: l.size || 0, fixed: l.fixed | 1, id: nodeid(l)};\n        nmimg[nodeid(l)] = img;\n        l.size = 0;                     // undo hack\n        nmimg[nodeid(n)] = img;\n        nodes.push(l);\n        helper_nodes.push(img);\n        if (gc[i]) {\n          l.x = gc[i].x / gc[i].count;\n          l.y = gc[i].y / gc[i].count;\n        }\n      } else {\n        // have element node point to group node:\n        nm[nodeid(n)] = l; // l = shortcut for: nm[nodeid(l)];\n        nmimg[nodeid(n)] = nmimg[nodeid(l)];\n      }\n      l.nodes.push(n);\n    }\n    // always count group size as we also use it to tweak the force graph strengths/distances\n    l.size += 1;\n    n.group_data = l;\n    n.link_count = 0;\n    n.first_link = null;\n    n.first_link_target = null;\n  }\n\n  // determine links\n  for (k=0; k<data.links.length; ++k) {\n    var e = data.links[k],\n        u = getGroup(e.source),\n        v = getGroup(e.target),\n        rui, rvi, ui, vi, lu, rv, ustate, vstate, uimg, vimg,\n        i, ix,\n        l, ll, l_, lr;\n    if (u != v) {\n      gm[u].ig_link_count++;\n      gm[v].ig_link_count++;\n    }\n    ustate = expand[u] || 0;\n    vstate = expand[v] || 0;\n    // while d3.layout.force does convert link.source and link.target NUMERIC values to direct node references,\n    // it doesn't for other attributes, such as .real_source, so we do not use indexes in nm[] but direct node\n    // references to skip the d3.layout.force implicit links conversion later on and ensure that both .source/.target\n    // and .real_source/.real_target are of the same type and pointing at valid nodes.\n    rui = nodeid(e.source);\n    rvi = nodeid(e.target);\n    u = nm[rui];\n    v = nm[rvi];\n    if (u == v) {\n      // skip non-original links from node to same (A-A); they are rendered as 0-length lines anyhow. Less links in array = faster animation.\n      if (ustate < 2)\n        continue;\n\n      // self-referential 'links' are produced as 2 links+1 helper node; this is a generalized approach so we\n      // can support multiple self-referential links as thanks to the force layout\n      // those helpers will all be in different places, hence the link 'path' for each\n      // parallel link will be different.\n      ui = nodeid(u);\n      i = ui+\"|\"+ui+\"|\"+k;\n      l = lm[i] || (lm[i] = {source:u, target:u, size:0, distance: 0});\n      l.cyclic = true;\n      ix = i;\n      // link(u,v) ==> u -> lu -> u\n      lu = nmc[ix] || (nmc[ix] = data.helpers.cyclic[ix] || (data.helpers.cyclic[ix] = {ref: u, id: \"_ch_\" + ix, size: -1, link_ref: l, cyclic_helper: true}));\n      uimg = nmimg[ui];\n      l_ = lmc[ix] || (lmc[ix] = {g_ref: l, ref: e, id: \"c\"+ix, source:uimg, target: lu, real_source:u, size: 0, distance: 0, cyclic: true});\n      l.size += 1;\n      l_.size += 1;\n      continue;\n    }\n    // 'links' are produced as 3 links+2 helper nodes; this is a generalized approach so we\n    // can support multiple links between element nodes and/or groups, always, as each\n    // 'original link' gets its own set of 2 helper nodes and thanks to the force layout\n    // those helpers will all be in different places, hence the link 'path' for each\n    // parallel link will be different.\n    ui = nodeid(u);\n    vi = nodeid(v);\n    i = (ui < vi ? ui+\"|\"+vi : vi+\"|\"+ui);\n    l = lm[i] || (lm[i] = {source:u, target:v, size:0, distance: 0});\n    if (ustate == 1) {\n      ui = rui;\n    }\n    if (vstate == 1) {\n      vi = rvi;\n    }\n    ix = (ui < vi ? ui+\"|\"+vi+\"|\"+ustate+\"|\"+vstate : vi+\"|\"+ui+\"|\"+vstate+\"|\"+ustate);\n    ix = (ui < vi ? ui+\"|\"+vi : vi+\"|\"+ui);\n    // link(u,v) ==> u -> lu -> rv -> v\n    lu = nml[ix] || (nml[ix] = data.helpers.left[ix]  || (data.helpers.left[ix]  = {ref: u, id: \"_lh_\" + ix, size: -1, link_ref: l}));\n    rv = nmr[ix] || (nmr[ix] = data.helpers.right[ix] || (data.helpers.right[ix] = {ref: v, id: \"_rh_\" + ix, size: -1, link_ref: l}));\n    uimg = nmimg[ui];\n    vimg = nmimg[vi];\n    ll = lml[ix] || (lml[ix] = {g_ref: l, ref: e, id: \"l\"+ix, source:uimg, target:  lu, real_source:u, real_target:v, size:0, distance: 0, left_seg  : true});\n    l_ = lmm[ix] || (lmm[ix] = {g_ref: l, ref: e, id: \"m\"+ix, source:  lu, target:  rv, real_source:u, real_target:v, size:0, distance: 0, middle_seg: true});\n    lr = lmr[ix] || (lmr[ix] = {g_ref: l, ref: e, id: \"r\"+ix, source:  rv, target:vimg, real_source:u, real_target:v, size:0, distance: 0, right_seg : true});\n    l.size += 1;\n    ll.size += 1;\n    l_.size += 1;\n    lr.size += 1;\n\n    // these are only useful for single-linked nodes, but we don't care; here we have everything we need at minimum cost.\n    if (l.size == 1) {\n      u.link_count++;\n      v.link_count++;\n      u.first_link = l;\n      v.first_link = l;\n      u.first_link_target = v;\n      v.first_link_target = u;\n    }\n  }\n\n  for (k in lm) { links.push(lm[k]); }\n  for (k in lml) { helper_links.push(lml[k]); }\n  for (k in lmm) { helper_links.push(lmm[k]); helper_render_links.push(lmm[k]); }\n  for (k in lmr) { helper_links.push(lmr[k]); }\n  for (k in lmc) { helper_links.push(lmc[k]); helper_render_links.push(lmc[k]); }\n  for (k in nml) { helper_nodes.push(nml[k]); }\n  for (k in nmr) { helper_nodes.push(nmr[k]); }\n  for (k in nmc) { helper_nodes.push(nmc[k]); }\n  //for (k in nmc) { nodes.push(nmc[k]); }\n\n  return {nodes: nodes, links: links, helper_nodes: helper_nodes, helper_links: helper_links, helper_render_links: helper_render_links};\n}\n\nfunction convexHulls(nodes, offset) {\n  var hulls = {};\n\n  // create point sets\n  for (var k=0; k<nodes.length; ++k) {\n    var n = nodes[k];\n    if (n.size) continue;\n    var i = getGroup(n),\n        l = hulls[i] || (hulls[i] = []);\n    l.push([n.x - offset, n.y - offset]);\n    l.push([n.x - offset, n.y + offset]);\n    l.push([n.x + offset, n.y - offset]);\n    l.push([n.x + offset, n.y + offset]);\n  }\n\n  // create convex hulls\n  var hullset = [];\n  for (i in hulls) {\n    hullset.push({group: i, path: d3.geom.hull(hulls[i])});\n  }\n\n  return hullset;\n}\n\nfunction drawCluster(d) {\n  return curve(d.path); // 0.8\n}\n\n// these functions call init(); by declaring them here,\n// they don't have the old init() as a closure any more.\n// This should save us some memory and cycles when using\n// this in a long-running setting.\n\nfunction on_hull_click(d) {\n  if (debug == 1) console.log(\"node click\", d, arguments, this, expand[d.group]);\n  // clicking on 'path helper nodes' shouln't expand/collapse the group node:\n  if (d.size < 0)\n    return;\n  cycleState(d);\n  init();\n}\n\nfunction on_node_click(d) {\n  if (debug == 1) console.log(\"node click\", d, arguments, this, expand[d.group]);\n  // clicking on 'path helper nodes' shouln't expand/collapse the group node:\n  if (d.size < 0)\n    return;\n  cycleState(d);\n  init();\n}\n\n// --------------------------------------------------------\n\nvar vis = d3.select(\"svg\")\n  .attr(\"width\", width)\n  .attr(\"height\", height);\n\nvar debug_ui = vis.select(\"#slider-debug-level\");\ndebug_ui.select(\"#sliderval-debug-level\").text(debug);\nvar dbg = debug_ui.select(\"#slider-x-debug-level\");\nx1 = +dbg.attr(\"x1\");\nx2 = +dbg.attr(\"x2\");\nvar debug_ui_scale = d3.scale.linear().domain([0,3]).range([+dbg.attr(\"x1\")+3.5, +dbg.attr(\"x2\")-3.5-4]).clamp(true);\n\n// as per http://bl.ocks.org/1557377; correction for latest d3 lib: origin(Object) doesn't cut it.\nvar slider_drag = d3.behavior.drag()\n/*\n        .origin(function(d, i) {\n            // must return {x: value, y: value} object\n            var owner = this.ownerSVGElement;\n            var rect = owner.getBoundingClientRect();\n            // (window.scrollX || window.scrollY) ?\n            //return {x: rect.left - this.clientLeft, y: rect.top - this.clientTop};\n            return {x: rect.left, y: rect.top};\n        })\n*/\n  .on(\"drag\", slider_dragmove);\n\ndebug_ui.select(\"#sliderpos-debug-level\")\n  .attr(\"x\", debug_ui_scale(debug))\n  .call(slider_drag);\n\nfunction slider_dragmove(d) {\n  if (!isFinite(d3.event.x))\n    return;\n  var dv = debug_ui_scale.invert(d3.event.x);\n  dv = Math.round(dv);\n  d3.select(this)\n    .attr(\"x\", debug_ui_scale(dv));\n  debug_ui.select(\"#sliderval-debug-level\").text(dv);\n  if (dv != debug) {\n    debug = dv;\n\n    helper_nodeg\n      .selectAll(\"*\")\n        .remove();\n    linkg\n      .selectAll(\"*\")\n        .remove();\n    vis.select(\"#center-of-mass\")\n      .attr(\"display\", (debug == 1) ? null : \"none\");\n    debug_g\n      .attr(\"display\", debug ? null : \"none\");\n\n    init();\n  }\n}\n\ndebug_g = vis.append(\"g\");\ndebug_g\n  .append(\"path\")\n  .attr(\"class\", \"trace-alpha\");\ndebug_g\n  .append(\"path\")\n  .attr(\"class\", \"trace-c2\");\n\nvar pathgen = d3.svg.line().interpolate(\"basis\");\nvar cycle_pathgen = d3.svg.line().interpolate(\"basis\");\n\nd3.json(\"miserables-with-cycles.json\", function(json) {\n  /*\n  JSON layout:\n\n  {\n    \"nodes\": [\n      {\n        \"name\"  : \"bla\",    // in this code, this is expected to be a globally unique string (as it's used for the id via nodeid())\n        \"group\" : 1         // group ID (number)\n      },\n      ...\n    ],\n    \"links\": [\n      {\n        \"source\" : 1,       // nodes[] index (number; is immediately converted to direct nodes[index] reference)\n        \"target\" : 0,       // nodes[] index (number; is immediately converted to direct nodes[index] reference)\n        \"value\"  : 1        // [not used in this force layout]\n      },\n      ...\n    ]\n  }\n  */\n  data = json;\n  for (var i=0; i<data.links.length; ++i) {\n    o = data.links[i];\n    o.source = data.nodes[o.source];\n    o.target = data.nodes[o.target];\n  }\n  // prepare data struct to also carry our 'path helper nodes':\n  data.helpers = {left: {}, right: {}, cyclic: {}};\n\n  hullg = vis.append(\"g\");\n  //if (debug && debug < 3) {\n    linkg = vis.append(\"g\");\n    helper_nodeg = vis.append(\"g\");\n  //}\n  helper_linkg = vis.append(\"g\");\n  nodeg = vis.append(\"g\");\n  //if (debug == 1) {\n    node = vis.append(\"g\")\n        .attr(\"id\", \"center-of-mass\")\n      .append(\"circle\")\n        .attr(\"class\", \"center-of-mass\")\n        .attr(\"visibility\", (debug == 1) ? \"visible\" : \"hidden\")\n        .attr(\"r\", 10);\n  //}\n\n  init();\n\n  vis.attr(\"opacity\", 1e-6)\n    .transition()\n    .duration(1000)\n    .attr(\"opacity\", 1);\n});\n\nfunction init() {\n  if (force1) force1.stop();\n\n  net = network(data, net);\n\n  force1 = d3.layout.force()\n      .nodes(net.nodes)\n      .links(net.links)\n      .size([width, height])\n      .linkDistance(function(l, i) {\n        //return 300;\n        var n1 = l.source, n2 = l.target,\n            g1 = n1.group_data || n1, g2 = n2.group_data || n2,\n            n1_is_group = n1.size || 0, n2_is_group = n2.size || 0,\n            rv = 300;\n        // larger distance for bigger groups:\n        // both between single nodes and _other_ groups (where size of own node group still counts),\n        // and between two group nodes.\n        //\n        // reduce distance for groups with very few outer links,\n        // again both in expanded and grouped form, i.e. between individual nodes of a group and\n        // nodes of another group or other group node or between two group nodes.\n        //\n        // The latter was done to keep the single-link groups close.\n        if (n1.group == n2.group) {\n          if ((n1.link_count < 2 && !n1_is_group) || (n2.link_count < 2 && !n2_is_group)) {\n            // 'real node' singles: these don't need a big distance to make the distance, if you whumsayin' ;-)\n            rv = 2;\n          } else if (!n1_is_group && !n2_is_group) {\n            rv = 2;\n          } else if (g1.link_count < 4 || g2.link_count < 4) {\n            rv = 100;\n          }\n        } else {\n          if (!n1_is_group && !n2_is_group) {\n            rv = 50;\n          } else if ((n1_is_group && n2_is_group) && (g1.link_count < 4 || g2.link_count < 4)) {\n            // 'real node' singles: these don't need a big distance to make the ditance, if you whumsayin' ;-)\n            rv = 100;\n          } else if ((n1_is_group && g1.link_count < 2) || (n2_is_group && g2.link_count < 2)) {\n            // 'real node' singles: these don't need a big distance to make the ditance, if you whumsayin' ;-)\n            rv = 30;\n          } else if (!n1_is_group || !n2_is_group) {\n            rv = 100;\n          }\n        }\n        return l.distance = rv;\n      })\n      .gravity(1.0)             // gravity+charge tweaked to ensure good 'grouped' view (e.g. green group not smack between blue&orange, ...\n      .charge(function(d, i) {  // ... charge is important to turn single-linked groups to the outside\n        if (d.size > 0) {\n          return -5000;  // group node\n        } else {\n          // 'regular node'\n          return -1000;\n        }\n      })\n      .friction(0.7)   // friction adjusted to get dampened display: less bouncy bouncy ball [Swedish Chef, anyone?]\n      .on(\"end\", function() {\n        // done\n      })\n      .on(\"start\", function() {\n        // zip nada\n      })\n      .start();\n\n  /*\n  And here's the crazy idea for allowing AND rendering multiple links between 2 nodes, etc., as the initial attempt\n  to include the 'helper' nodes in the basic 'force' failed dramatically from a visual PoV: we 'overlay' the basic\n  nodes+links force with a SECOND force layout which 'augments' the original force layout by having it 'layout' all\n  the helper nodes (with their links) between the 'fixed' REAL nodes, which are laid out by the original force.\n\n  This way, we also have the freedom to apply a completely different force field setup to the helpers (no gravity\n  as it doesn't make sense for helpers, different charge values, etc.).\n  */\n  force2 = d3.layout.force()\n      .nodes(net.helper_nodes)\n      .links(net.helper_links)\n      .size([width, height])\n      .linkDistance(function(l, i) {\n        var n1 = l.real_source, n2 = l.real_target, rv,\n            lr = l.g_ref,\n            n1r, n2r,\n            dx, dy;\n        if (l.cyclic)\n          return 15;\n        if (lr.source.size > 0 || lr.target.size > 0)\n          return 20;\n        return 1;\n      })\n      .gravity(0.0)   // just a tad of gravidy to help keep those curvy buttocks decent\n      .charge(function(d, i) {\n        // helper nodes have a medium-to-high charge, depending on the number of links the related force link represents.\n        // Hence bundles of links fro A->B will have helper nodes with huge charges: better spreading of the link paths.\n        //\n        // Unless we're looking at helpers for links between 'real nodes', NOT GROUPS: in that case we want to keep\n        // the lines are straight as posssible as there would only be one relation for A->B anyway, so we lower the charge\n        // for such nodes and helpers.\n        if (d.fixed)\n          return -10;\n        var l = d.link_ref,\n            c = l.link_count || 1;\n        if (l.source.size > 0 || l.target.size > 0)\n          return -30;\n        return -1;\n      })\n      .friction(0.95)\n      .start()\n      .stop();          // and immediately stop! force.tick will drive this one every tick!\n\n  hullg.selectAll(\"path.hull\").remove();\n  hull = hullg.selectAll(\"path.hull\")\n      .data(convexHulls(net.nodes, off))\n      .enter().append(\"path\")\n        .attr(\"class\", \"hull\")\n        .attr(\"d\", drawCluster)\n        .style(\"fill\", function(d) { return fill(d.group); })\n        .on(\"click\", on_hull_click);\n\n  if (debug == 1) {\n    link = linkg.selectAll(\"line.link\").data(net.links, linkid);\n    link.exit().remove();\n    link.enter().append(\"line\")\n        .attr(\"class\", \"link\")\n        .attr(\"x1\", function(d) { return d.source.x; })\n        .attr(\"y1\", function(d) { return d.source.y; })\n        .attr(\"x2\", function(d) { return d.target.x; })\n        .attr(\"y2\", function(d) { return d.target.y; });\n    // both existing and enter()ed links may have changed stroke width due to expand state change somewhere:\n    link.style(\"stroke-width\", function(d) { return d.size || 1; });\n  }\n\n  hlink = helper_linkg.selectAll(\"path.hlink\").data(net.helper_render_links, function(d) {\n    return d.id;\n  });\n  hlink.exit().remove();\n  hlink.enter().append(\"path\")\n      .attr(\"class\", \"hlink\");\n  // both existing and enter()ed links may have changed stroke width due to expand state change somewhere:\n  hlink.style(\"stroke-width\", function(d) { return d.size || 1; });\n\n\n  if (debug && debug < 3) {\n    hnode = helper_nodeg.selectAll(\"circle.node\").data(net.helper_nodes, function(d) {\n      return d.id;\n    });\n    hnode.exit().remove();\n    hnode.enter().append(\"circle\")\n        // if (d.size) -- d.size > 0 when d is a group node.\n        // d.size < 0 when d is a 'path helper node'.\n        .attr(\"class\", function(d) {\n          return \"node\" + (d.size > 0 ? \"\" : d.size < 0 ? \" helper\" : \" leaf\");\n        })\n        .attr(\"r\", function(d) {\n          return d.size > 0 ? d.size + dr : d.size < 0 ? 2 : dr + 1;\n        })\n        .attr(\"cx\", function(d) { return d.x; })\n        .attr(\"cy\", function(d) { return d.y; })\n        .style(\"fill\", function(d) { return fill(d.group); });\n  }\n\n  node = nodeg.selectAll(\"circle.node\").data(net.nodes, nodeid);\n  node.exit().remove();\n  node.enter().append(\"circle\")\n      // if (d.size) -- d.size > 0 when d is a group node.\n      // d.size < 0 when d is a 'path helper node'.\n      .attr(\"class\", function(d) {\n        return \"node\" + (d.size > 0 ? d.expansion ? \" link-expanded\" : \"\" : \" leaf\");\n      })\n      .attr(\"r\", function(d) {\n        return d.size > 0 ? d.size + dr : dr + 1;\n      })\n      .attr(\"cx\", function(d) { return d.x; })\n      .attr(\"cy\", function(d) { return d.y; })\n      .style(\"fill\", function(d) { return fill(d.group); })\n      .on(\"click\", on_node_click);\n\n  node.call(force1.drag);\n\n  var force1_drag = force1.drag(); // WORKS IN EXTENDED D#.js ONLY!\n\n  var drag_in_progress = false;\n  var change_squared = width * height;\n\n  function on_drag_start(d) {\n    if (debug == 1) console.log(\"node drag START\", d, arguments, this, expand[d.group]);\n\n    drag_in_progress = true;\n  }\n\n  function on_drag_end(d) {\n    if (debug == 1) console.log(\"node drag END\", d, arguments, this, expand[d.group]);\n\n    drag_in_progress = false;\n\n    // When CTRL key is pressed, we PIN the dragged node to the current location.\n    // When SHIFT key is pressed, we PIN the entire expanded group to the current location. (only when node is a non-group one, i.e. in expanded group mode.\n    // When neither have been pressed, we RELEASE the PIN on the node.\n    // (To release the PIN on a group, click to cycle the group expand state: switching back to group node (state=0/1) releases the group PIN.)\n    var e = d3.event.sourceEvent;\n    if (e.ctrlKey || e.shiftKey) {\n      d.fixed |= 0x08;\n    } else {\n      d.fixed &= ~0x08;\n    }\n    var g = getGroup(d);\n    var s = expand[g] || 0;\n    if (e.shiftKey && s == 2) {\n      net.nodes.forEach(function(d, i) {\n        if (getGroup(d) == g) {\n          d.fixed |= 0x10;\n        }\n      });\n    }\n  }\n\n  force1_drag\n    .on(\"dragstart\", on_drag_start)\n    .on(\"drag\", function(d) {\n      //\n    })\n    .on(\"dragend\", on_drag_end);\n\n  // CPU load redux for the fix, part 3: jumpstart the annealing process again when the user moves the mouse outside the node,\n  // when we believe the drag is still going on; even when it isn't anymore, but D3 doesn't inform us about that!\n  node\n    .on(\"mouseout.ger_fix\", function(d) {\n      if (debug == 1) console.log(\"mouseout.ger_fix\", this, arguments, d.fixed, drag_in_progress);\n      if (drag_in_progress) {\n        force1.resume();\n      }\n    });\n\n  var resume_threshold = 0.05;\n\n  force1.on(\"tick\", function(e) {\n    if (debug) {\n      alpha_trace.push(alpha_scale(e.alpha));\n      if (alpha_trace.length > width - 20)\n        alpha_trace.shift();\n      debug_g.select(\"path.trace-alpha\")\n          .attr(\"d\", alpha_line(alpha_trace));\n\n      c2_trace.push(c2_scale(change_squared));\n      if (c2_trace.length > width - 20)\n        c2_trace.shift();\n      debug_g.select(\"path.trace-c2\")\n          .attr(\"d\", c2_line(c2_trace));\n    }\n\n    /*\n    Force all nodes with only one link to point outwards.\n\n    To do this, we first calculate the center mass (okay, we wing it, we fake node 'weight'),\n    then see whether the target node for links from single-link nodes is closer to the\n    center-of-mass than us, and if it isn't, we push the node outwards.\n    */\n    var center = {x: 0, y: 0, weight: 0}, singles = [], centroids = {},\n        size, c, k, mx, my, dx, dy, alpha;\n\n    net.nodes.forEach(function(n) {\n      var w = Math.max(1, n.size || 0, n.weight || 0),\n          i = getGroup(n),\n          gc = centroids[i] || (centroids[i] = { x:0, y:0, weight: 0});\n\n      center.x += w * n.x;\n      center.y += w * n.y;\n      center.weight += w;\n\n      gc.x += w * n.x;\n      gc.y += w * n.y;\n      gc.weight += w;\n\n      if (n.size > 0 ? n.link_count < 4 : n.group_data.link_count < 3)\n        singles.push(n);\n    });\n\n    size = force1.size();\n\n    mx = size[0] / 2;\n    my = size[1] / 2;\n\n    for (k in centroids) {\n      var gc = centroids[k];\n      gc.x /= gc.weight;\n      gc.y /= gc.weight;\n    }\n\n    singles.forEach(function(n) {\n      var l = n.first_link, n2 = n.first_link_target,\n          proj, ax, bx, ay, by, k, x, y, alpha, rej, power,\n          dx, dy,\n          n_is_group = n.size || 0,\n          ng = n.group_data || n,\n          c2,\n          w = Math.max(1, n.size || 0, n.weight || 0),\n          i = getGroup(n),\n          gc = centroids[i];\n\n      // haven't decided what to do for unconnected nodes, yet...\n      if (!l)\n        return;\n\n      // apply amplification of the 'original' alpha:\n      // 1.0 for singles and double-connected nodes, close to 0 for highly connected nodes, rapidly decreasing.\n      // Use this as we want to give those 'non-singles' a little bit of the same 'push out' treatment.\n      // Reduce effect for 'real nodes' which are singles: they need much less encouragement!\n      power = Math.max(2, n_is_group ? n.link_count : n.group_data.link_count);\n      power = 2 / power;\n\n      alpha = e.alpha * power;\n\n      // undo/revert gravity forces (or as near as we can get, here)\n      //\n      // revert for truely single nodes, revert just a wee little bit for dual linked nodes,\n      // only reduce ever so slighty for nodes with few links (~ 3) that made it into this\n      // 'singles' selection\n      if (k = alpha * force1.gravity() * (0.8 + power)) {\n        dx = (mx - n.x) * k;\n        dy = (my - n.y) * k;\n        n.x -= dx;\n        n.y -= dy;\n\n        center.x -= dx * w;\n        center.y -= dy * w;\n        gc.x -= dx * w;\n        gc.y -= dy * w;\n      }\n    });\n\n    // move the entire graph so that its center of mass sits at the center, period.\n    center.x /= center.weight;\n    center.y /= center.weight;\n\n    if (debug == 1) {\n      c = vis.selectAll(\"circle.center-of-mass\")\n          .attr(\"cx\", center.x)\n          .attr(\"cy\", center.y);\n    }\n\n    dx = mx - center.x;\n    dy = my - center.y;\n\n    alpha = e.alpha * 5;\n    dx *= alpha;\n    dy *= alpha;\n\n    net.nodes.forEach(function(n) {\n      n.x += dx;\n      n.y += dy;\n    });\n\n\n    change_squared = 0;\n\n    // fixup .px/.py so drag behaviour and annealing get the correct values, as\n    // force.tick() would expect .px and .py to be the .x and .y of yesterday.\n    net.nodes.forEach(function(n) {\n      // restrain all nodes to window area\n      var k, dx, dy,\n          r = (n.size > 0 ? n.size + dr : dr + 1) + 2 /* styled border outer thickness and a bit */;\n\n      dx = 0;\n      if (n.x < r)\n        dx = r - n.x;\n      else if (n.x > size[0] - r)\n        dx = size[0] - r - n.x;\n\n      dy = 0;\n      if (n.y < r)\n        dy = r - n.y;\n      else if (n.y > size[1] - r)\n        dy = size[1] - r - n.y;\n\n      k = 1.2;\n\n      n.x += dx * k;\n      n.y += dy * k;\n      // restraining completed.......................\n\n      // fixes 'elusive' node behaviour when hovering with the mouse (related to force.drag)\n      if (n.fixed) {\n        // 'elusive behaviour' ~ move mouse near node and node would take off, i.e. act as an elusive creature.\n        n.x = n.px;\n        n.y = n.py;\n      }\n      n.px = n.x;\n      n.py = n.y;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n\n    // also restrain helper nodes to within the visible area --> link paths are almost always ket in-view:\n    net.helper_nodes.forEach(function(n) {\n      // restrain all nodes to window area\n      var k, dx, dy,\n          r = (n.size > 0 ? n.size : 1) + 5 /* heuristic */;\n\n      dx = 0;\n      if (n.x < r)\n        dx = r - n.x;\n      else if (n.x > size[0] - r)\n        dx = size[0] - r - n.x;\n\n      dy = 0;\n      if (n.y < r)\n        dy = r - n.y;\n      else if (n.y > size[1] - r)\n        dy = size[1] - r - n.y;\n\n      k = 1.2;\n\n      n.x += dx * k;\n      n.y += dy * k;\n      // restraining completed.......................\n\n      n.px = n.x;\n      n.py = n.y;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n\n    if (!isFinite(change_squared))\n      change_squared = width * height;\n\n    // kick the force2 to also do a bit of annealing alongside:\n    // to make it do something, we need to surround it alpha-tweaking stuff, though.\n    force2.resume();\n    force2.tick();\n    force2.stop();\n\n    // fast stop + the drag fix, part 2:\n    if (change_squared < .05) {\n      if (debug == 1) console.log(\"fast stop: CPU load redux\");\n      force1.stop();\n      // fix part 4: monitor D3 resetting the drag marker:\n      if (drag_in_progress) {\n        if (debug == 1) console.log(\"START monitor drag in progress\", drag_in_progress);\n        d3.timer(function() {\n          force1.resume();\n          if (debug == 1) console.log(\"monitor drag in progress: drag ENDED\", drag_in_progress);\n          // Quit monitoring as soon as we noticed the drag ENDED.\n          // Note: we continue to monitor at +500ms intervals beyond the last tick\n          //       as this timer function ALWAYS kickstarts the force layout again\n          //       through force.resume().\n          //       d3.timer() API only accepts an initial delay; we can't set this\n          //       thing to scan, say, every 500msecs until the drag is done,\n          //       so we do it that way, via the revived force.tick process.\n          return true;\n        }, 500);\n      }\n    } else if (change_squared > net.nodes.length * 0.1 * resume_threshold && e.alpha < resume_threshold) {\n      // jolt the alpha (and the visual) when there's still a lot of change when we hit the alpha threshold.\n      force1.alpha(e.alpha *= 2); //force.resume(), but now with decreasing alpha starting value so the jolts don't get so big.\n\n      // And 'dampen out' the trigger point, so it becomes harder and harder to trigger the threshold.\n      // This is done to cope with those instable (forever rotating, etc.) layouts...\n      resume_threshold *= 0.75;\n    } else {\n      //console.log(\"fast stop tracking: \", change_squared, net.nodes.length * 0.1 * resume_threshold, e.alpha, resume_threshold);\n    }\n\n    //--------------------------------------------------------------------\n\n    if (!hull.empty()) {\n      hull.data(convexHulls(net.nodes, off))\n          .attr(\"d\", drawCluster);\n    }\n\n    if (debug == 1) {\n      link.attr(\"x1\", function(d) { return d.source.x; })\n          .attr(\"y1\", function(d) { return d.source.y; })\n          .attr(\"x2\", function(d) { return d.target.x; })\n          .attr(\"y2\", function(d) { return d.target.y; });\n    }\n\n    node.attr(\"cx\", function(d) { return d.x; })\n        .attr(\"__name__\", function(d) { return d.name || \"xxx\"; })\n        .attr(\"cy\", function(d) { return d.y; });\n  });\n\n\n\n  var log_count = 100;\n\n\n\n\n  force2.on(\"tick\", function(e) {\n    /*\n      Update all 'real'=fixed nodes.\n    */\n    net.helper_nodes.forEach(function(n) {\n      var o;\n      if (n.fixed) {\n        o = n.ref;\n        n.px = n.x = o.x;\n        n.py = n.y = o.y;\n      }\n    });\n    net.helper_links.forEach(function(l) {\n      var o = l.g_ref;\n      l.distance = o.distance;\n    });\n\n    // NOTE: force2 is fully driven by force(1), but still there's need for 'fast stop' handling in here\n    //       as our force2 may be more 'joyous' in animating the links that force is animating the nodes\n    //       themselves. Hence we also take the delta movement of the helper nodes into account!\n    net.helper_nodes.forEach(function(n) {\n      // skip the 'fixed' buggers: those are already accounted for in force.tick!\n      if (n.fixed)\n        return;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n    if (!isFinite(change_squared))\n      change_squared = width * height;\n\n    //--------------------------------------------------------------------\n\n    var logged = false;\n\n    hlink.attr(\"d\", function(d) {\n      if (isFinite(d.real_source.x)) {\n        var linedata, dx, dy, f;\n        if (d.cyclic) {\n          // construct round-ish bezier from node to helper and back again:\n          dx = d.target.x - d.real_source.x;\n          dy = d.target.y - d.real_source.y;\n          linedata = [\n              [d.real_source.x, d.real_source.y],\n              [d.target.x - cycle_curvep * dy, d.target.y + cycle_curvep * dx],\n              [d.target.x + cycle_curvep * dx, d.target.y + cycle_curvep * dy],\n              [d.target.x + cycle_curvep * dy, d.target.y - cycle_curvep * dx],\n              [d.real_source.x, d.real_source.y]\n          ];\n          return cycle_pathgen(linedata);\n        } else {\n          linedata = [\n              [d.real_source.x, d.real_source.y],\n              [d.source.x, d.source.y],\n              [d.target.x, d.target.y],\n              [d.real_target.x, d.real_target.y]\n          ];\n          return pathgen(linedata);\n        }\n      } else {\n        if (!logged) {\n          console.log(\"boom\");\n          logged = true;\n        }\n        return null;\n      }\n    });\n\n    if (debug && debug < 3) {\n      hnode.attr(\"cx\", function(d) { return d.x; })\n           .attr(\"cy\", function(d) { return d.y; });\n    }\n  });\n}\n\n    </script>\n  </body>\n</html>\n","filenames":[".gitignore","CREDITS","README.md","index.html","miserables-with-cycles.json","readme.js","sync-d3.sh"]}},{"_index":"blockbuilder","_type":"blocks","_id":"3683278","_score":0.42058352,"_source":{"userId":"GerHobbelt","description":"d3.js: using tree layout for graphs which have nodes with multiple 'parents'","created_at":"2012-09-09T08:04:17Z","updated_at":"2016-05-08T15:42:58Z","api":["d3.layout.force","d3.select","d3.json","d3.layout.hierarchy","d3.quantile","d3.random.normal","d3.zip.apply","d3.min","d3.bisector","d3.xhr","d3.text","d3.formatPrefix","d3.map","d3.round","d3.event.stopPropagation","d3.event.preventDefault","d3.interpolateNumber","d3.transform","d3.rgb","d3.hsl","d3.lab","d3.hcl","d3.interpolate","d3.interpolateArray","d3.interpolateString","d3.interpolateRgb","d3.ns.qualify","d3.requote","d3.dispatch","d3.ease.apply","d3.timer","d3.ease","d3.tween","d3.rebind","d3.range.apply","d3.format","d3.bisect","d3.scale.linear","d3.scale.pow","d3.range","d3.scale.ordinal","d3.svg.diagonal","d3.transition","d3.selection.call","d3.touches","d3.mouse","d3.geom.quadtree","d3.behavior.drag","d3.sum","d3.permute","d3.max","d3.merge","d3.geo.albers","d3.geo.albersUsa","d3.geom.polygon","d3.geo.greatArc","d3.time.format","d3.time.dayOfYear","d3.time.sundayOfYear","d3.time.mondayOfYear","d3.time.format.utc","d3.time.year","d3.time.day"],"colors":["#000000","#9ecae1","#3182bd","#c6dbef","#fd8d3c","#ff0000","#ffa500","#d2b48c","#0000ff","#ffffff","#f0f8ff","#faebd7","#00ffff","#7fffd4","#f0ffff","#f5f5dc","#ffe4c4","#ffebcd","#8a2be2","#a52a2a","#deb887","#5f9ea0","#7fff00","#d2691e","#ff7f50","#6495ed","#fff8dc","#dc143c","#00008b","#008b8b","#b8860b","#a9a9a9","#006400","#bdb76b","#8b008b","#556b2f","#ff8c00","#9932cc","#8b0000","#e9967a","#8fbc8f","#483d8b","#2f4f4f","#00ced1","#9400d3","#ff1493","#00bfff","#696969","#1e90ff","#b22222","#fffaf0","#228b22","#ff00ff","#dcdcdc","#f8f8ff","#ffd700","#daa520","#808080","#008000","#adff2f","#f0fff0","#ff69b4","#cd5c5c","#4b0082","#fffff0","#f0e68c","#e6e6fa","#fff0f5","#7cfc00","#fffacd","#add8e6","#f08080","#e0ffff","#fafad2","#d3d3d3","#90ee90","#ffb6c1","#ffa07a","#20b2aa","#87cefa","#778899","#b0c4de","#ffffe0","#00ff00","#32cd32","#faf0e6","#800000","#66cdaa","#0000cd","#ba55d3","#9370db","#3cb371","#7b68ee","#00fa9a","#48d1cc","#c71585","#191970","#f5fffa","#ffe4e1","#ffe4b5","#ffdead","#000080","#fdf5e6","#808000","#6b8e23","#ff4500","#da70d6","#eee8aa","#98fb98","#afeeee","#db7093","#ffefd5","#ffdab9","#cd853f","#ffc0cb","#dda0dd","#b0e0e6","#800080","#bc8f8f","#4169e1","#8b4513","#fa8072","#f4a460","#2e8b57","#fff5ee","#a0522d","#c0c0c0","#87ceeb","#6a5acd","#708090","#fffafa","#00ff7f","#4682b4","#008080","#d8bfd8","#ff6347","#40e0d0","#ee82ee","#f5deb3","#f5f5f5","#ffff00","#9acd32","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf","#aec7e8","#ffbb78","#98df8a","#ff9896","#c5b0d5","#c49c94","#f7b6d2","#c7c7c7","#dbdb8d","#9edae5","#393b79","#5254a3","#6b6ecf","#9c9ede","#637939","#8ca252","#b5cf6b","#cedb9c","#8c6d31","#bd9e39","#e7ba52","#e7cb94","#843c39","#ad494a","#d6616b","#e7969c","#7b4173","#a55194","#ce6dbd","#de9ed6","#6baed6","#e6550d","#fdae6b","#fdd0a2","#31a354","#74c476","#a1d99b","#c7e9c0","#756bb1","#9e9ac8","#bcbddc","#dadaeb","#636363","#969696","#bdbdbd","#d9d9d9"],"readme":"# Experiment …… <a href=\"http://bl.ocks.org/3669455\" title=\"view this gist via bl.ocks.org\">∆</a> <a href=\"http://bl.ocks.org/GerHobbelt\" title=\"view a list of all my gists at bl.ocks.org\">∞</a>\n\n# How do I draw a tree, when my nodes may have multiple parents?\n\nThis question gets asked repeatedly about drawing/layout-ing 'trees', i.e. 'hierarchies' where \nit is then mentioned that nodes do have 'multiple parents'. \n\nThis would, of course, make these structures *graphs* rather than *trees*, but the fact they start \nwith mentioning 'tree' hints at what sort of display is sought, and this does not come naturally \nwhen you use a vanilla d4.layout.force.\n\n\n## Can I do this with d3.layout.hierarchy? Which d3.layout do I use for this?\n\nAll the *hierarchical layouts* available in D3 require a hierarchy, that is a structure where \nevery node has a single parent. Of course, some brutal hacking, e.g. duplication of partial \ntrees to convert multi-parent to many times the same with single parent, can be applied, but \nit might be a much better option to use a true *graph* layout mechanism, such as \nd3.layout.force, and apply the proper **constraints** to make it do what you want.\n\nHere we show a vertical force layout, which is constructed by applying a force layout to \nthe graph structure, plus *constraining* the nodes in the vertical direction (y)  depending \non their 'depth' a.k.a. 'level'.\n\n\n## Caveats\n\nThe 'level' is determined by traversing the graph and calculating the maximum depth for \neach node, where 'maximum depth' for a node is defined as the largest depth number assigned \nto any of its direct parents, incremented by one. The 'root' node(s) are assigned a depth \nof 1.\n\nThe traversal mechanism will run ad infinitum when the graph contains cycles, so you must \nensure that no cycles exist (as in real life, you can't be your own granpa ;-) )\n\n\n## Implementation Nodes, er, Notes\n\nAll constraints are applied in the force.on(\"tick\") event handler.\n\nWe also implement drag behaviour, which, like any other use of `node.fixed`, will add a .px/.py coordinate \npair for each node under the hood. To prevent any 'Crazy Ivan jumping' of nodes and other unexpected behaviour, we must ensure that \n.x/.y and .px/.py match once we are done in the force.tick handler, otherwise the \nnext mouseenter/drag will behave very oddly.\nIt is always a good rule to set both .px/.py and .x/.y when you update force nodes' x/y coordinates.\n\nThis example is derived off the D3 example `examples/force/force-collapsible.html`.\n\nThe code requires a D3 version which includes (pull request #803](https://github.com/mbostock/d3/pull/803).\n","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">\n    <title>Force-Directed Graph: Collapsible, Hierarchical</title>\n    <script src=\"readme.js\"></script> <!-- hide d3.v2.js from bl.ocks.org output by naming it readme.ls -->\n    <style type=\"text/css\">\n\ncircle.node {\n  cursor: pointer;\n  stroke: #000;\n  stroke-width: .5px;\n}\n\nline.link {\n  fill: none;\n  stroke: #9ecae1;\n  stroke-width: 1.5px;\n}\n\n    </style>\n  </head>\n  <body>\n    <div id=\"chart\"></div>\n\n<script type=\"text/javascript\" src=\"http://gerhobbelt.github.com/bl.ocks.org-hack/fixit.js\" ></script>\n\n    <script type=\"text/javascript\">\n\nvar width = 960,\n    height = 500,\n    node,\n    link,\n    root;\n\nvar force = d3.layout.force()\n    .on(\"tick\", tick)\n    .charge(function(d) {\n      return d._children ? -d.size / 100 : d.children ? -100 : -30;\n    })\n    .linkDistance(function(d) {\n      return d.target._children ? 50 : 30;\n    })\n    .size([width, height]);\n\nvar vis = d3.select(\"#chart\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\nd3.json(\"flare.json\", function(json) {\n  root = json;\n  root.fixed = true;\n  root.px = root.py = 0;\n  update();\n});\n\nfunction update(nodes) {\n  var nodes = flatten(root);\n  var links = d3.layout.hierarchy().links(nodes);\n\n  // make sure we set .px/.py as well as node.fixed will use those .px/.py to 'stick' the node to:\n  if (!root.px) {\n    // root have not be set / dragged / moved: set initial root position\n    root.px = root.x = width / 2;\n    root.py = root.y = circle_radius(root) + 2;\n  }\n\n  // Restart the force layout.\n  force\n      .nodes(nodes)\n      .links(links)\n      .start();\n\n  // Update the links…\n  link = vis.selectAll(\"line.link\")\n      .data(links, function(d) { return d.target.id; });\n\n  // Enter any new links.\n  link.enter().insert(\"line\", \".node\")\n      .attr(\"class\", \"link\")\n      .attr(\"x1\", function(d) { return d.source.x; })\n      .attr(\"y1\", function(d) { return d.source.y; })\n      .attr(\"x2\", function(d) { return d.target.x; })\n      .attr(\"y2\", function(d) { return d.target.y; });\n\n  // Exit any old links.\n  link.exit().remove();\n\n  // Update the nodes…\n  node = vis.selectAll(\"circle.node\")\n      .data(nodes, function(d) { return d.id; })\n      .style(\"fill\", color);\n\n  node.transition()\n      .attr(\"cy\", function(d) { return d.y; })\n      .attr(\"r\", function(d) { return circle_radius(d); });\n\n  // Enter any new nodes.\n  node.enter().append(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"cx\", function(d) { return d.x; })\n      .attr(\"cy\", function(d) { return d.y; })\n      .attr(\"r\", function(d) { return circle_radius(d); })\n      .style(\"fill\", color)\n      .on(\"click\", click)\n      .call(force.drag);\n\n  // Exit any old nodes.\n  node.exit().remove();\n}\n\nfunction tick() {\n  // Apply the constraints:\n  //\n  force.nodes().forEach(function(d) {\n    if (!d.fixed) {\n      var r = circle_radius(d) + 4, dx, dy, ly = 30;\n\n      // #1: constraint all nodes to the visible screen:\n      //d.x = Math.min(width - r, Math.max(r, d.x));\n      //d.y = Math.min(height - r, Math.max(r, d.y));\n\n      // #1.0: hierarchy: same level nodes have to remain with a 1 LY band vertically:\n      if (d.children || d._children) {\n        var py = 0;\n        if (d.parent) {\n          py = d.parent.y;\n        }\n        d.py = d.y = py + d.depth * ly + r;\n      }\n\n      // #1a: constraint all nodes to the visible screen: links\n      dx = Math.min(0, width - r - d.x) + Math.max(0, r - d.x);\n      dy = Math.min(0, height - r - d.y) + Math.max(0, r - d.y);\n      d.x += 2 * Math.max(-ly, Math.min(ly, dx));\n      d.y += 2 * Math.max(-ly, Math.min(ly, dy));\n      // #1b: constraint all nodes to the visible screen: charges ('repulse')\n      dx = Math.min(0, width - r - d.px) + Math.max(0, r - d.px);\n      dy = Math.min(0, height - r - d.py) + Math.max(0, r - d.py);\n      d.px += 2 * Math.max(-ly, Math.min(ly, dx));\n      d.py += 2 * Math.max(-ly, Math.min(ly, dy));\n\n      // #2: hierarchy means childs must be BELOW parents in Y direction:\n      if (d.parent) {\n        d.y = Math.max(d.y, d.parent.y + ly);\n        d.py = Math.max(d.py, d.parent.py + ly);\n      }\n    }\n  });\n\n\n  link.attr(\"x1\", function(d) { return d.source.x; })\n      .attr(\"y1\", function(d) { return d.source.y; })\n      .attr(\"x2\", function(d) { return d.target.x; })\n      .attr(\"y2\", function(d) { return d.target.y; });\n\n  node.attr(\"cx\", function(d) { return d.x; })\n      .attr(\"cy\", function(d) { return d.y; });\n}\n\n// Color leaf nodes orange, and packages white or blue.\nfunction color(d) {\n  return d._children ? \"#3182bd\" : d.children ? \"#c6dbef\" : \"#fd8d3c\";\n}\n\nfunction circle_radius(d) {\n  return d.children ? 4.5 : Math.sqrt(d.size) / 10;\n}\n\n// Toggle children on click.\nfunction click(d) {\n  if (d.children) {\n    d._children = d.children;\n    d.children = null;\n  } else {\n    d.children = d._children;\n    d._children = null;\n  }\n  update();\n}\n\n// Returns a list of all nodes under the root.\n//\n// Also assign each node a reasonable starting x/y position: we can do better than random placement since we're force-layout-ing a hierarchy!\nfunction flatten(root) {\n  var nodes = [], i = 0, depth = 0, level_widths = [1], max_width, max_depth = 1, kx, ky;\n\n  function recurse(node, parent, depth, x) {\n    if (node.children) {\n      var w = level_widths[depth + 1] || 0;\n      level_widths[depth + 1] = w + node.children.length;\n      max_depth = Math.max(max_depth, depth + 1);\n      node.size = node.children.reduce(function(p, v, i) {\n        return p + recurse(v, node, depth + 1, w + i);\n      }, 0);\n    }\n    if (!node.id) node.id = ++i;\n    node.parent = parent;\n    node.depth = depth;\n    if (!node.px) {\n      node.y = depth;\n      node.x = x;\n    }\n    nodes.push(node);\n    return node.size;\n  }\n\n  root.size = recurse(root, null, 0);\n\n  // now correct/balance the x positions:\n  max_width = 1;\n  for (i = level_widths.length; --i > 0; ) {\n    max_width = Math.max(max_width, level_widths[i]);\n  }\n  kx = (width - 20) / max_width;\n  ky = (height - 20) / max_depth;\n  for (i = nodes.length; --i >= 0; ) {\n    var node = nodes[i];\n    if (!node.px) {\n      node.y *= ky;\n      node.y += 10 + ky / 2;\n      node.x *= kx;\n      node.x += 10 + kx / 2;\n    }\n  }\n\n  return nodes;\n}\n\n    </script>\n  </body>\n</html>\n","filenames":[".gitignore","README.md","flare.json","index.html","readme.js","sync-d3.sh"]}},{"_index":"blockbuilder","_type":"blocks","_id":"37c28b6ff0e01f69b4cd","_score":0.40463912,"_source":{"userId":"emeeks","description":"d3.carto.layer.alias - d3.carto.map","created_at":"2014-07-15T23:13:03Z","updated_at":"2015-08-29T14:04:00Z","api":["d3.carto.map","d3.select","d3.carto.layer.tile","d3.carto.layer.geojson","d3.carto.layer.topojson","d3.carto.layer.csv","d3.carto.layer.featureArray"],"colors":["#ffc0cb","#ff0000","#4682b4","#0000ff","#ffffff","#000000","#e0e0d1","#a52a2a","#008000","#808080"],"readme":"Using d3.carto.layer with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nEach d3.carto.layer is defined and then added to the map using map.addCartoLayer. You can access the added layers using map.layers(). Each layer fires a \"load\" event once successfully added to the map.\n\nThis example uses d3.carto.layer.layerType() aliases like d3.carto.layer.tile() and d3.carto.layer.topojson().","code":"<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>d3.carto.map - d3.carto.layer.alias</title>\n  <meta charset=\"utf-8\" />\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"d3map.css\" />\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"example.css\" />\n</head>\n<style>\n  html,body {\n    height: 100%;\n    width: 100%;\n    margin: 0;\n  }\n\n  #map {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n  }\n\n</style>\n<script>\n    function makeSomeMaps() {\n    map = d3.carto.map();\n\n    d3.select(\"#map\").call(map);\n\n    tileLayer = d3.carto.layer.tile();\n    tileLayer\n    .path(\"examples.map-zgrqqx0w\")\n    .label(\"Base\")\n    .on(\"load\", recenter);\n\n    geojsonLayer = d3.carto.layer.geojson();\n    geojsonLayer\n    .path(\"http://bl.ocks.org/emeeks/raw/c970c9ee3e242e90004b/world.geojson\")\n    .label(\"GeoBorders\")\n    .cssClass(\"countryborders\")\n    .renderMode(\"canvas\")\n    .on(\"load\", createFeatureLayer);\n    \n    topojsonLayer = d3.carto.layer.topojson();\n    topojsonLayer\n    .path(\"http://bl.ocks.org/emeeks/raw/c970c9ee3e242e90004b/sample_routes.topojson\")\n    .label(\"TopoRoutes\")\n    .cssClass(\"roads\")\n    .renderMode(\"svg\")\n    .on(\"load\", function() {console.log(\"load topojson\")});\n\n    csvLayer = d3.carto.layer.csv();\n    csvLayer\n    .type(\"csv\")\n    .path(\"http://bl.ocks.org/emeeks/raw/c970c9ee3e242e90004b/sample_points.csv\")\n    .label(\"CSV Points\")\n    .cssClass(\"pinkcircle\")\n    .renderMode(\"svg\")\n    .markerSize(3)\n    .x(\"x\")\n    .y(\"y\")\n    .on(\"load\", changeMarkers);\n\n    map.addCartoLayer(tileLayer);\n    map.addCartoLayer(topojsonLayer);\n    map.addCartoLayer(geojsonLayer);\n    map.addCartoLayer(csvLayer);\n\n    function recenter() {\n      map.centerOn([-0.1275,51.507],\"latlong\",5000);\n    }\n\n    function changeMarkers() {\n          csvLayer.g().selectAll(\"circle\").remove();\n\n          csvLayer.g().selectAll(\"g.marker\")\n            .append(\"rect\")\n            .attr(\"class\", \"bluesquare\")\n            .attr(\"height\", 5)\n            .attr(\"width\",5)\n            .attr(\"x\",-2.5)\n            .attr(\"y\",-2.5);\n    }\n    \n    function createFeatureLayer() {\n      var featuresArray = [];\n      var mapLayers = map.layers();\n      mapLayers.forEach(function (layer) {\n        if (layer.label() == \"GeoBorders\") {\n          featuresArray = layer.features();\n        }\n      })\n     shortNameCountries = featuresArray.filter(function(d) {return d.properties.name.length < 7})\n\n    featureLayer = d3.carto.layer.featureArray();\n    featureLayer\n    .features(shortNameCountries)\n    .label(\"Feature Array\")\n    .cssClass(\"halffilledcountries\")\n    .renderMode(\"svg\")\n    .on(\"load\", function(){console.log(\"load featurearray\")}); \n    \n    map.addCartoLayer(featureLayer);\n\n    }\n\n  }\n\n</script>\n<body onload=\"makeSomeMaps()\">\n<div id=\"map\"></div>\n<footer>\n<script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\" type=\"text/javascript\"></script>\n<script src=\"http://d3js.org/topojson.v1.min.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://d3js.org/d3.geo.projection.v0.min.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://bl.ocks.org/emeeks/raw/f3105fda25ff785dc5ed/tile.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://bl.ocks.org/emeeks/raw/f3105fda25ff785dc5ed/d3.quadtiles.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://bl.ocks.org/emeeks/raw/f3105fda25ff785dc5ed/d3.geo.raster.js\" type=\"text/javascript\">\n</script>\n<script src=\"https://rawgit.com/emeeks/d3-carto-map/master/d3.carto.map.js\" type=\"text/javascript\">\n</script>\n</footer>\n</body>\n</html>","filenames":["d3map.css","example.css","index.html","readme.md","thumbnail.png"],"thumb":"42df0a0373f81685a6e7fbe85f82470e09a23845"}},{"_index":"blockbuilder","_type":"blocks","_id":"a726210cbc439b969f02","_score":0.3880077,"_source":{"userId":"emeeks","description":"d3.carto.minimap - d3.carto.map","created_at":"2014-07-17T01:42:49Z","updated_at":"2015-08-29T14:04:05Z","api":["d3.carto.map","d3.select","d3.carto.minimap","d3.carto.minimap.map","d3.carto.layer"],"colors":["#ffc0cb","#ff0000","#4682b4","#0000ff","#ffffff","#000000","#ffff00","#d2b48c","#008000","#e0e0d1","#a52a2a","#808080"],"readme":"Using d3.carto.minimap with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nDrag the main map around and zoom in and zoom out to see the bounds change in the minimap.\n\nThe minimap creates its own d3.carto.map and, with minimap.tandem() will take the layers from the main map and recreate them in the minimap.","code":"<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>d3.carto.map - d3.carto.minimap</title>\n  <meta charset=\"utf-8\" />\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"d3map.css\" />\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"example.css\" />\n</head>\n<style>\n  html,body {\n    height: 100%;\n    width: 100%;\n    margin: 0;\n  }\n\n  #map {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n  }\n  \n  #minimap {\n        height: 25%;\n        width: 25%;\n        bottom: 5%;\n        left: 5%;\n        position: absolute;\n        background: red;\n        border:yellow 1px solid;\n        z-index: 1;\n      }\n\n</style>\n<script>\n    function makeSomeMaps() {\n\n        var map = d3.carto.map();\n        d3.select(\"#map\").call(map);\n        \n        var minimap = d3.carto.minimap();\n        d3.select(\"#minimap\").call(minimap);\n\n        //Link the minimap to the full-sized map\n        minimap.tandem(map);\n\n        //Change the default scale of the minimap by accessing the d3.carto.map that it creates with d3.carto.minimap.map()\n        minimap.map().setScale(1);\n\n        var tileLayer = d3.carto.layer()\n          .type(\"tile\")\n          .path(\"examples.map-zgrqqx0w\")\n          .label(\"Base\")\n          .on(\"load\", recenter);\n\n        var geojsonLayer = d3.carto.layer()\n          .type(\"geojson\")\n          .path(\"http://bl.ocks.org/emeeks/raw/c970c9ee3e242e90004b/world.geojson\")\n          .label(\"GeoBorders\")\n          .cssClass(\"countryborders\")\n          .renderMode(\"canvas\")\n          .on(\"load\", createFeatureLayer);\n\n        var topojsonLayer = d3.carto.layer()\n          .type(\"topojson\")\n          .path(\"http://bl.ocks.org/emeeks/raw/c970c9ee3e242e90004b/sample_routes.topojson\")\n          .label(\"TopoRoutes\")\n          .cssClass(\"roads\")\n          .renderMode(\"canvas\");\n\n        var csvLayer = d3.carto.layer()\n          .type(\"csv\")\n          .path(\"http://bl.ocks.org/emeeks/raw/c970c9ee3e242e90004b/sample_points.csv\")\n          .label(\"CSV Points\")\n          .cssClass(\"pinkcircle\")\n          .renderMode(\"svg\")\n          .markerSize(2)\n          .x(\"x\")\n          .y(\"y\")\n          .on(\"load\", changeMarkers);\n\n        var xyLayer = d3.carto.layer()\n          .type(\"xyarray\")\n          .features([{x: 5, y: 40},{x: 5, y: 50}])\n          .label(\"XY Array\")\n          .cssClass(\"greencircle\")\n          .renderMode(\"svg\")\n          .markerSize(4)\n          .x(\"x\")\n          .y(\"y\");\n\n        map.addCartoLayer(tileLayer);\n        map.addCartoLayer(topojsonLayer);\n        map.addCartoLayer(geojsonLayer);\n        map.addCartoLayer(csvLayer);\n        map.addCartoLayer(xyLayer);\n\n        function recenter() {\n          map.setScale(6)\n          map.centerOn([6,45.507],\"latlong\");\n        }\n\n        function changeMarkers() {\n          csvLayer.g().selectAll(\"circle\").remove();\n\n          csvLayer.g().selectAll(\"g.marker\")\n            .append(\"rect\")\n            .attr(\"class\", \"bluesquare\")\n            .attr(\"height\", 5)\n            .attr(\"width\",5)\n            .attr(\"x\",-2.5)\n            .attr(\"y\",-2.5);\n\n        }\n\n\n        function createFeatureLayer() {\n          var featuresArray = [];\n          var mapLayers = map.layers();\n          mapLayers.forEach(function (layer) {\n            if (layer.label() == \"GeoBorders\") {\n              featuresArray = layer.features();\n            }\n          })\n\n          var shortNameCountries = featuresArray.filter(function(d) {\n            return d.properties.name.length < 7;\n          });\n\n          var featureLayer = d3.carto.layer()\n            .type(\"featurearray\")\n            .features(shortNameCountries)\n            .label(\"Feature Array\")\n            .cssClass(\"halffilledcountries\")\n            .renderMode(\"svg\");\n\n          map.addCartoLayer(featureLayer);\n\n        }\n\n      }\n\n</script>\n<body onload=\"makeSomeMaps()\">\n<div id=\"map\"></div>\n<div id=\"minimap\"></div>\n<footer>\n<script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\" type=\"text/javascript\"></script>\n<script src=\"http://d3js.org/topojson.v1.min.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://d3js.org/d3.geo.projection.v0.min.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://bl.ocks.org/emeeks/raw/f3105fda25ff785dc5ed/tile.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://bl.ocks.org/emeeks/raw/f3105fda25ff785dc5ed/d3.quadtiles.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://bl.ocks.org/emeeks/raw/f3105fda25ff785dc5ed/d3.geo.raster.js\" type=\"text/javascript\">\n</script>\n<script src=\"https://rawgit.com/emeeks/d3-carto-map/master/d3.carto.map.js\" type=\"text/javascript\">\n</script>\n</footer>\n</body>\n</html>","filenames":["d3map.css","example.css","index.html","readme.md","thumbnail.png"],"thumb":"cded19986f99c2edd40dc2d245e9f1754ad7f836"}},{"_index":"blockbuilder","_type":"blocks","_id":"0d69f4a8c717d5548977","_score":0.38783303,"_source":{"userId":"emeeks","description":"d3.carto.layer - d3.carto.map","created_at":"2014-07-14T04:42:59Z","updated_at":"2015-08-29T14:03:57Z","api":["d3.carto.map","d3.select","d3.carto.layer"],"colors":["#ffc0cb","#ff0000","#4682b4","#0000ff","#ffffff","#000000","#e0e0d1","#a52a2a","#008000","#808080"],"readme":"Using d3.carto.layer with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nEach d3.carto.layer is defined and then added to the map using map.addCartoLayer. You can access the added layers using map.layers(). Each layer fires a \"load\" event once successfully added to the map.\n","code":"<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>d3.carto.map - d3.carto.layer</title>\n  <meta charset=\"utf-8\" />\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"d3map.css\" />\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"example.css\" />\n</head>\n<style>\n  html,body {\n    height: 100%;\n    width: 100%;\n    margin: 0;\n  }\n\n  #map {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n  }\n\n</style>\n<script>\n  function makeSomeMaps() {\n    map = d3.carto.map();\n\n    d3.select(\"#map\").call(map);\n\n    tileLayer = d3.carto.layer();\n    tileLayer\n    .type(\"tile\")\n    .path(\"examples.map-zgrqqx0w\")\n    .label(\"Base\")\n    .on(\"load\", recenter);\n\n    geojsonLayer = d3.carto.layer();\n    \n    geojsonLayer\n    .type(\"geojson\")\n    .path(\"http://bl.ocks.org/emeeks/raw/c970c9ee3e242e90004b/world.geojson\")\n    .label(\"GeoBorders\")\n    .cssClass(\"countryborders\")\n    .renderMode(\"canvas\")\n    .on(\"load\", createFeatureLayer);\n    \n    topojsonLayer = d3.carto.layer();\n    topojsonLayer\n    .type(\"topojson\")\n    .path(\"http://bl.ocks.org/emeeks/raw/c970c9ee3e242e90004b/sample_routes.topojson\")\n    .label(\"TopoRoutes\")\n    .cssClass(\"roads\")\n    .renderMode(\"canvas\")\n    .on(\"load\", function() {console.log(\"load topojson\")});\n\n    csvLayer = d3.carto.layer();\n    csvLayer\n    .type(\"csv\")\n    .path(\"http://bl.ocks.org/emeeks/raw/c970c9ee3e242e90004b/sample_points.csv\")\n    .label(\"CSV Points\")\n    .cssClass(\"pinkcircle\")\n    .renderMode(\"svg\")\n    .markerSize(3)\n    .x(\"x\")\n    .y(\"y\")\n    .on(\"load\", changeMarkers);\n\n    xyLayer = d3.carto.layer();\n    xyLayer\n    .type(\"xyarray\")\n    .features([{x: 5, y: 40},{x: 5, y: 50}])\n    .label(\"XY Array\")\n    .cssClass(\"greencircle\")\n    .renderMode(\"svg\")\n    .markerSize(30)\n    .x(\"x\")\n    .y(\"y\")\n    .on(\"load\", function(){console.log(\"load xyarray\")});\n\n    map.addCartoLayer(tileLayer);\n    map.addCartoLayer(topojsonLayer);\n    map.addCartoLayer(geojsonLayer);\n    map.addCartoLayer(csvLayer);\n    map.addCartoLayer(xyLayer);\n\n    function recenter() {\n      map.centerOn([-0.1275,51.507],\"latlong\",5000);\n    }\n\n    function changeMarkers() {\n          csvLayer.g().selectAll(\"circle\").remove();\n\n          csvLayer.g().selectAll(\"g.marker\")\n            .append(\"rect\")\n            .attr(\"class\", \"bluesquare\")\n            .attr(\"height\", 5)\n            .attr(\"width\",5)\n            .attr(\"x\",-2.5)\n            .attr(\"y\",-2.5);\n    }\n    \n    function createFeatureLayer() {\n      var featuresArray = [];\n      var mapLayers = map.layers();\n      mapLayers.forEach(function (layer) {\n        if (layer.label() == \"GeoBorders\") {\n          featuresArray = layer.features();\n        }\n      })\n     shortNameCountries = featuresArray.filter(function(d) {return d.properties.name.length < 7})\n\n    featureLayer = d3.carto.layer();\n    featureLayer\n    .type(\"featurearray\")\n    .features(shortNameCountries)\n    .label(\"Feature Array\")\n    .cssClass(\"halffilledcountries\")\n    .renderMode(\"svg\")\n    .on(\"load\", function(){console.log(\"load featurearray\")}); \n    \n    map.addCartoLayer(featureLayer);\n\n    }\n\n  }\n</script>\n<body onload=\"makeSomeMaps()\">\n<div id=\"map\"></div>\n<footer>\n<script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\" type=\"text/javascript\"></script>\n<script src=\"http://d3js.org/topojson.v1.min.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://d3js.org/d3.geo.projection.v0.min.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://d3js.org/colorbrewer.v1.min.js\"></script>\n<script src=\"http://bl.ocks.org/emeeks/raw/f3105fda25ff785dc5ed/tile.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://bl.ocks.org/emeeks/raw/f3105fda25ff785dc5ed/d3.quadtiles.js\" type=\"text/javascript\">\n</script>\n<script src=\"http://bl.ocks.org/emeeks/raw/f3105fda25ff785dc5ed/d3.geo.raster.js\" type=\"text/javascript\">\n</script>\n<script src=\"https://rawgit.com/emeeks/d3-carto-map/master/d3.carto.map.js\" type=\"text/javascript\">\n</script>\n</footer>\n</body>\n</html>","filenames":["d3map.css","example.css","index.html","readme.md","thumbnail.png"],"thumb":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"}},{"_index":"blockbuilder","_type":"blocks","_id":"ae365cfb13ad972c65f4","_score":0.3851704,"_source":{"userId":"cool-Blue","description":"self sorting nodes in d3 fdg III","created_at":"2015-08-30T18:26:22Z","updated_at":"2015-09-01T19:16:11Z","api":["d3.select","d3.format","d3.scale.linear","d3.layout.force","d3.max","d3.geom.quadtree","d3.range","d3.scale.category10"],"colors":["#cccccc","#ffa500","#d2b48c","#0000ff","#000000","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf"],"readme":"## Force Directed Graph with self sorting nodes  \n  The nodes arrange themselves by size, with the larger nodes migrating toward the center.\n### Features  \n  - **_<a id=\"metrics\">Metrics display and inputs</a>_**  \n  The _metrics panel_ across the top of the svg element gives a live display of the layout state.  The inputs on the left allow for the number of nodes and the force gravity and the friction to be adjusted live.  The current `alpha` value for the layout is displayed along with instantaneous and averaged tick time and the average calculation rate of the layout.  Changing any of the inputs re-starts the layout. \n  - _**<a id=\"gravity\">Accelerated annealing</a>**_  \n  The annealing calc is done every tick but, until alpha drops below 0.05, the viz is only updated every nth tick (n is currently 4).  This delivers significant reductions in the time to reach equilibrium (roughly a factor of 2). \n  - **_<a id=\"force\">Force dynamics</a>_**  \n  The force dynamics are a function of alpha, with two phases.  The initial phase has zero charge, low gravity and low damping.  This is designed to maximise mixing and sorting.  The second phase has a higher gravity and a large, negative charge and much higher damping, this is designed to clean up and stabilise the presentation of the nodes. \n  - **_<a id=\"collisions\">Collisions between nodes</a>_**  \n  Based on [this](http://bl.ocks.org/mbostock/3231298) example but enhanced to sort the radial position of the nodes based on size, with larger nodes closer to the center.  Every collision is used as an opportunity to correct the relative positions. If they are out of position then the radial ordinates of the colliding nodes (in polar coordinates) are swapped.  The sorting efficiency is therefore reliant on good mixing in the collisions.  In order to maximise the mixing, the nodes are all created at the same point in the center of the graph.  When the nodes are swapped, the velocity of the bigger node is preserved while the smaller node is accelerated.  Thus, the sorting efficiency is enhanced because the smaller nodes are flung out from the collision point.  The mass is calculated assuming the nodes are spheres, using  r<sup>3</sup>, and the rebounds calculated according to relative \"mass\".  \n\n### d3 features  used\n  1.  [d3.layout.force](https://github.com/mbostock/d3/wiki/API-Reference#force)\n  2.  [Ordinal Scales](https://github.com/mbostock/d3/wiki/Ordinal-Scales)\n  1.  [d3.format](https://github.com/mbostock/d3/wiki/Formatting#d3_format)\n  1.  [d3.range](https://github.com/mbostock/d3/wiki/Arrays#d3_range)\n  1.  [d3.geom.quadtree](https://github.com/mbostock/d3/wiki/Quadtree-Geom)  \n  ","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n    body {\n        /*margin: 200px 500px 100px 500px;*/\n        /*font-size: 10px;*/\n    }\n    #inputs {\n        display: inline-block;\n        margin: 0 0 0 0.5em;\n    }\n\n    #panel {\n        display: inline-block;\n        margin: 0 0 0 100px;\n        border: none;\n        box-sizing: border-box;\n        background-color: black;\n    }\n\n    #metrics {\n        display: inline-block;\n    }\n\n    label, input {\n        /*font-size: 10px;*/\n        text-align: left;\n        width: 3.5em;\n        color: orange;\n        /*padding-left: 1em;*/\n        background-color: black;\n        outline: none;\n        border: none;\n    }\n\n    circle {\n        stroke: black;\n        /*stroke: #ccc;*/\n        /*stroke-opacity: 0.5;*/\n        /*stroke-width: 6;*/\n    }\n\n    svg {\n        display: block;\n        overflow: visible;\n        border: none;\n        background: black;\n        margin: 0 100px 0 100px;\n    }\n\n    text {\n        text-anchor: middle;\n    }\n\n    rect {\n        stroke: #ccc;\n    }\n\n</style>\n<body>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n<!--<script src=\"d3 CB.js\"></script>-->\n<script\n    src=\"https://cdnjs.cloudflare.com/ajax/libs/tinycolor/1.1.2/tinycolor.min.js\"></script>\n<script src=\"https://gitcdn.xyz/repo/cool-Blue/d3-lib/master/filters/shadow.js\"></script>\n<script\n    src=\"https://gitcdn.xyz/repo/cool-Blue/d3-lib/master/elapsedTime/elapsed-time-2.0.js\"></script>\n<script>\n    !(function() {\n        var inputs    = d3.select(\"body\").append(\"div\")\n                .attr(\"id\", \"metrics\")\n                .append(\"div\").attr({id: \"panel\"})\n                .append(\"div\").attr({id: \"inputs\"}),\n            nodeCount = inputs.append(\"label\")\n                .attr(\"for\", \"nodeCount\")\n                .text(\"nodes: \")\n                .append(\"input\")\n                .attr({\n                    id       : \"nodeCount\",\n                    class    : \"numIn\",\n                    type     : \"number\",\n                    min      : \"100\",\n                    max      : \"5,000\",\n                    step     : \"100\",\n                    inputmode: \"numeric\"\n                });\n\n        var elapsedTime = outputs.ElapsedTime(\"#panel\", {\n                border : 0, margin: 0, \"box-sizing\": \"border-box\",\n                padding: \"0 0 0 3px\", background: \"black\", \"color\": \"orange\"\n            })\n                .message(function(value) {\n                    var this_lap = this.lap().lastLap, aveLap = this.aveLap(this_lap)\n                    return 'q:' + d3.format(\" >4,.0f\")(force.charge())\n                        + '\\talpha:' + d3.format(\" >7,.3f\")(value)\n                        + '\\ttick time:' + d3.format(\" >8,.4f\")(this_lap)\n                        + ' (' + d3.format(\" >4,.3f\")(this.aveLap(this_lap)) + ')'\n                        + '\\tframe rate:' + d3.format(\" >5,.1f\")(1 / aveLap) + \" fps\"\n                        + '\\ttime:' + d3.format(\" >4,.1f\")(this.t()) + \" sec\"\n                }),\n\n            width       = 960 - 200,\n            height      = 500 - elapsedTime.selection.node().clientHeight,\n            padding     = 0, // separation between nodes\n            maxRadius   = 5;\n\n        elapsedTime.consoleOn = false;\n\n        var n0 = 500,\n            m  = 1,\n            c  = 10,\n            g  = 0.01, g2 = 0.05,\n            f1 = 0.5, f2 = 0.001,\n            q2 = -2000;\n\n        var x = d3.scale.linear()\n                .domain([-width / 2, width / 2])\n                .range([0, width]),\n            y = d3.scale.linear()\n                .domain([-height / 2, height / 2])\n                .range([height, 0]);\n\n        var tick  = (function() {\n                var phase = -1, stage1 = true;\n                function tick(e) {\n                    viz.circle.each(viz.collide(e.alpha));\n                    if(e.alpha < 0.02 || !(phase = ++phase % (force.nodes().length >1000 ? 4 : 2))) {\n                        elapsedTime.mark(e.alpha);\n                        viz.circle.attr({\n                            cx: function(d) {\n                                return d.x;\n                            },\n                            cy: function(d) {\n                                return d.y;\n                            }\n                        });\n                    }\n                    if(stage1 && e.alpha < 0.07) {\n                        console.log(\"stage2\")\n                        force.friction(f2)\n                            .charge(q2)\n                            .gravity(g2)\n                            .start().alpha(e.alpha);\n                        stage1 = false;\n                    }\n//                    force.alpha(e.alpha / 0.99 * 0.99)\n                }\n\n                tick.reset = function() {\n                    stage1 = true;\n                };\n                return tick;\n            })(),\n            force = d3.layout.force()\n                .size([width, height])\n                .gravity(g)\n                .charge(0)\n                .friction(f1)\n                .on(\"tick\", tick)\n                .on(\"start\", function() {\n                    elapsedTime.start(1000);\n                    tick.reset();\n                    console.log(\"force start\")\n                });\n\n        var svg    = d3.select(\"body\").append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n                .append(\"g\"),\n            bubble = Bubble(svg);\n\n        nodeCount\n            .property(\"value\", n0)\n            .on(\"change\", function() {\n                viz = update(force, this.value, padding);\n                this.blur();\n            });\n\n        elapsedTime.selection.style({\n            width: (width\n            - parseFloat(window.getComputedStyle(d3.select(\"#inputs\").node()).getPropertyValue(\"width\"))\n            - parseFloat(window.getComputedStyle(d3.select(\"#inputs\").node()).getPropertyValue(\"margin-left\")))\n            + \"px\"\n        });\n\n        var viz = update(force, n0, padding);\n\n        function Collide(nodes, padding) {\n            // Resolve collisions between nodes.\n            var maxRadius = d3.max(nodes, function(d) {\n                return d.radius\n            });\n            return function collide(alpha) {\n                var quadtree = d3.geom.quadtree(nodes), hit = false;\n                return function c(d) {\n                    var r   = d.radius + maxRadius + padding,\n                        nx1 = d.x - r,\n                        nx2 = d.x + r,\n                        ny1 = d.y - r,\n                        ny2 = d.y + r;\n                    quadtree.visit(function v(quad, x1, y1, x2, y2) {\n                        var possible = !(x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1);\n                        if(quad.point && (quad.point !== d) && possible) {\n                            var x  = d.x - quad.point.x,\n                                y  = d.y - quad.point.y,\n                                l  = (Math.sqrt(x * x + y * y)),\n                                r  = (d.radius + quad.point.radius + padding),\n                                mq = Math.pow(quad.point.radius, 3),\n                                m  = Math.pow(d.radius, 3);\n                            if(hit = (l < r)) {\n                                if(l == 0) {\n                                    for(var j = 3; l == 0; j--) {\n                                        x = (Math.random() - 0.5);\n                                        y = (Math.random() - 0.5);\n                                        l = Math.sqrt(x * x + y * y);\n                                    }\n                                    d.x += x/2;\n                                    d.y += y/2;\n                                    quad.point.x += x/2;\n                                    quad.point.y += y/2;\n                                }\n                                //move the nodes away from each other along the radial (normal) vector\n                                //taking relative size into consideration, the sign is already established\n                                //in calculating x and y\n                                l = (r - l) / l * (1 + alpha);\n\n                                // if the nodes are in the wrong radial order for there size, swap radius ordinate\n                                var rel = m / mq, bigger = rel > 1,\n                                    rad = d.r / quad.point.r, farther = rad > 1;\n                                if(bigger && farther || !bigger && !farther) {\n                                    var d_r = d.r;\n                                    d.r = quad.point.r;\n                                    quad.point.r = d_r;\n                                    d_r = d.pr;\n                                    d.pr = quad.point.pr;\n                                    quad.point.pr = d_r;\n                                }\n                                // move nodes apart but preserve the velocity of the biggest one\n                                // and accelerate the smaller one\n                                d.x += (x *= l);\n                                d.y += (y *= l);\n                                d.px += x * bigger || -alpha;\n                                d.py += y * bigger || -alpha;\n                                quad.point.x -= x;\n                                quad.point.y -= y;\n                                quad.point.px -= x * !bigger || -alpha;\n                                quad.point.py -= y * !bigger || -alpha;\n                            }\n                        }\n                        return !possible;\n                    });\n                };\n            }\n        }\n\n        function initNodes(force, n, padding, custom) {\n            var rMax = Math.pow(n0 / n, 0.5) * maxRadius;\n            force.stop()\n                .nodes(d3.range(n).map(function() {\n                var layer = Math.floor(Math.random() * m),\n                    u = Math.random(),\n                    v     = -Math.log(u);\n                return {\n                    radius: Math.pow(v,.8) * rMax,\n                    color : Math.floor(u * c),\n                    x     : x(0),\n                    y     : y(0),\n                    get v() {\n                        var d = this;\n                        return {\n                            x: x.invert(d.x - d.px || d.x || 0),\n                            y: y.invert(d.y - d.py || d.y || 0)\n                        }\n                    },\n                    get polar() {\n                        var xx = x.invert(this.x), yy = y.invert(this.y);\n                        return [Math.sqrt(xx * xx + yy * yy), Math.atan2(yy, xx)]\n                    },\n                    set polar(p) {\n                        var r = p[0], theta = p[1];\n                        return [this.x = x(r * Math.cos(theta)), this.y = y(r\n                            * Math.sin(theta))]\n                    },\n                    get r() {\n                        var xx = x.invert(this.x), yy = y.invert(this.y);\n                        return Math.sqrt(xx * xx + yy * yy);\n                    },\n                    get theta() {\n                        var xx = x.invert(this.x), yy = y.invert(this.y);\n                        return Math.atan2(yy, xx)\n                    },\n                    set r(_) {\n                        var theta = this.theta;\n                        return [this.x = x(_ * Math.cos(theta)), this.y = y(_\n                            * Math.sin(theta))]\n                    },\n                    set theta(_) {\n                        var r = this.r;\n                        return [this.x = x(r * Math.cos(_)), this.y = y(r * Math.sin(_))]\n                    },\n\n                    get pr() {\n                        var xx = x.invert(this.px), yy = y.invert(this.py);\n                        return Math.sqrt(xx * xx + yy * yy);\n                    },\n                    get ptheta() {\n                        var xx = x.invert(this.px), yy = y.invert(this.py);\n                        return Math.atan2(yy, xx)\n                    },\n                    set pr(_) {\n                        var theta = this.ptheta;\n                        return [this.px = x(_ * Math.cos(theta)), this.py = y(_\n                            * Math.sin(theta))]\n                    },\n                    set ptheta(_) {\n                        var r = this.pr;\n                        return [this.px = x(r * Math.cos(_)), this.py = y(r\n                            * Math.sin(_))]\n                    },\n                };\n            }))\n                .gravity(custom.g || Math.pow(n0 / n, 1.2) * g)\n                .friction(custom.f || f1)\n                .charge(0);\n//            window.setTimeout(function(){\n                force.start()\n//            }, 20)\n\n            return Collide(force.nodes(), padding);\n        }\n\n        function update(force, n, padding, custom) {\n            elapsedTime.start(1000);\n\n            return {\n                collide: initNodes(force, n, padding, custom || {}),\n                circle : (function() {\n                    var update = svg.selectAll(\"circle\")\n                        .data(force.nodes());\n                    update.enter().append(\"circle\");\n                    update.exit().remove();\n                    update.attr(\"r\", function(d) {\n                        return d.radius;\n                    })\n                        .call(bubble.call)\n                        .call(force.drag);\n                    return update;\n                })()\n            };\n        }\n\n        function Bubble(svg) {\n            var colors = d3.range(20).map(d3.scale.category10()).map(function(d) {\n                return filters.sphere(svg, d, 1)\n            });\n            return {\n                call: function(selection) {\n                    selection.style(\"fill\", function(d) {\n                        return colors[d.color]\n                    })\n                },\n                map : function(d, i, data) {\n                    d.fill = colors[~~(Math.random() * 20)];\n                },\n                fill: function(d) {\n                    return d.fill\n                }\n            }\n        };\n        function myName(args) {\n            return /function\\s+(\\w*)\\(/.exec(args.callee)[1];\n        }\n    })()\n</script>\n</body>\n\n","filenames":["2015-08-31_22-31-57.png","index.html","readme.md","thumbnail.png"],"thumb":"2c9401241a2d8ed4b2800e0b200f254b0ac85f7f"}},{"_index":"blockbuilder","_type":"blocks","_id":"04ebde07750d6fdd5d1a","_score":0.38382533,"_source":{"userId":"cool-Blue","description":"d3.js: force layout with self-referencing links","created_at":"2015-08-05T07:17:29Z","updated_at":"2015-09-28T15:58:04Z","api":["d3.svg.line","d3.scale.pow","d3.scale.log","d3.scale.category20","d3.geom.hull","d3.select","d3.scale.linear","d3.behavior.drag","d3.json","d3.layout.force","d3.timer"],"colors":["#cccccc","#555555","#ffffff","#333333","#00eeee","#33bbbb","#231f20","#939598","#58595b","#ff0000","#ffa500","#d2b48c","#008000","#b0c4de","#4682b4","#0000ff","#1f77b4","#aec7e8","#ff7f0e","#ffbb78","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5","#8c564b","#c49c94","#e377c2","#f7b6d2","#7f7f7f","#c7c7c7","#bcbd22","#dbdb8d","#17becf","#9edae5"],"readme":"# Experiment �� <a href=\"http://bl.ocks.org/3616279\" title=\"view this gist via bl.ocks.org\">?</a> <a href=\"http://bl.ocks.org/GerHobbelt\" title=\"view a list of all my gists at bl.ocks.org\">8</a>\n\nDerived from the D3.js example [force_cluster.html](https://github.com/mbostock/d3/blob/master/examples/force/force-cluster.html) and [gist 3104394](http://bl.ocks.org/3104394).\n\nFeatures\n========\n\n- all of [gist 3104394](http://bl.ocks.org/3104394) [@ github](https://gist.github.com/3104394)\n- showcases a tweaked 'miserables.json' file which includes 'circular links' i.e. links which connect node A to node A (~ self-reference)\n\nUsage\n-----\n\n* Slide the 'debug level' slider to see the various debug levels visually; the hospital curves are (top): force.alpha and (bottom) total x/y change squared: a measurement for the amount of movement of nodes in the graph. Note that the bottom curve is inverted, so that when both meet, you're getting close to done. :-)\n* Click on node to expand or collapse. When a node has 'bundled' outgoing links, the first click will expand only those (a.k.a. 2nd display mode / expand state = 1), the next click will then expand the group node itself.\n* Click on hull (which shows up when you expanded a group node) to collapse the group.\n* Drag node to move entire graph around.\n\nNotes\n-----\n\nThe ability to draw circular references is following the overall force design used here, \nwhere helper nodes (and ditto links) are used to produce the bezier-based links; \na self-reference is nothing but yet another nodeA -> helper -> nodeB link chain where\n'nodeB' just happens to be nodeA again.\n\nThis code uses two(2) d3.layout.force() forces: one to layout the original nodes (or their group node equivalent),\nthe second is used to layout all the helper nodes (which are only visible in debug modes 1 and 2): the latter are \nused to construct the bezier paths representing the links.\n\n","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <title>Clustered Network</title>\n    <script src=\"http://d3js.org/d3.v2.js\"></script>\n    <link href='http://fonts.googleapis.com/css?family=Gudea:700,400italic,400' rel='stylesheet' type='text/css'>\n    <style type=\"text/css\">\nsvg {\n  border: 1px solid #ccc;\n}\nbody {\n  font: 10px 'Gudea', sans-serif;\n}\ntext {\n  font-family: 'Gudea', sans-serif;\n  font-size: 9pt;\n}\ncircle.node {\n  fill: lightsteelblue;\n  stroke: #555;\n  stroke-width: 3px;\n}\ncircle.leaf {\n  stroke: #fff;\n  stroke-width: 1.5px;\n}\ncircle.link-expanded {\n  stroke: #555;\n  stroke-width: 3px;\n  stroke-dasharray: 2px 4px;\n}\ncircle.helper {\n  stroke-width: 0;\n  fill: #333;\n  opacity: 0.6;\n}\ncircle.center-of-mass {\n  fill: white;\n  stroke: red;\n  stroke-width: 5px;\n}\npath.hull {\n  fill: lightsteelblue;\n  fill-opacity: 0.3;\n}\npath.hlink {\n  stroke: #333;\n  stroke-opacity: 0.5;\n  fill: none;\n  pointer-events: none;\n}\npath.trace-alpha {\n  stroke: #0ee;\n  stroke-opacity: 0.8;\n  stroke-width: 1.5px;\n  fill: none;\n  pointer-events: none;\n}\npath.trace-c2 {\n  stroke: #3bb;\n  stroke-opacity: 0.8;\n  stroke-width: 1.5px;\n  fill: none;\n  pointer-events: none;\n}\nline.link {\n  stroke: red;\n  stroke-opacity: 0.7;\n  pointer-events: none;\n}\n    </style>\n  </head>\n  <body>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"controls\" visibility=\"hidden\">\n  <g visibility=\"visible\">\n    <rect x=\"0\" y=\"0.55\" opacity=\"0.6\" fill=\"#FFFFFF\" stroke=\"#231F20\" stroke-miterlimit=\"10\" width=\"192\" height=\"22\"/>\n    <text transform=\"matrix(1 0 0 1 4.5066 15.343)\"  >Debug level:</text>\n    <g id=\"slider-debug-level\">\n      <line id=\"slider-x-debug-level\" fill=\"none\" stroke=\"#939598\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"73.5\" y1=\"11.05\" x2=\"160.5\" y2=\"11.05\"/>\n      <rect id=\"sliderpos-debug-level\" x=\"77\" y=\"3.55\" fill=\"#58595B\" stroke=\"#231F20\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" width=\"4\" height=\"15\"/>\n            <text id=\"sliderval-debug-level\" transform=\"matrix(1 0 0 1 164.6638 15.343)\"  >?????</text>\n    </g>\n  </g>\n</svg>\n\n<script type=\"text/javascript\" src=\"http://gerhobbelt.github.com/bl.ocks.org-hack/fixit.js\" ></script>\n\n    <script type=\"text/javascript\">\nvar width = 960,        // svg width\n    height = 500,       // svg height\n    dr = 4,             // default point radius\n    off = 15,           // cluster hull offset\n    cycle_curvep = 0.5, // cyclic ~ self-referential links: determines the 'radius' of the bezier path constructed for the link\n    expand = {},        // expanded clusters\n    data, net, force1, force2, hullg, hull, linkg, helper_linkg, link, hlink, nodeg, helper_nodeg, node, hnode,\n    debug = 3,          // 0: disable, 1: all, 2: only force2 + curves, 3: curves only\n    alpha_trace = [], alpha_line, alpha_scale, debug_g,\n    c2_trace = [], c2_line, c2_scale, debug_g;\n\n    //for (var gn = 0; gn < 20; gn++) expand[gn] = 2;\n\nalpha_line = d3.svg.line()\n  .x(function(d, i) {\n    return i + 10;\n  })\n  .y(function(d, i) {\n    return d;\n  });\n\nalpha_scale = d3.scale.pow().exponent(-1.0).domain([5,.005]).range([10, height - 10]).clamp(true);\n\nc2_scale = d3.scale.log().domain([0.01, width * height]).range([10, height - 10]).clamp(true);\n\nc2_line = d3.svg.line()\n  .x(function(d, i) {\n    return i + 10;\n  })\n  .y(function(d, i) {\n    return d;\n  });\n\nvar curve = d3.svg.line()\n  .interpolate(\"cardinal-closed\")\n  .tension(.85);\n\nvar fill = d3.scale.category20();\n\nfunction noop() { return false; }\n\nfunction nodeid(n) {\n  return n.size > 0 ? \"_g_\" + n.group + \"_\" + n.expansion : n.name;\n}\n\nfunction linkid(l) {\n  var u = nodeid(l.source),\n      v = nodeid(l.target);\n  return u<v ? u+\"|\"+v : v+\"|\"+u;\n}\n\nfunction getGroup(n) { return n.group; }\n\nfunction cycleState(d) {\n  var g = d.group, s = expand[g] || 0;\n  // it's no use 'expanding the intergroup links only' for nodes which only have 1 outside link for real:\n  if (d.ig_link_count < 2)\n    s = (s ? 0 : 2);\n  else {\n    s++; s %= 3;\n  }\n  return expand[g] = s;\n}\n\n// constructs the network to visualize\nfunction network(data, prev) {\n  expand = expand || {};\n  var gm = {},    // group map\n      nm = {},    // node map\n      nml = {},   // node map for left-side 'link path helper nodes'\n      nmr = {},   // node map for right-side 'link path helper nodes'\n      nmc = {},   // node map for cyclic ~ self-referencing 'link path helper nodes'\n      nmimg = {}, // node map for cloned nodes for force2\n      lm = {},    // link maps - lm ~ lml-lmm-lmr\n      lml = {},\n      lmm = {},\n      lmr = {},\n      lmc = {},\n      gn = {},                  // previous group nodes\n      gc = {},                  // previous group centroids\n      nodes = [],               // output nodes\n      links = [],               // output links\n      helper_nodes = [],        // helper force graph nodes\n      helper_links = [];        // helper force graph links\n      helper_render_links = []; // helper force graph links\n  var k;\n\n  // process previous nodes for reuse or centroid calculation\n  if (prev) {\n    prev.nodes.forEach(function(n) {\n      var i = getGroup(n), o;\n      if (n.size > 0) {\n        gn[i] = n;\n        n.size = 0;\n        n.ig_link_count = 0;\n        n.link_count = 0;\n        n.first_link = null;\n        n.first_link_target = null;\n      } else {\n        o = gc[i] || (gc[i] = {x:0,y:0,count:0});\n        o.x += n.x;\n        o.y += n.y;\n        o.count += 1; // we count regular nodes here, so .count is a measure for the number of nodes in the group\n      }\n    });\n  }\n\n  // determine nodes\n  for (k=0; k<data.nodes.length; ++k) {\n    var n = data.nodes[k],\n        i = getGroup(n),\n        expansion = expand[i] || 0,\n        l = gm[i] || (gm[i]=gn[i]) || (gm[i]={group:i, size:0, nodes:[], ig_link_count:0, link_count:0, expansion: expansion}),\n        img;\n\n    // we need to create a NEW object when expansion changes from 0->1 for a group node\n    // in order to break the references from the d3 selections, so that the next time\n    // this group node will indeed land in the 'enter()' set\n    if (l.expansion != expansion) {\n      l = gn[i] = gm[i] = {group:l.group, x:l.x, y: l.y, size:l.size, nodes:l.nodes, ig_link_count:l.ig_link_count, link_count:l.link_count, expansion: expansion};\n    }\n\n    if (expansion == 2) {\n      // the node should be directly visible\n      nm[nodeid(n)] = n;\n      img = {ref: n, x: n.x, y: n.y, size: n.size || 0, fixed: 1, id: nodeid(n)};\n      nmimg[nodeid(n)] = img;\n      nodes.push(n);\n      helper_nodes.push(img);\n      if (gn[i]) {\n        // place new nodes at cluster location (plus jitter)\n        n.x = gn[i].x + Math.random();\n        n.y = gn[i].y + Math.random();\n      }\n    } else {\n      // the node is part of a collapsed cluster\n      if (l.size == 0) {\n        // if new cluster, add to set and position at centroid of leaf nodes\n        nm[nodeid(n)] = l;\n        l.size = 1;                     // hack to make nodeid() work correctly for the new group node\n        nm[nodeid(l)] = l;\n        img = {ref: l, x: l.x, y: l.y, size: l.size || 0, fixed: 1, id: nodeid(l)};\n        nmimg[nodeid(l)] = img;\n        l.size = 0;                     // undo hack\n        nmimg[nodeid(n)] = img;\n        nodes.push(l);\n        helper_nodes.push(img);\n        if (gc[i]) {\n          l.x = gc[i].x / gc[i].count;\n          l.y = gc[i].y / gc[i].count;\n        }\n      } else {\n        // have element node point to group node:\n        nm[nodeid(n)] = l; // l = shortcut for: nm[nodeid(l)];\n        nmimg[nodeid(n)] = nmimg[nodeid(l)];\n      }\n      l.nodes.push(n);\n    }\n    // always count group size as we also use it to tweak the force graph strengths/distances\n    l.size += 1;\n    n.group_data = l;\n    n.link_count = 0;\n    n.first_link = null;\n    n.first_link_target = null;\n  }\n\n  // determine links\n  for (k=0; k<data.links.length; ++k) {\n    var e = data.links[k],\n        u = getGroup(e.source),\n        v = getGroup(e.target),\n        rui, rvi, ui, vi, lu, rv, ustate, vstate, uimg, vimg,\n        i, ix,\n        l, ll, l_, lr;\n    if (u != v) {\n      gm[u].ig_link_count++;\n      gm[v].ig_link_count++;\n    }\n    ustate = expand[u] || 0;\n    vstate = expand[v] || 0;\n    // while d3.layout.force does convert link.source and link.target NUMERIC values to direct node references,\n    // it doesn't for other attributes, such as .real_source, so we do not use indexes in nm[] but direct node\n    // references to skip the d3.layout.force implicit links conversion later on and ensure that both .source/.target\n    // and .real_source/.real_target are of the same type and pointing at valid nodes.\n    rui = nodeid(e.source);\n    rvi = nodeid(e.target);\n    u = nm[rui];\n    v = nm[rvi];\n    if (u == v) {\n      // skip non-original links from node to same (A-A); they are rendered as 0-length lines anyhow. Less links in array = faster animation.\n      if (ustate < 2)\n        continue;\n\n      // self-referential 'links' are produced as 2 links+1 helper node; this is a generalized approach so we\n      // can support multiple self-referential links as thanks to the force layout\n      // those helpers will all be in different places, hence the link 'path' for each\n      // parallel link will be different.\n      ui = nodeid(u);\n      i = ui+\"|\"+ui+\"|\"+k;\n      l = lm[i] || (lm[i] = {source:u, target:u, size:0, distance: 0});\n      l.cyclic = true;\n      ix = i;\n      // link(u,v) ==> u -> lu -> u\n      lu = nmc[ix] || (nmc[ix] = data.helpers.cyclic[ix] || (data.helpers.cyclic[ix] = {ref: u, id: \"_ch_\" + ix, size: -1, link_ref: l, cyclic_helper: true}));\n      uimg = nmimg[ui];\n      l_ = lmc[ix] || (lmc[ix] = {g_ref: l, ref: e, id: \"c\"+ix, source:uimg, target: lu, real_source:u, size: 0, distance: 0, cyclic: true});\n      l.size += 1;\n      l_.size += 1;\n      continue;\n    }\n    // 'links' are produced as 3 links+2 helper nodes; this is a generalized approach so we\n    // can support multiple links between element nodes and/or groups, always, as each\n    // 'original link' gets its own set of 2 helper nodes and thanks to the force layout\n    // those helpers will all be in different places, hence the link 'path' for each\n    // parallel link will be different.\n    ui = nodeid(u);\n    vi = nodeid(v);\n    i = (ui < vi ? ui+\"|\"+vi : vi+\"|\"+ui);\n    l = lm[i] || (lm[i] = {source:u, target:v, size:0, distance: 0});\n    if (ustate == 1) {\n      ui = rui;\n    }\n    if (vstate == 1) {\n      vi = rvi;\n    }\n    ix = (ui < vi ? ui+\"|\"+vi+\"|\"+ustate+\"|\"+vstate : vi+\"|\"+ui+\"|\"+vstate+\"|\"+ustate);\n    ix = (ui < vi ? ui+\"|\"+vi : vi+\"|\"+ui);\n    // link(u,v) ==> u -> lu -> rv -> v\n    lu = nml[ix] || (nml[ix] = data.helpers.left[ix]  || (data.helpers.left[ix]  = {ref: u, id: \"_lh_\" + ix, size: -1, link_ref: l}));\n    rv = nmr[ix] || (nmr[ix] = data.helpers.right[ix] || (data.helpers.right[ix] = {ref: v, id: \"_rh_\" + ix, size: -1, link_ref: l}));\n    uimg = nmimg[ui];\n    vimg = nmimg[vi];\n    ll = lml[ix] || (lml[ix] = {g_ref: l, ref: e, id: \"l\"+ix, source:uimg, target:  lu, real_source:u, real_target:v, size:0, distance: 0, left_seg  : true});\n    l_ = lmm[ix] || (lmm[ix] = {g_ref: l, ref: e, id: \"m\"+ix, source:  lu, target:  rv, real_source:u, real_target:v, size:0, distance: 0, middle_seg: true});\n    lr = lmr[ix] || (lmr[ix] = {g_ref: l, ref: e, id: \"r\"+ix, source:  rv, target:vimg, real_source:u, real_target:v, size:0, distance: 0, right_seg : true});\n    l.size += 1;\n    ll.size += 1;\n    l_.size += 1;\n    lr.size += 1;\n\n    // these are only useful for single-linked nodes, but we don't care; here we have everything we need at minimum cost.\n    if (l.size == 1) {\n      u.link_count++;\n      v.link_count++;\n      u.first_link = l;\n      v.first_link = l;\n      u.first_link_target = v;\n      v.first_link_target = u;\n    }\n  }\n\n  for (k in lm) { links.push(lm[k]); }\n  for (k in lml) { helper_links.push(lml[k]); }\n  for (k in lmm) { helper_links.push(lmm[k]); helper_render_links.push(lmm[k]); }\n  for (k in lmr) { helper_links.push(lmr[k]); }\n  for (k in lmc) { helper_links.push(lmc[k]); helper_render_links.push(lmc[k]); }\n  for (k in nml) { helper_nodes.push(nml[k]); }\n  for (k in nmr) { helper_nodes.push(nmr[k]); }\n  for (k in nmc) { helper_nodes.push(nmc[k]); }\n  //for (k in nmc) { nodes.push(nmc[k]); }\n\n  return {nodes: nodes, links: links, helper_nodes: helper_nodes, helper_links: helper_links, helper_render_links: helper_render_links};\n}\n\nfunction convexHulls(nodes, offset) {\n  var hulls = {};\n\n  // create point sets\n  for (var k=0; k<nodes.length; ++k) {\n    var n = nodes[k];\n    if (n.size) continue;\n    var i = getGroup(n),\n        l = hulls[i] || (hulls[i] = []);\n    l.push([n.x - offset, n.y - offset]);\n    l.push([n.x - offset, n.y + offset]);\n    l.push([n.x + offset, n.y - offset]);\n    l.push([n.x + offset, n.y + offset]);\n  }\n\n  // create convex hulls\n  var hullset = [];\n  for (i in hulls) {\n    hullset.push({group: i, path: d3.geom.hull(hulls[i])});\n  }\n\n  return hullset;\n}\n\nfunction drawCluster(d) {\n  return curve(d.path); // 0.8\n}\n\n// these functions call init(); by declaring them here,\n// they don't have the old init() as a closure any more.\n// This should save us some memory and cycles when using\n// this in a long-running setting.\n\nfunction on_hull_click(d) {\n  if (debug == 1) console.log(\"node click\", d, arguments, this, expand[d.group]);\n  // clicking on 'path helper nodes' shouln't expand/collapse the group node:\n  if (d.size < 0)\n    return;\n  cycleState(d);\n  init();\n}\n\nfunction on_node_click(d) {\n  if (debug == 1) console.log(\"node click\", d, arguments, this, expand[d.group]);\n  // clicking on 'path helper nodes' shouln't expand/collapse the group node:\n  if (d.size < 0)\n    return;\n  cycleState(d);\n  init();\n}\n\n// --------------------------------------------------------\n\nvar vis = d3.select(\"svg\")\n  .attr(\"width\", width)\n  .attr(\"height\", height);\n\nvar debug_ui = vis.select(\"#slider-debug-level\");\ndebug_ui.select(\"#sliderval-debug-level\").text(debug);\nvar dbg = debug_ui.select(\"#slider-x-debug-level\");\nx1 = +dbg.attr(\"x1\");\nx2 = +dbg.attr(\"x2\");\nvar debug_ui_scale = d3.scale.linear().domain([0,3]).range([+dbg.attr(\"x1\")+3.5, +dbg.attr(\"x2\")-3.5-4]).clamp(true);\n\n// as per http://bl.ocks.org/1557377; correction for latest d3 lib: origin(Object) doesn't cut it.\nvar slider_drag = d3.behavior.drag()\n/*\n        .origin(function(d, i) {\n            // must return {x: value, y: value} object\n            var owner = this.ownerSVGElement;\n            var rect = owner.getBoundingClientRect();\n            // (window.scrollX || window.scrollY) ?\n            //return {x: rect.left - this.clientLeft, y: rect.top - this.clientTop};\n            return {x: rect.left, y: rect.top};\n        })\n*/\n  .on(\"drag\", slider_dragmove);\n\ndebug_ui.select(\"#sliderpos-debug-level\")\n  .attr(\"x\", debug_ui_scale(debug))\n  .call(slider_drag);\n\nfunction slider_dragmove(d) {\n  if (!isFinite(d3.event.x))\n    return;\n  var dv = debug_ui_scale.invert(d3.event.x);\n  dv = Math.round(dv);\n  d3.select(this)\n    .attr(\"x\", debug_ui_scale(dv));\n  debug_ui.select(\"#sliderval-debug-level\").text(dv);\n  if (dv != debug) {\n    debug = dv;\n\n    helper_nodeg\n      .selectAll(\"*\")\n        .remove();\n    linkg\n      .selectAll(\"*\")\n        .remove();\n    vis.select(\"#center-of-mass\")\n      .attr(\"display\", (debug == 1) ? null : \"none\");\n    debug_g\n      .attr(\"display\", debug ? null : \"none\");\n\n    init();\n  }\n}\n\ndebug_g = vis.append(\"g\");\ndebug_g\n  .append(\"path\")\n  .attr(\"class\", \"trace-alpha\");\ndebug_g\n  .append(\"path\")\n  .attr(\"class\", \"trace-c2\");\n\nvar pathgen = d3.svg.line().interpolate(\"basis\");\nvar cycle_pathgen = d3.svg.line().interpolate(\"basis\");\n\nd3.json(\"miserables-with-cycles.json\", function(json) {\n  /*\n  JSON layout:\n\n  {\n    \"nodes\": [\n      {\n        \"name\"  : \"bla\",    // in this code, this is expected to be a globally unique string (as it's used for the id via nodeid())\n        \"group\" : 1         // group ID (number)\n      },\n      ...\n    ],\n    \"links\": [\n      {\n        \"source\" : 1,       // nodes[] index (number; is immediately converted to direct nodes[index] reference)\n        \"target\" : 0,       // nodes[] index (number; is immediately converted to direct nodes[index] reference)\n        \"value\"  : 1        // [not used in this force layout]\n      },\n      ...\n    ]\n  }\n  */\n  data = json;\n  for (var i=0; i<data.links.length; ++i) {\n    o = data.links[i];\n    o.source = data.nodes[o.source];\n    o.target = data.nodes[o.target];\n  }\n  // prepare data struct to also carry our 'path helper nodes':\n  data.helpers = {left: {}, right: {}, cyclic: {}};\n\n  hullg = vis.append(\"g\");\n  //if (debug && debug < 3) {\n    linkg = vis.append(\"g\");\n    helper_nodeg = vis.append(\"g\");\n  //}\n  helper_linkg = vis.append(\"g\");\n  nodeg = vis.append(\"g\");\n  //if (debug == 1) {\n    node = vis.append(\"g\")\n        .attr(\"id\", \"center-of-mass\")\n      .append(\"circle\")\n        .attr(\"class\", \"center-of-mass\")\n        .attr(\"visibility\", (debug == 1) ? \"visible\" : \"hidden\")\n        .attr(\"r\", 10);\n  //}\n\n  init();\n\n  vis.attr(\"opacity\", 1e-6)\n    .transition()\n    .duration(1000)\n    .attr(\"opacity\", 1);\n});\n\nfunction init() {\n  if (force1) force1.stop();\n\n  net = network(data, net);\n\n  force1 = d3.layout.force()\n      .nodes(net.nodes)\n      .links(net.links)\n      .size([width, height])\n      .linkDistance(function(l, i) {\n        //return 300;\n        var n1 = l.source, n2 = l.target,\n            g1 = n1.group_data || n1, g2 = n2.group_data || n2,\n            n1_is_group = n1.size || 0, n2_is_group = n2.size || 0,\n            rv = 300;\n        // larger distance for bigger groups:\n        // both between single nodes and _other_ groups (where size of own node group still counts),\n        // and between two group nodes.\n        //\n        // reduce distance for groups with very few outer links,\n        // again both in expanded and grouped form, i.e. between individual nodes of a group and\n        // nodes of another group or other group node or between two group nodes.\n        //\n        // The latter was done to keep the single-link groups close.\n        if (n1.group == n2.group) {\n          if ((n1.link_count < 2 && !n1_is_group) || (n2.link_count < 2 && !n2_is_group)) {\n            // 'real node' singles: these don't need a big distance to make the distance, if you whumsayin' ;-)\n            rv = 2;\n          } else if (!n1_is_group && !n2_is_group) {\n            rv = 2;\n          } else if (g1.link_count < 4 || g2.link_count < 4) {\n            rv = 100;\n          }\n        } else {\n          if (!n1_is_group && !n2_is_group) {\n            rv = 50;\n          } else if ((n1_is_group && n2_is_group) && (g1.link_count < 4 || g2.link_count < 4)) {\n            // 'real node' singles: these don't need a big distance to make the ditance, if you whumsayin' ;-)\n            rv = 100;\n          } else if ((n1_is_group && g1.link_count < 2) || (n2_is_group && g2.link_count < 2)) {\n            // 'real node' singles: these don't need a big distance to make the ditance, if you whumsayin' ;-)\n            rv = 30;\n          } else if (!n1_is_group || !n2_is_group) {\n            rv = 100;\n          }\n        }\n        return l.distance = rv;\n      })\n      .gravity(1.0)             // gravity+charge tweaked to ensure good 'grouped' view (e.g. green group not smack between blue&orange, ...\n      .charge(function(d, i) {  // ... charge is important to turn single-linked groups to the outside\n        if (d.size > 0) {\n          return -5000;  // group node\n        } else {\n          // 'regular node'\n          return -1000;\n        }\n      })\n      .friction(0.7)   // friction adjusted to get dampened display: less bouncy bouncy ball [Swedish Chef, anyone?]\n      .on(\"end\", function() {\n        // done\n      })\n      .on(\"start\", function() {\n        // zip nada\n      })\n      .start();\n\n  /*\n  And here's the crazy idea for allowing AND rendering multiple links between 2 nodes, etc., as the initial attempt\n  to include the 'helper' nodes in the basic 'force' failed dramatically from a visual PoV: we 'overlay' the basic\n  nodes+links force with a SECOND force layout which 'augments' the original force layout by having it 'layout' all\n  the helper nodes (with their links) between the 'fixed' REAL nodes, which are laid out by the original force.\n\n  This way, we also have the freedom to apply a completely different force field setup to the helpers (no gravity\n  as it doesn't make sense for helpers, different charge values, etc.).\n  */\n  force2 = d3.layout.force()\n      .nodes(net.helper_nodes)\n      .links(net.helper_links)\n      .size([width, height])\n      .linkDistance(function(l, i) {\n        var n1 = l.real_source, n2 = l.real_target, rv,\n            lr = l.g_ref,\n            n1r, n2r,\n            dx, dy;\n        if (l.cyclic)\n          return 15;\n        if (lr.source.size > 0 || lr.target.size > 0)\n          return 20;\n        return 1;\n      })\n      .gravity(0.0)   // just a tad of gravidy to help keep those curvy buttocks decent\n      .charge(function(d, i) {\n        // helper nodes have a medium-to-high charge, depending on the number of links the related force link represents.\n        // Hence bundles of links fro A->B will have helper nodes with huge charges: better spreading of the link paths.\n        //\n        // Unless we're looking at helpers for links between 'real nodes', NOT GROUPS: in that case we want to keep\n        // the lines are straight as posssible as there would only be one relation for A->B anyway, so we lower the charge\n        // for such nodes and helpers.\n        if (d.fixed)\n          return -10;\n        var l = d.link_ref,\n            c = l.link_count || 1;\n        if (l.source.size > 0 || l.target.size > 0)\n          return -30;\n        return -1;\n      })\n      .friction(0.95)\n      .start()\n      .stop();          // and immediately stop! force.tick will drive this one every tick!\n\n  hullg.selectAll(\"path.hull\").remove();\n  hull = hullg.selectAll(\"path.hull\")\n      .data(convexHulls(net.nodes, off))\n      .enter().append(\"path\")\n        .attr(\"class\", \"hull\")\n        .attr(\"d\", drawCluster)\n        .style(\"fill\", function(d) { return fill(d.group); })\n        .on(\"click\", on_hull_click);\n\n  if (debug == 1) {\n    link = linkg.selectAll(\"line.link\").data(net.links, linkid);\n    link.exit().remove();\n    link.enter().append(\"line\")\n        .attr(\"class\", \"link\")\n        .attr(\"x1\", function(d) { return d.source.x; })\n        .attr(\"y1\", function(d) { return d.source.y; })\n        .attr(\"x2\", function(d) { return d.target.x; })\n        .attr(\"y2\", function(d) { return d.target.y; });\n    // both existing and enter()ed links may have changed stroke width due to expand state change somewhere:\n    link.style(\"stroke-width\", function(d) { return d.size || 1; });\n  }\n\n  hlink = helper_linkg.selectAll(\"path.hlink\").data(net.helper_render_links, function(d) {\n    return d.id;\n  });\n  hlink.exit().remove();\n  hlink.enter().append(\"path\")\n      .attr(\"class\", \"hlink\");\n  // both existing and enter()ed links may have changed stroke width due to expand state change somewhere:\n  hlink.style(\"stroke-width\", function(d) { return d.size || 1; });\n\n\n  if (debug && debug < 3) {\n    hnode = helper_nodeg.selectAll(\"circle.node\").data(net.helper_nodes, function(d) {\n      return d.id;\n    });\n    hnode.exit().remove();\n    hnode.enter().append(\"circle\")\n        // if (d.size) -- d.size > 0 when d is a group node.\n        // d.size < 0 when d is a 'path helper node'.\n        .attr(\"class\", function(d) {\n          return \"node\" + (d.size > 0 ? \"\" : d.size < 0 ? \" helper\" : \" leaf\");\n        })\n        .attr(\"r\", function(d) {\n          return d.size > 0 ? d.size + dr : d.size < 0 ? 2 : dr + 1;\n        })\n        .attr(\"cx\", function(d) { return d.x; })\n        .attr(\"cy\", function(d) { return d.y; })\n        .style(\"fill\", function(d) { return fill(d.group); });\n  }\n\n  node = nodeg.selectAll(\"circle.node\").data(net.nodes, nodeid);\n  node.exit().remove();\n  node.enter().append(\"circle\")\n      // if (d.size) -- d.size > 0 when d is a group node.\n      // d.size < 0 when d is a 'path helper node'.\n      .attr(\"class\", function(d) {\n        return \"node\" + (d.size > 0 ? d.expansion ? \" link-expanded\" : \"\" : \" leaf\");\n      })\n      .attr(\"r\", function(d) {\n        return d.size > 0 ? d.size + dr : dr + 1;\n      })\n      .attr(\"cx\", function(d) { return d.x; })\n      .attr(\"cy\", function(d) { return d.y; })\n      .style(\"fill\", function(d) { return fill(d.group); })\n      .on(\"click\", on_node_click);\n\n  node.call(force1.drag);\n\n  var drag_in_progress = false;\n  var change_squared = width * height;\n\n  // CPU load redux for the fix, part 3: jumpstart the annealing process again when the user moves the mouse outside the node,\n  // when we believe the drag is still going on; even when it isn't anymore, but D3 doesn't inform us about that!\n  node\n    .on(\"mouseout.ger_fix\", function(d) {\n      if (debug == 1) console.log(\"mouseout.ger_fix\", this, arguments, d.fixed, drag_in_progress);\n      if (drag_in_progress) {\n        force1.resume();\n      }\n    });\n\n  var resume_threshold = 0.05;\n\n  force1.on(\"tick\", function(e) {\n    if (debug) {\n      alpha_trace.push(alpha_scale(e.alpha));\n      if (alpha_trace.length > width - 20)\n        alpha_trace.shift();\n      debug_g.select(\"path.trace-alpha\")\n          .attr(\"d\", alpha_line(alpha_trace));\n\n      c2_trace.push(c2_scale(change_squared));\n      if (c2_trace.length > width - 20)\n        c2_trace.shift();\n      debug_g.select(\"path.trace-c2\")\n          .attr(\"d\", c2_line(c2_trace));\n    }\n\n    /*\n    Force all nodes with only one link to point outwards.\n\n    To do this, we first calculate the center mass (okay, we wing it, we fake node 'weight'),\n    then see whether the target node for links from single-link nodes is closer to the\n    center-of-mass than us, and if it isn't, we push the node outwards.\n    */\n    var center = {x: 0, y: 0, weight: 0}, singles = [], centroids = {},\n        size, c, k, mx, my, dx, dy, alpha;\n\n    drag_in_progress = false;\n    net.nodes.forEach(function(n) {\n      var w = Math.max(1, n.size || 0, n.weight || 0),\n          i = getGroup(n),\n          gc = centroids[i] || (centroids[i] = { x:0, y:0, weight: 0});\n\n      center.x += w * n.x;\n      center.y += w * n.y;\n      center.weight += w;\n\n      gc.x += w * n.x;\n      gc.y += w * n.y;\n      gc.weight += w;\n\n      if (n.fixed & 2) {\n        drag_in_progress = true;\n      }\n\n      if (n.size > 0 ? n.link_count < 4 : n.group_data.link_count < 3)\n        singles.push(n);\n    });\n\n    size = force1.size();\n\n    mx = size[0] / 2;\n    my = size[1] / 2;\n\n    for (k in centroids) {\n      var gc = centroids[k];\n      gc.x /= gc.weight;\n      gc.y /= gc.weight;\n    }\n\n    singles.forEach(function(n) {\n      var l = n.first_link, n2 = n.first_link_target,\n          proj, ax, bx, ay, by, k, x, y, alpha, rej, power,\n          dx, dy,\n          n_is_group = n.size || 0,\n          ng = n.group_data || n,\n          c2,\n          w = Math.max(1, n.size || 0, n.weight || 0),\n          i = getGroup(n),\n          gc = centroids[i];\n\n      // haven't decided what to do for unconnected nodes, yet...\n      if (!l)\n        return;\n\n      // apply amplification of the 'original' alpha:\n      // 1.0 for singles and double-connected nodes, close to 0 for highly connected nodes, rapidly decreasing.\n      // Use this as we want to give those 'non-singles' a little bit of the same 'push out' treatment.\n      // Reduce effect for 'real nodes' which are singles: they need much less encouragement!\n      power = Math.max(2, n_is_group ? n.link_count : n.group_data.link_count);\n      power = 2 / power;\n\n      alpha = e.alpha * power;\n\n      // undo/revert gravity forces (or as near as we can get, here)\n      //\n      // revert for truely single nodes, revert just a wee little bit for dual linked nodes,\n      // only reduce ever so slighty for nodes with few links (~ 3) that made it into this\n      // 'singles' selection\n      if (k = alpha * force1.gravity() * (0.8 + power)) {\n        dx = (mx - n.x) * k;\n        dy = (my - n.y) * k;\n        n.x -= dx;\n        n.y -= dy;\n\n        center.x -= dx * w;\n        center.y -= dy * w;\n        gc.x -= dx * w;\n        gc.y -= dy * w;\n      }\n    });\n\n    // move the entire graph so that its center of mass sits at the center, period.\n    center.x /= center.weight;\n    center.y /= center.weight;\n\n    if (debug == 1) {\n      c = vis.selectAll(\"circle.center-of-mass\")\n          .attr(\"cx\", center.x)\n          .attr(\"cy\", center.y);\n    }\n\n    dx = mx - center.x;\n    dy = my - center.y;\n\n    alpha = e.alpha * 5;\n    dx *= alpha;\n    dy *= alpha;\n\n    net.nodes.forEach(function(n) {\n      n.x += dx;\n      n.y += dy;\n    });\n\n\n    change_squared = 0;\n\n    // fixup .px/.py so drag behaviour and annealing get the correct values, as\n    // force.tick() would expect .px and .py to be the .x and .y of yesterday.\n    net.nodes.forEach(function(n) {\n      // restrain all nodes to window area\n      var k, dx, dy,\n          r = (n.size > 0 ? n.size + dr : dr + 1) + 2 /* styled border outer thickness and a bit */;\n\n      dx = 0;\n      if (n.x < r)\n        dx = r - n.x;\n      else if (n.x > size[0] - r)\n        dx = size[0] - r - n.x;\n\n      dy = 0;\n      if (n.y < r)\n        dy = r - n.y;\n      else if (n.y > size[1] - r)\n        dy = size[1] - r - n.y;\n\n      k = 1.2;\n\n      n.x += dx * k;\n      n.y += dy * k;\n      // restraining completed.......................\n\n      // fixes 'elusive' node behaviour when hovering with the mouse (related to force.drag)\n      if (n.fixed) {\n        // 'elusive behaviour' ~ move mouse near node and node would take off, i.e. act as an elusive creature.\n        n.x = n.px;\n        n.y = n.py;\n      }\n      n.px = n.x;\n      n.py = n.y;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n\n    // also restrain helper nodes to within the visible area --> link paths are almost always ket in-view:\n    net.helper_nodes.forEach(function(n) {\n      // restrain all nodes to window area\n      var k, dx, dy,\n          r = (n.size > 0 ? n.size : 1) + 5 /* heuristic */;\n\n      dx = 0;\n      if (n.x < r)\n        dx = r - n.x;\n      else if (n.x > size[0] - r)\n        dx = size[0] - r - n.x;\n\n      dy = 0;\n      if (n.y < r)\n        dy = r - n.y;\n      else if (n.y > size[1] - r)\n        dy = size[1] - r - n.y;\n\n      k = 1.2;\n\n      n.x += dx * k;\n      n.y += dy * k;\n      // restraining completed.......................\n\n      n.px = n.x;\n      n.py = n.y;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n\n    if (!isFinite(change_squared))\n      change_squared = width * height;\n\n    // kick the force2 to also do a bit of annealing alongside:\n    // to make it do something, we need to surround it alpha-tweaking stuff, though.\n    force2.resume();\n    force2.tick();\n    force2.stop();\n\n    // fast stop + the drag fix, part 2:\n    if (change_squared < .05) {\n      if (debug == 1) console.log(\"fast stop: CPU load redux\");\n      force1.stop();\n      // fix part 4: monitor D3 resetting the drag marker:\n      if (drag_in_progress) {\n        if (debug == 1) console.log(\"START monitor drag in progress\", drag_in_progress);\n        d3.timer(function() {\n          drag_in_progress = false;\n          net.nodes.forEach(function(n) {\n            if (n.fixed & 2) {\n              drag_in_progress = true;\n            }\n          });\n          force1.resume();\n          if (debug == 1) console.log(\"monitor drag in progress: drag ENDED\", drag_in_progress);\n          // Quit monitoring as soon as we noticed the drag ENDED.\n          // Note: we continue to monitor at +500ms intervals beyond the last tick\n          //       as this timer function ALWAYS kickstarts the force layout again\n          //       through force.resume().\n          //       d3.timer() API only accepts an initial delay; we can't set this\n          //       thing to scan, say, every 500msecs until the drag is done,\n          //       so we do it that way, via the revived force.tick process.\n          return true;\n        }, 500);\n      }\n    } else if (change_squared > net.nodes.length * 0.1 * resume_threshold && e.alpha < resume_threshold) {\n      // jolt the alpha (and the visual) when there's still a lot of change when we hit the alpha threshold.\n      force1.alpha(e.alpha *= 2); //force.resume(), but now with decreasing alpha starting value so the jolts don't get so big.\n\n      // And 'dampen out' the trigger point, so it becomes harder and harder to trigger the threshold.\n      // This is done to cope with those instable (forever rotating, etc.) layouts...\n      resume_threshold *= 0.75;\n    } else {\n      //console.log(\"fast stop tracking: \", change_squared, net.nodes.length * 0.1 * resume_threshold, e.alpha, resume_threshold);\n    }\n\n    //--------------------------------------------------------------------\n\n    if (!hull.empty()) {\n      hull.data(convexHulls(net.nodes, off))\n          .attr(\"d\", drawCluster);\n    }\n\n    if (debug == 1) {\n      link.attr(\"x1\", function(d) { return d.source.x; })\n          .attr(\"y1\", function(d) { return d.source.y; })\n          .attr(\"x2\", function(d) { return d.target.x; })\n          .attr(\"y2\", function(d) { return d.target.y; });\n    }\n\n    node.attr(\"cx\", function(d) { return d.x; })\n        .attr(\"__name__\", function(d) { return d.name || \"xxx\"; })\n        .attr(\"cy\", function(d) { return d.y; });\n  });\n\n\n\n  var log_count = 100;\n\n\n\n\n  force2.on(\"tick\", function(e) {\n    /*\n      Update all 'real'=fixed nodes.\n    */\n    net.helper_nodes.forEach(function(n) {\n      var o;\n      if (n.fixed) {\n        o = n.ref;\n        n.px = n.x = o.x;\n        n.py = n.y = o.y;\n      }\n    });\n    net.helper_links.forEach(function(l) {\n      var o = l.g_ref;\n      l.distance = o.distance;\n    });\n\n    // NOTE: force2 is fully driven by force(1), but still there's need for 'fast stop' handling in here\n    //       as our force2 may be more 'joyous' in animating the links that force is animating the nodes\n    //       themselves. Hence we also take the delta movement of the helper nodes into account!\n    net.helper_nodes.forEach(function(n) {\n      // skip the 'fixed' buggers: those are already accounted for in force.tick!\n      if (n.fixed)\n        return;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n    if (!isFinite(change_squared))\n      change_squared = width * height;\n\n    //--------------------------------------------------------------------\n\n    var logged = false;\n\n    hlink.attr(\"d\", function(d) {\n      if (isFinite(d.real_source.x)) {\n        var linedata, dx, dy, f;\n        if (d.cyclic) {\n          // construct round-ish bezier from node to helper and back again:\n          dx = d.target.x - d.real_source.x;\n          dy = d.target.y - d.real_source.y;\n          linedata = [\n              [d.real_source.x, d.real_source.y],\n              [d.target.x - cycle_curvep * dy, d.target.y + cycle_curvep * dx],\n              [d.target.x + cycle_curvep * dx, d.target.y + cycle_curvep * dy],\n              [d.target.x + cycle_curvep * dy, d.target.y - cycle_curvep * dx],\n              [d.real_source.x, d.real_source.y]\n          ];\n          return cycle_pathgen(linedata);\n        } else {\n          linedata = [\n              [d.real_source.x, d.real_source.y],\n              [d.source.x, d.source.y],\n              [d.target.x, d.target.y],\n              [d.real_target.x, d.real_target.y]\n          ];\n          return pathgen(linedata);\n        }\n      } else {\n        if (!logged) {\n          console.log(\"boom\");\n          logged = true;\n        }\n        return null;\n      }\n    });\n\n    if (debug && debug < 3) {\n      hnode.attr(\"cx\", function(d) { return d.x; })\n           .attr(\"cy\", function(d) { return d.y; });\n    }\n  });\n}\n\n    </script>\n  </body>\n</html>\n","filenames":[".gitignore","CREDITS","README.md","index.html","miserables-with-cycles.json"]}},{"_index":"blockbuilder","_type":"blocks","_id":"e787e283b8cf9d5a8f8a","_score":0.3663793,"_source":{"userId":"mbostock","description":"D3 Logo","created_at":"2015-10-16T18:41:38Z","updated_at":"2016-02-09T01:49:04Z","api":[],"colors":[],"readme":"The official D3 logo is available is several forms in the [d3-logo repository](https://github.com/d3/d3-logo).\n","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<img width=\"960\" height=\"500\" src=\"d3.svg\">\n","filenames":[".block","README.md","d3.svg","index.html","thumbnail.png"],"thumb":"4b3e5a0508aa06c64e9f6dc39774d8801b3f930d"}},{"_index":"blockbuilder","_type":"blocks","_id":"3305937","_score":0.35921934,"_source":{"userId":"mbostock","description":"d3.tsv","created_at":"2012-08-09T17:06:48Z","updated_at":"2016-03-29T01:11:27Z","api":["d3.scale.linear","d3.select","d3.tsv","d3.extent","d3.svg.axis"],"colors":["#000000","#4682b4","#0000ff"],"readme":"D3 2.10 adds support for [tab-separated values](http://en.wikipedia.org/wiki/Tab-separated_values) via d3.tsv. Similar to the previous d3.csv method, this makes it easy to load and parse TSV files.\n\n```javascript\nd3.tsv(\"data.tsv\", function(data) {\n  console.log(data[0].x);\n});\n```\n","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\nbody {\n  font: 10px sans-serif;\n}\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n.point {\n  fill: steelblue;\n  stroke: #000;\n}\n\n</style>\n<body>\n<script src=\"//d3js.org/d3.v3.min.js\"></script>\n<script>\n\nvar margin = {top: 20, right: 20, bottom: 30, left: 40},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\nvar x = d3.scale.linear()\n    .range([0, width]);\n\nvar y = d3.scale.linear()\n    .range([height, 0]);\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nd3.tsv(\"data.tsv\", function(error, data) {\n  if (error) throw error;\n\n  // Coerce the data to numbers.\n  data.forEach(function(d) {\n    d.x = +d.x;\n    d.y = +d.y;\n  });\n\n  // Compute the scales’ domains.\n  x.domain(d3.extent(data, function(d) { return d.x; })).nice();\n  y.domain(d3.extent(data, function(d) { return d.y; })).nice();\n\n  // Add the x-axis.\n  svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.svg.axis().scale(x).orient(\"bottom\"));\n\n  // Add the y-axis.\n  svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(d3.svg.axis().scale(y).orient(\"left\"));\n\n  // Add the points!\n  svg.selectAll(\".point\")\n      .data(data)\n    .enter().append(\"circle\")\n      .attr(\"class\", \"point\")\n      .attr(\"r\", 4.5)\n      .attr(\"cx\", function(d) { return x(d.x); })\n      .attr(\"cy\", function(d) { return y(d.y); });\n});\n\n</script>\n","filenames":[".block","README.md","data.tsv","index.html","thumbnail.png"],"thumb":"c1f5d995e5090a7029ba31b01a7f7742afd2622d"}},{"_index":"blockbuilder","_type":"blocks","_id":"52fb07194d4b2988cafb","_score":0.35810685,"_source":{"userId":"dmijalkovic","description":"D3 graphs","created_at":"2015-10-23T23:48:33Z","updated_at":"2015-10-24T07:33:28Z","api":["d3.time.scale","d3.scale.linear","d3.svg.axis","d3.select","d3.time.format","d3.extent","d3.max","d3.svg.line"],"colors":["#aec6a8","#f5f5f5","#cdcdcd","#4682b4","#0000ff","#ffffff","#d3d3d3"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)\n\nSimple D3 graph.","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n\n  <body>\n    <script>\n      // Set the dimensions of the canvas / graph\n    var margin = {top: 30, right: 30, bottom: 40, left: 50};\n    var width = 800 - margin.left - margin.right;\n    var height = 300 - margin.top - margin.bottom;\n\n    // Set the ranges\n    var x = d3.time.scale().range([0, width]);\n    var y = d3.scale.linear().range([height, 0]);\n\n    // Define the axes\n    var xAxis = d3.svg.axis().scale(x)\n        .orient(\"bottom\").ticks(5);\n\n    var yAxis = d3.svg.axis().scale(y)\n        .orient(\"left\").ticks(5);\n\n    // Adds the svg canvas\n    var svgContainer = d3.select(\"body\")\n        .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n            .attr(\"transform\", \n                  \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var data = [\n                {\"date\":\"1-Apr-15\", \"close\":140.61},\n                {\"date\":\"15-Apr-15\", \"close\":20.23},\n                {\"date\":\"13-May-15\", \"close\":99.00},\n                {\"date\":\"21-May-15\", \"close\":188.13},\n                {\"date\":\"18-Jun-15\", \"close\":59.13},\n                {\"date\":\"28-Jul-15\", \"close\":75.13},\n                {\"date\":\"8-Aug-15\", \"close\":109.13},\n                {\"date\":\"12-Aug-15\", \"close\":96.13}];\n\n    // Parse the date / time\n    var parseDate = d3.time.format(\"%d-%b-%y\").parse;\n\n    // Get the data\n    data.forEach(function(d) {\n        d.date = parseDate(d.date);\n        d.close = +d.close;\n    });\n\n    // Scale the range of the data\n    x.domain(d3.extent(data, function(d) { return d.date; }));\n    y.domain([0, d3.max(data, function(d) { return d.close; })]);\n\n    // Add the X Axis\n    svgContainer.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(xAxis);\n\n    // Add the Y Axis\n    svgContainer.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(yAxis);\n\n    // Draw vertical grid lines\n    svgContainer.append(\"g\")     \n        .attr(\"class\", \"grid\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(xAxis\n            .tickSize(-height, 0, 0)\n            .tickFormat(\"\")\n            )\n\n    // Draw horizontal grid lines\n    svgContainer.append(\"g\")     \n        .attr(\"class\", \"grid\")\n        .call(yAxis\n            .tickSize(-width, 0, 0)\n            .tickFormat(\"\")\n            )\n\n    svgContainer.selectAll(\"bar\")\n        .data(data)\n        .enter().append(\"rect\")\n        .style(\"fill\", \"#aec6a8\")\n        .attr(\"x\", function(d) { return x(d.date)-5; })\n        .attr(\"width\", 10)\n        .attr(\"y\", function(d) { return y(d.close); })\n        .attr(\"height\", function(d) { return height - y(d.close); });\n      \n    // Define the line (interpolate to smooth the line)\n    var valueline = d3.svg.line()\n        .interpolate(\"cardinal\")\n        .x(function(d) { return x(d.date); })\n        .y(function(d) { return y(d.close); });\n\n    svgContainer.append(\"path\")\n        .attr(\"class\", \"line\")\n        .attr(\"d\", valueline(data));\n\n   </script>\n</body>\n","filenames":["README.md","index.html","style.css","thumbnail.png"],"thumb":"f6d60a26ba4a374bba311aa3fe935ee5a0709938"}},{"_index":"blockbuilder","_type":"blocks","_id":"1b6758978dc2d52d3a37","_score":0.357208,"_source":{"userId":"1wheel","description":"d3-starterkit","created_at":"2015-05-15T04:16:40Z","updated_at":"2015-08-29T14:21:14Z","api":["d3.ns.qualify","d3.tsv","d3.conventions","d3.select","d3.extent","d3.scale.category10","d3.scale.linear","d3.scale.sqrt","d3.svg.line","d3.svg.axis","d3.keys","d3.selectAll"],"colors":["#ffffff","#000000","#808080","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf"],"readme":"# d3-starterkit\nSnippets and conventions for starting a new d3 project without a fuss. Includes [d3](http://d3js.org/), [lodash](http://underscorejs.org/), [d3-jetpack](https://github.com/gka/d3-jetpack), some handy css and a few convenience functions. \n\n#### selection.dataAppend\n\nInstead of making an empty selection, binding data to it, taking the enter selection and appending elements as separate steps:\n\n```js\nvar circles = svg.selectAll('circle')\n    .data(data)\n    .enter()\n    .append('circle')    \n```\n\nUse `dataAppend`:\n\n```js\nvar circles = svg.dataAppend('circle', data)\n```\n\n#### d3.attachTooltip\n\nAttaches a light weight tooltip that prints out all of an objects properties on mouseover. No more `> d3.select($0).datum()`! Assumes that a `<div class='tooltip'></div>` and the tooltip css exist on the page - see [index](https://github.com/1wheel/d3-starterkit/blob/master/index.html) for an example. \n\n```js\ncircles.call(d3.attachTooltip)\n```\n\nFor formated tooltips, update the html of the tooltip on mouseover:\n\n```js\ncircles\n    .call(d3.attachTooltip)\n    .on('mouseover', function(d){\n      d3.select('.tooltip').html(template(d)) })\n```\n\nIf your fancy tooltip requires lots of markup, using a [template](http://underscorejs.org/#template) might be eaiser than building a complex html tree with d3. \n\n#### d3.conventions\n`d3.conventions()` appends an `svg` element with a `g` element according to the  [margin convention](http://bl.ocks.org/mbostock/3019563) to the page and returns an object with the following properties:\n\n`width`, `height`, `margin`: size of the `svg` and its margins\n\n`parentSel`: `d3.selection` of the element the `svg` was appended to. Defaults to `d3.select(\"body\")`, but like every other returned value, can be specified by passing in an object: `d3.conventions({parentSel: d3.select(\"#graph-container\"), height: 1300})` appends an svg to `#graph-container` with a height of 1300.\n\n`svg`: `g` element translated to make room for the margins\n\n`x`: Linear scale with a range of `[0, width]`\n\n`y`: Linear scale with a range of `[height, 0]`\n\n`xAxis`: Axis with scale set to x and orient to \"bottom\"\n\n`yAxis`: Axis with scale set to y and orient to \"left\"\n\n`drawAxis`: Call to append axis group elements to the svg after configuring the domain. Not configurable.\n\n","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\ntext {\n  font: 12px sans-serif;\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;\n}\n\n.axis line,\n.axis path {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n\ndiv.tooltip {\n  top: -1000px;\n  position: absolute;\n  padding: 10px;\n  background: rgba(255, 255, 255, .90);\n  border: 1px solid lightgray;\n  pointer-events: none;\n}\n.tooltip-hidden{\n  opacity: 0;\n}\n\n</style>\n\n<body>\n\n<div id='graph'></div>\n\n<div class='tooltip'></div>\n\n\n</body>\n\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.js\"></script>\n\n<script src='d3-jetpack.js'></script>\n<script src='d3-starterkit.js'></script>\n\n<script src='script.js'></script>","filenames":["README.md","d3-jetpack.js","d3-starterkit.js","data.tsv","index.html","script.js"]}},{"_index":"blockbuilder","_type":"blocks","_id":"0c4fc7179f8b9b026c10","_score":0.35710043,"_source":{"userId":"jasonarita","description":"D3 Workshop","created_at":"2015-12-04T18:19:10Z","updated_at":"2015-12-04T22:06:34Z","api":["d3.select","d3.scale.log","d3.svg.axis","d3.scale.linear","d3.csv","d3.scale.sqrt"],"colors":["#0000ff","#00008b","#ff0000","#008000","#ffffff","#808080"],"readme":"- [Course Site](http://dib-training.readthedocs.org/en/pub/2015-12-04-d3js.html)\n- [Lessons](http://emilydolson.github.io/D3-visualising-data/)\n- [Youtube Webcast](https://www.youtube.com/watch?v=eIrZjVH0Zcg)\n- [Data Intensive Biology Training Program](http://dib-training.readthedocs.org/en/pub/) \n- [Data File](http://emilydolson.github.io/D3-visualising-data/resources/nations.csv)\n\n\n- create Javascript objects w/ brackets { }\n- cast an object as a number use a plus (+) before an object\n\n\n\n## D3\n- To select by *** use '#'\n- 'g' - Group - D3 element\n\n\n## Create Scales + Axes\n- Create scale: `d3.scale`\n- Create axis:  `d3.svg.axis()`\n\n## Graphing data\n- Bind data to DOM-elements via data function: \n  - `.data()`\n\n\n## Sliders\n1. Add slider element to HTML\n - index.html\n   - `<input>...`\n2. Modify `year` variable in MAIN.JS\n3. Create `update` function\n  - enter\n  - exit\n4. (Optional) Add transitions\n\n\n----\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/23eaa22f601f53497e06'>D3 Workshop</a>\n","code":"<!DOCTYPE html>\n<html> \n    <head> \n        <!--meta-data (like page title, inclusion of other files) -->\n      <link rel='stylesheet' type='text/css' href='style.css'></link>\n    \n    </head> \n  \n    <body> \n      <h1>Introduction</h1>\n     \n \t\t  <svg>\n        <circle class=\"prettycircle\"; cx=\"75\"; cy=\"75\"; r=\"60\">\n        </circle>\n        \n        <rect class=\"darkblue\"; x=\"100\"; y=\"100\"></rect>\n      </svg>\n      \n      <div id=\"chart_area\"></div>\n      <input type=\"range\" name=\"range\" class=\"slider\" id=\"year_slider\" value=\"1979\" min=\"1950\" max=\"2008\" step=\"1\" ><br>\n\n      \n      <script src=\"http://d3js.org/d3.v3.min.js\"></script>\n      <script src=\"main.js\"></script>\n\n    </body> \n  \n</html> \n","filenames":["README.md","index.html","main.js","style.css"]}},{"_index":"blockbuilder","_type":"blocks","_id":"216ee9834f42bdfaffae","_score":0.35632002,"_source":{"userId":"ImSraone","description":"d3 gauge","created_at":"2016-03-04T05:05:37Z","updated_at":"2016-03-04T05:05:37Z","api":["d3.format","d3.interpolateHsl","d3.rgb","d3.layout.pie","d3.scale.linear","d3.range","d3.svg.arc","d3.select","d3.svg.line"],"colors":["#e85116","#b64011","#666666","#e8e2ca","#3e6c0a","#ff0000","#d2b48c","#4682b4","#0000ff"],"readme":"d3 gauge\n\nforked from <a href='http://bl.ocks.org/ImSraone/'>ImSraone</a>'s block: <a href='http://bl.ocks.org/ImSraone/a6f4f74a628d844e6afb'>d3 gauge</a>","code":"<html>\n<head>\n    <meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=320\" />\n\t<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n\t<title>Gauge</title>\n\t<script type=\"text/javascript\" src=\"http://d3js.org/d3.v2.min.js\"></script>\n\t<style>\n\tbody {\n\t\tfont-family:  Helvetica, Arial, sans-serif;\n\t\tmargin: 32px;\n\t}\n\t#power-gauge g.arc {\n\t\tfill: steelblue;\n\t}\n\t#power-gauge g.pointer {\n\t\tfill: #e85116;\n\t\tstroke: #b64011;\n\t}\n\t\n\t#power-gauge g.label text {\n\t\ttext-anchor: middle;\n\t\tfont-size: 14px;\n\t\tfont-weight: bold;\n\t\tfill: #666;\n\t}\n\t</style>\n</head>\n<body>\n<div id=\"power-gauge\"></div>\n\t\n<script>\nvar gauge = function(container, configuration) {\n\tvar that = {};\n\tvar config = {\n\t\tsize\t\t\t\t\t\t: 200,\n\t\tclipWidth\t\t\t\t\t: 200,\n\t\tclipHeight\t\t\t\t\t: 110,\n\t\tringInset\t\t\t\t\t: 20,\n\t\tringWidth\t\t\t\t\t: 20,\n\t\t\n\t\tpointerWidth\t\t\t\t: 10,\n\t\tpointerTailLength\t\t\t: 5,\n\t\tpointerHeadLengthPercent\t: 0.9,\n\t\t\n\t\tminValue\t\t\t\t\t: 0,\n\t\tmaxValue\t\t\t\t\t: 10,\n\t\t\n\t\tminAngle\t\t\t\t\t: -90,\n\t\tmaxAngle\t\t\t\t\t: 90,\n\t\t\n\t\ttransitionMs\t\t\t\t: 750,\n\t\t\n\t\tmajorTicks\t\t\t\t\t: 5,\n\t\tlabelFormat\t\t\t\t\t: d3.format(',g'),\n\t\tlabelInset\t\t\t\t\t: 10,\n\t\t\n\t\tarcColorFn\t\t\t\t\t: d3.interpolateHsl(d3.rgb('#e8e2ca'), d3.rgb('#3e6c0a'))\n\t};\n\tvar range = undefined;\n\tvar r = undefined;\n\tvar pointerHeadLength = undefined;\n\tvar value = 0;\n\t\n\tvar svg = undefined;\n\tvar arc = undefined;\n\tvar scale = undefined;\n\tvar ticks = undefined;\n\tvar tickData = undefined;\n\tvar pointer = undefined;\n\tvar donut = d3.layout.pie();\n\t\n\tfunction deg2rad(deg) {\n\t\treturn deg * Math.PI / 180;\n\t}\n\t\n\tfunction newAngle(d) {\n\t\tvar ratio = scale(d);\n\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\treturn newAngle;\n\t}\n\t\n\tfunction configure(configuration) {\n\t\tvar prop = undefined;\n\t\tfor ( prop in configuration ) {\n\t\t\tconfig[prop] = configuration[prop];\n\t\t}\n\t\t\n\t\trange = config.maxAngle - config.minAngle;\n\t\tr = config.size / 2;\n\t\tpointerHeadLength = Math.round(r * config.pointerHeadLengthPercent);\n\t\t// a linear scale that maps domain values to a percent from 0..1\n\t\tscale = d3.scale.linear()\n\t\t\t.range([0,1])\n\t\t\t.domain([config.minValue, config.maxValue]);\n\t\t\t\n\t\tticks = scale.ticks(config.majorTicks);\n\t\ttickData = d3.range(config.majorTicks).map(function() {return 1/config.majorTicks;});\n\t\t\n\t\tarc = d3.svg.arc()\n\t\t\t.innerRadius(r - config.ringWidth - config.ringInset)\n\t\t\t.outerRadius(r - config.ringInset)\n\t\t\t.startAngle(function(d, i) {\n\t\t\t\tvar ratio = d * i;\n\t\t\t\treturn deg2rad(config.minAngle + (ratio * range));\n\t\t\t})\n\t\t\t.endAngle(function(d, i) {\n\t\t\t\tvar ratio = d * (i+1);\n\t\t\t\treturn deg2rad(config.minAngle + (ratio * range));\n\t\t\t});\n\t}\n\tthat.configure = configure;\n\t\n\tfunction centerTranslation() {\n\t\treturn 'translate('+r +','+ r +')';\n\t}\n\t\n\tfunction isRendered() {\n\t\treturn (svg !== undefined);\n\t}\n\tthat.isRendered = isRendered;\n\t\n\tfunction render(newValue) {\n\t\tsvg = d3.select(container)\n\t\t\t.append('svg:svg')\n\t\t\t\t.attr('class', 'gauge')\n\t\t\t\t.attr('width', config.clipWidth)\n\t\t\t\t.attr('height', config.clipHeight);\n\t\t\n\t\tvar centerTx = centerTranslation();\n\t\t\n\t\tvar arcs = svg.append('g')\n\t\t\t\t.attr('class', 'arc')\n\t\t\t\t.attr('transform', centerTx);\n\t\t\n\t\tarcs.selectAll('path')\n\t\t\t\t.data(tickData)\n\t\t\t.enter().append('path')\n\t\t\t\t.attr('fill', function(d, i) {\n\t\t\t\t\treturn config.arcColorFn(d * i);\n\t\t\t\t})\n\t\t\t\t.attr('d', arc);\n\t\t\n\t\tvar lg = svg.append('g')\n\t\t\t\t.attr('class', 'label')\n\t\t\t\t.attr('transform', centerTx);\n\t\tlg.selectAll('text')\n\t\t\t\t.data(ticks)\n\t\t\t.enter().append('text')\n\t\t\t\t.attr('transform', function(d) {\n\t\t\t\t\tvar ratio = scale(d);\n\t\t\t\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\t\t\t\treturn 'rotate(' +newAngle +') translate(0,' +(config.labelInset - r) +')';\n\t\t\t\t})\n\t\t\t\t.text(config.labelFormat);\n\t\tvar lineData = [ [config.pointerWidth / 2, 0], \n\t\t\t\t\t\t[0, -pointerHeadLength],\n\t\t\t\t\t\t[-(config.pointerWidth / 2), 0],\n\t\t\t\t\t\t[0, config.pointerTailLength],\n\t\t\t\t\t\t[config.pointerWidth / 2, 0] ];\n\t\tvar pointerLine = d3.svg.line().interpolate('monotone');\n\t\tvar pg = svg.append('g').data([lineData])\n\t\t\t\t.attr('class', 'pointer')\n\t\t\t\t.attr('transform', centerTx);\n\t\t\t\t\n\t\tpointer = pg.append('path')\n\t\t\t.attr('d', pointerLine/*function(d) { return pointerLine(d) +'Z';}*/ )\n\t\t\t.attr('transform', 'rotate(' +config.minAngle +')');\n\t\t\t\n\t\tupdate(newValue === undefined ? 0 : newValue);\n\t}\n\tthat.render = render;\n\t\n\tfunction update(newValue, newConfiguration) {\n\t\tif ( newConfiguration  !== undefined) {\n\t\t\tconfigure(newConfiguration);\n\t\t}\n\t\tvar ratio = scale(newValue);\n\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\tpointer.transition()\n\t\t\t.duration(config.transitionMs)\n\t\t\t.ease('elastic')\n\t\t\t.attr('transform', 'rotate(' +newAngle +')');\n\t}\n\tthat.update = update;\n\tconfigure(configuration);\n\t\n\treturn that;\n};\n</script>\n\n<script>\nfunction onDocumentReady() {\n\tvar powerGauge = gauge('#power-gauge', {\n\t\tsize: 300,\n\t\tclipWidth: 300,\n\t\tclipHeight: 300,\n\t\tringWidth: 60,\n\t\tmaxValue: 10,\n\t\ttransitionMs: 4000,\n\t});\n\tpowerGauge.render();\n\t\n\tfunction updateReadings() {\n\t\t// just pump in random data here...\n\t\tpowerGauge.update(Math.random() * 10);\n\t}\n\t\n\t// every few seconds update reading values\n\tupdateReadings();\n\tsetInterval(function() {\n\t\tupdateReadings();\n\t}, 5 * 1000);\n}\nif ( !window.isLoaded ) {\n\twindow.addEventListener(\"load\", function() {\n\t\tonDocumentReady();\n\t}, false);\n} else {\n\tonDocumentReady();\n}\n</script>\n</body>\n</html>","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"d12ff8e0e07ae985e4e0","_score":0.35612577,"_source":{"userId":"epmoyer","description":"D3 Bingo!","created_at":"2015-11-21T03:17:52Z","updated_at":"2015-11-22T04:00:21Z","api":["d3.select"],"colors":["#faebc4","#3e3a30","#625d51","#ffffff","#d2b48c"],"readme":"D3 Bingo is meant to be a fun challenge to inspire you to explore parts of D3 (and engaging with the D3 community) that you might not have done yet... and to celebrate what you have done so far!\n\nTo play D3 Bingo, fork [this gist on blockbuilder](http://blockbuilder.org/zanarmstrong/6daa5503fc60d4a89a11).\n\nIn the data.js file, add a URL for any projects that you have that fulfil a challenge. Then save. Your bingo card on bl.ocks will now show your completed squares. If you click on a square, it will open the URL for that project. \n\nYou can see my completed bingo card [here](http://bl.ocks.org/zanarmstrong/raw/b66a37afe6581eb5bc0c/) as an example.\n\nforked from <a href='http://bl.ocks.org/zanarmstrong/'>zanarmstrong</a>'s block: <a href='http://bl.ocks.org/zanarmstrong/6daa5503fc60d4a89a11'>D3 Bingo!</a>","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <link href='https://fonts.googleapis.com/css?family=Smythe' rel='stylesheet' type='text/css'>\n  <link href='https://fonts.googleapis.com/css?family=Rammetto+One' rel='stylesheet' type='text/css'>\n  <link rel=\"stylesheet\" href=\"bingo.css\">\n</head>\n\n<body>\n\t<div class=\"viz\">\n\t\t<div class=\"header-container\"><hr class=\"top\"></div>\n\t\t<div class=\"title\"><span>B</span><span>I</span><span>N</span><span>G</span><span>O</span></div>\n\t</div>\n  \t<script src=\"data.js\"></script>\n  \t<script src=\"bingo.js\"></script>\n</body>\n","filenames":["README.md","bingo.css","bingo.js","data.js","index.html","thumbnail.png"],"thumb":"bd9320030e69cf7a91c01d71d0655f1c561f0faf"}},{"_index":"blockbuilder","_type":"blocks","_id":"337680374993cf1d8c08","_score":0.3558116,"_source":{"userId":"abhishekpolavarapu","description":"D3 test.!","created_at":"2016-01-27T01:07:33Z","updated_at":"2016-01-27T01:24:06Z","api":["d3.select"],"colors":["#008080"],"readme":"Abhishek Polavarapu.\n\nWorking through the examples from Scott Murray's tutorial at\n[http://alignedleft.com/tutorials/d3/](http://alignedleft.com/tutorials/d3/)\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nImage and code from http://www.harding.edu/fmccown/r/\n\nEmbedding an image in Markdown:\n\n![R image](http://s11.postimg.org/lhqctonhv/bargraph.png \"R image\")\n\nEmbedding R code in Markdown:\n\n```R\n> cars <- c(25, 7, 5, 26, 11, 8, 25, 14, 23, 19, 14, 11, 22, 29, 11, 13, 12, 17, 18, 10, 24, 18, 25, 9, 35)\n> barplot(cars)\n```\n\n","code":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>D3 test</title>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style type=\"text/css\">\n\t\tdiv.bar{\n\t\tdisplay: inline-block;\n            width: 20px;\n            height: 75px;\n\t\t\tmargin-right: 2px;\n            background-color: teal;\"></div>\n\t\t\t}\n\t\t\t</style>\n    </head>\n    <body>\n        <script type=\"text/javascript\">\n                        var dataset = [];                                        //Initialize empty array\n\t\t\tfor (var i = 0; i < 25; i++) {\t\t\t         //Loop 25 times\n\t\t\t\tvar newNumber = Math.round(Math.random() * 30);  //New random integer (0-30)\n\t\t\t\tdataset = dataset.concat(newNumber);             //Add new number to array\n\t\t\t}\n\t\t\t\n\t\t\td3.select(\"body\").selectAll(\"div\")\n\t\t\t\t.data(dataset)\n\t\t\t\t.enter()\n\t\t\t\t.append(\"div\")\n\t\t\t\t.attr(\"class\", \"bar\")\n\t\t\t\t.style(\"height\", function(d) {\n\t\t\t\t\tvar barHeight = d * 5;\n\t\t\t\t\treturn barHeight + \"px\";\n\t\t\t\t});\n        </script>\n    </body>\n</html>   \n","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"b06c2730ae41d3da201c","_score":0.35547817,"_source":{"userId":"madebyafox","description":"D3 Scales","created_at":"2016-01-30T07:59:36Z","updated_at":"2016-01-30T08:17:58Z","api":["d3.select","d3.scale.linear","d3.svg.axis","d3.scale.pow","d3.scale.sqrt","d3.scale.log"],"colors":["#000000","#ff0000","#ffffff"],"readme":"D3 Scales\n---------\nPlaying with D3 scale options, using transition\n\nA [Pen](http://codepen.io/madebyafox/pen/zrawWb) by [Made By A Fox](http://codepen.io/madebyafox) on [CodePen](http://codepen.io/).\n\n[License](http://codepen.io/madebyafox/pen/zrawWb/license).","code":"<!doctype html>\n<meta charset=\"utf-8\">\n<head>\n  <script src=\"//d3js.org/d3.v3.min.js\"></script>\n  <style>\n  \n.axis .title {\n  font: 20px helvetica;\n}\n.axis text {\n  font: 10px sans-serif;\n}\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n}\n\nbutton {\n  color: none;\n  border: 2px black solid;\n  margin: 10px;\n  border-radius: 5px;\n  text-decoration: none;\n  padding: 10px;\n  font-size: 12px;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  -o-transition: .3s;\n  display: inline-block;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  -o-transition: .3s;\n  background-color:white;\n}\n\nbutton:hover {\n  background-color: black;\n  color: white\n}\n\n\n  </style>\n</head>\n<body>\n  <button id=\"rescaleLinear\"onclick=\"linear()\">Linear</button>\n  <button id=\"rescaleLog\" onclick=\"log();\">Logarithmic</button>\n  <button id=\"rescaleLn\" onclick=\"ln();\">Natural Log</button>\n  <button id=\"rescaleSqrt\" onclick=\"sqrt();\">SquareRoot</button>\n  <button id=\"rescalePower\" onclick=\"power();\">Power^2</button>\n\n<script>\nvar width = 960,\n  height = 800;\n\nvar domain1Day = [+new Date(2016, 1, 1), +new Date(2016, 1, 2)];\nvar domain1Month = [+new Date(2000, 1, 1), +new Date(2000, 2, 1)];\nvar simpleDomain = [0,10];\nvar simpleRange = [0,width];\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n//--------linear-------------------\nvar scale = d3.scale.linear()\n    .domain(simpleDomain)\n    .range([0, width]);\n\nvar axis = d3.svg.axis()\n    .scale(scale);\n\nvar g = svg.append(\"g\")\n    .attr(\"class\",\"axis\")\n    .attr(\"transform\", \"translate(0,50)\")\n    .call(axis);\n\n    g.append(\"text\")\n    .attr(\"class\",\"title\")                     \n    .attr(\"transform\",\"translate(0,-20)\")\n    .text(\"Linear Scale\");\n\n//-------power scale ----------------\nvar powerScale = d3.scale.pow().exponent(2)\n    .domain(simpleDomain)\n    .range(simpleRange);\n\nvar powerAxis = d3.svg.axis()\n    .scale(powerScale);\n\n//-------sqrt scale ----------------\nvar sqrtScale = d3.scale.sqrt()\n    .domain(simpleDomain)\n    .range(simpleRange);\n\nvar sqrtAxis = d3.svg.axis()\n    .scale(sqrtScale);\n\n//-------log scale ----------------\nvar logScale = d3.scale.log()\n    .domain([1, 10])\n    .range(simpleRange);\n\nvar logAxis = d3.svg.axis()\n    .ticks(20, \",.1s\")\n    .scale(logScale);\n\n//-------log scale ----------------\nvar lnScale = d3.scale.log()\n    .base(Math.E)\n    .domain([1, 10])\n    .range(simpleRange);\n\nvar lnAxis = d3.svg.axis()\n    .ticks(20, \",.1s\")\n    .scale(lnScale);\n\nfunction linear() {\n  d3.select(\".axis\")\n    .transition()\n    .duration(1500)\n    .ease(\"sin-in-out\")  \n    .call(axis);  \n  d3.select(\".title\")\n    .transition()\n    .duration(1500)\n    .text(\"Linear Scale\");\n}\nfunction log() {\n  d3.select(\".axis\")\n    .transition()\n    .duration(1500)\n    .ease(\"sin-in-out\")  \n    .call(logAxis);  \n  d3.select(\".title\")\n    .transition()\n    .duration(1500)\n    .text(\"Log Scale\");    \n}\nfunction ln() {\n  d3.select(\".axis\")\n    .transition()\n    .duration(1500)\n    .ease(\"sin-in-out\")  \n    .call(lnAxis);  \n  d3.select(\".title\")\n    .transition()\n    .duration(1500)\n    .text(\"Natural Log Scale\");    \n}\nfunction sqrt() {\n  d3.select(\".axis\")\n    .transition()\n    .duration(1500)\n    .ease(\"sin-in-out\")  \n    .call(sqrtAxis);  \n  d3.select(\".title\")\n    .transition()\n    .duration(1500)\n    .text(\"Square Root Scale\");\n}\nfunction power() {\n  d3.select(\".axis\")\n    .transition()\n    .duration(1500)\n    .ease(\"sin-in-out\")  \n    .call(powerAxis); \n  d3.select(\".title\")\n    .transition()\n    .duration(1500)\n    .text(\"Squared Power Scale\");\n}\n</script>\n</body>\n</html>","filenames":["D3 Scales.markdown","README.md","index.html","thumbnail.png"],"thumb":"17b31a59991630f0eba608f1e4e38535146538a4"}},{"_index":"blockbuilder","_type":"blocks","_id":"357d91975a97e9f68208","_score":0.3550921,"_source":{"userId":"jwarburg","description":"MapBox + d3","created_at":"2016-03-23T05:06:30Z","updated_at":"2016-03-23T05:06:32Z","api":["d3.select","d3.geo.path","d3.geo.bounds","d3.json"],"colors":["#000000","#ffffff","#a52a2a"],"readme":"\n\nforked from <a href='http://bl.ocks.org/tmcw/'>tmcw</a>'s block: <a href='http://bl.ocks.org/tmcw/3426132'>MapBox + d3</a>","code":"<!DOCTYPE html>\n<html>\n<head>\n  <script src='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.js'></script>\n  <script src='http://d3js.org/d3.v2.min.js?2.9.3'></script>\n  <link\n      href='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.css'\n      rel='stylesheet' />\n  <style>\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n    .d3-vec { position:absolute; }\n    path {\n      fill: #000;\n      fill-opacity: .2;\n      stroke: #fff;\n      stroke-width: 1.5px;\n    }\n\n    path:hover {\n      fill: brown;\n      fill-opacity: .7;\n    }\n  </style>\n</head>\n<body>\n<div id='map'></div>\n<script>\n  function folly() {\n      var f = {}, bounds, feature;\n      var div = d3.select(document.body)\n          .append(\"div\")\n          .attr('class', 'd3-vec'),\n      svg = div.append('svg'),\n      g = svg.append(\"g\");\n\n      f.parent = div.node();\n\n      // Use Leaflet to implement a D3 geographic projection.\n      f.project = function(x) {\n        var point = f.map.locationPoint({ lat: x[1], lon: x[0] });\n        return [point.x, point.y];\n      }\n\n      // Reposition the SVG to cover the features.\n      f.draw = function() {\n        var bounds = f.map.extent(),\n            bl = bounds.southWest(),\n            tr = bounds.northEast();\n        var bottomLeft = f.project([bl.lon, bl.lat]),\n            topRight = f.project([tr.lon, tr.lat]);\n\n        svg.attr(\"width\", topRight[0] - bottomLeft[0])\n            .attr(\"height\", bottomLeft[1] - topRight[1])\n            .style(\"margin-left\", bottomLeft[0] + \"px\")\n            .style(\"margin-top\", topRight[1] + \"px\");\n\n        g.attr(\"transform\", \"translate(\" + -bottomLeft[0] + \",\" + -topRight[1] + \")\");\n\n        path = d3.geo.path().projection(f.project);\n\n        feature.attr(\"d\", path);\n      }\n\n      f.data = function(collection) {\n          bounds = d3.geo.bounds(collection);\n          feature = g.selectAll(\"path\")\n              .data(collection.features)\n              .enter().append(\"path\");\n          return f;\n      };\n\n      return f;\n  }\n  mapbox.auto('map', 'examples.map-vyofok3q', function(map) {\n      d3.json(\"us-states.json\", function(collection) {\n          var l = folly().data(collection);\n          map.addLayer(l);\n          map.zoom(4).center({ lat: 37, lon: -90 });\n      });\n  });\n</script>\n</body>\n</html>\n","filenames":["README.md","index.html","us-states.json"]}},{"_index":"blockbuilder","_type":"blocks","_id":"6eccfa89906e65707ffe","_score":0.35440165,"_source":{"userId":"curran","description":"D3 Slider","created_at":"2015-09-10T01:34:46Z","updated_at":"2015-09-27T22:18:00Z","api":["d3.behavior.drag","d3.select"],"colors":["#000000"],"readme":"This example shows how to make a simple slider using D3.\n\n<!-- Start of SimpleHitCounter Code -->\n<div align=\"center\"><a href=\"http://www.simplehitcounter.com\" target=\"_blank\"><img src=\"http://simplehitcounter.com/hit.php?uid=1953440&f=16777215&b=0\" border=\"0\" height=\"18\" width=\"83\" alt=\"web counter\"></a></div>\n<!-- End of SimpleHitCounter Code -->\n","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n    }\n  </style>\n</head>\n<body>\n  <script>\n    var width = 960;\n    var height = 500;\n    var radius = 20;\n    var margin = 100;\n    \n    var x1 = margin;\n    var x2 = width - margin;\n    var y = height / 2;\n        \n    var drag = d3.behavior.drag()\n      .origin(function(d) { return d; })\n      .on(\"drag\", dragmove);\n    \n    var svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .datum({\n        x: width / 2,\n        y: height / 2\n      });\n    \n    var line = svg.append(\"line\")\n      .attr(\"x1\", x1)\n      .attr(\"x2\", x2)\n      .attr(\"y1\", y)\n      .attr(\"y2\", y)\n      .style(\"stroke\", \"black\")\n      .style(\"stroke-linecap\", \"round\")\n      .style(\"stroke-width\", 5);\n\n    var circle = svg.append(\"circle\")\n      .attr(\"r\", radius)\n      .attr(\"cy\", function(d) { return d.y; })\n      .attr(\"cx\", function(d) { return d.x; })\n      .style(\"cursor\", \"ew-resize\")\n      .call(drag);\n    \n    function dragmove(d) {\n      \n      // Get the updated X location computed by the drag behavior.\n      var x = d3.event.x;\n      \n      // Constrain x to be between x1 and x2 (the ends of the line).\n      x = x < x1 ? x1 : x > x2 ? x2 : x;\n      \n      // This assignment is necessary for multiple drag gestures.\n      // It makes the drag.origin function yield the correct value.\n      d.x = x;\n      \n      // Update the circle location.\n      circle.attr(\"cx\", x);\n    }\n  </script>\n</body>","filenames":["README.md","index.html","thumbnail.png"],"thumb":"c98d99b5372877abfdebd2618ab0b215a1062a5d"}},{"_index":"blockbuilder","_type":"blocks","_id":"844752","_score":0.3507241,"_source":{"userId":"mbostock","description":"d3.nest","created_at":"2011-02-26T00:13:22Z","updated_at":"2015-09-25T01:58:04Z","api":["d3.json","d3.nest","d3.select","d3.entries"],"colors":[],"readme":"","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"text/javascript\" src=\"https://github.com/mbostock/d3/raw/v1.2.1/d3.js\"></script>\n  </head>\n  <body>\n    <table id=\"countries\">\n    </table>\n    <script type=\"text/javascript\">\n\nd3.json(\"sample.json\", function(json) {\n  var data = d3.nest()\n      .key(function(d) { return d.Country.toLowerCase(); })\n      .sortKeys(d3.ascending)\n      .map(json);\n\n  var tr = d3.select(\"#countries\")\n    .selectAll(\"tr\")\n      .data(d3.entries(data))\n    .enter().append(\"tr\");\n\n  tr.append(\"th\")\n      .text(function(d) { return d.key; });\n\n  tr.selectAll(\"td\")\n      .data(function(d) { return d.value; })\n    .enter().append(\"td\")\n      .text(function(d) { return d.Aspect + \":  \" + d.Value; });\n});\n\n    </script>\n  </body>\n</html>\n","filenames":["index.html","sample.json","thumbnail.png"],"thumb":"bec3cd0ac548f6ad10ac9e6f7eee8e916409db01"}},{"_index":"blockbuilder","_type":"blocks","_id":"6641917","_score":0.35028172,"_source":{"userId":"enjalot","description":"d3 workshop","created_at":"2013-09-20T18:39:12Z","updated_at":"2016-03-05T06:37:45Z","api":["d3.dispatch","d3.extent","d3.time.scale","d3.svg.brush","d3.svg.axis","d3.time.format","d3.rebind","d3.layout.histogram","d3.max","d3.scale.linear","d3.scale.ordinal","d3.range","d3.scale.category20","d3.select","d3.json","d3.chart.table","d3.chart.scatter","d3.chart.histogram","d3.chart.brush","d3.min"],"colors":["#4b9e9e","#78c5c5","#276c86","#ffffff","#000000","#ff0000","#ffa500","#1f77b4","#aec7e8","#ff7f0e","#ffbb78","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5","#8c564b","#c49c94","#e377c2","#f7b6d2","#7f7f7f","#c7c7c7","#bcbd22","#dbdb8d","#17becf","#9edae5","#808080"],"readme":"","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<html>\n  <head>\n    <style>\n      svg {\n        width: 960px;\n        height: 500px;\n        border: 1px solid gray;\n      }\n      .table {\n        width: 960px;\n        height: 500px;\n        overflow: scroll;\n      }\n      .axis {\n        font-size: 10px;\n      }\n      .axis path {\n        fill: none;\n        stroke: #000000;\n      }\n      .axis .tick line {\n        stroke: #000;\n      }\n    </style>\n  </head>\n  <body>\n   \n    <svg></svg>\n    <div id=\"display\"></div>\n\n    <script src=\"http://d3js.org/d3.v3.js\"></script>\n    <script src=\"table.js\"></script>\n    <script src=\"scatter.js\"></script>\n    <script src=\"brush.js\"></script>\n    <script src=\"histogram.js\"></script>\n    <script>\n      var display = d3.select(\"#display\");\n\n      d3.json(\"pics.json\", function(err, pics) {\n        var data = pics.data.children;\n        data.forEach(function(d) {\n          d.data.created *= 1000;\n        })\n        console.log(data);\n\n        var display = d3.select(\"#display\")\n\n        //table\n        var tdiv = display.append(\"div\").classed(\"table\", true)\n        var table = d3.chart.table()\n        table.data(data)\n        table(tdiv);\n\n        var svg = d3.select(\"svg\")\n        //scatter plot\n        var sgroup = svg.append(\"g\")\n          .attr(\"transform\", \"translate(50, 0)\")\n        var scatter = d3.chart.scatter()\n        scatter.data(data)\n        scatter(sgroup)\n\n        //histogram\n        var hgroup = svg.append(\"g\")\n          .attr(\"transform\", \"translate(450, 0)\")\n        var histogram = d3.chart.histogram()\n        histogram.data(data)\n        histogram(hgroup)\n\n\n        //brush\n        var bgroup = svg.append(\"g\")\n          .attr(\"transform\", \"translate(100, 430)\")\n        var brush = d3.chart.brush()\n        brush\n          .data(data)\n          .width(800)\n        brush(bgroup)\n\n        brush.on(\"filter\", function(filtered) {\n          console.log(\"filtered\", filtered);\n\n          scatter.data(filtered);\n          scatter.update();\n          table.data(filtered)\n          table.update();\n          histogram.data(filtered)\n          histogram.update();\n\n\n        })\n\n        table.on(\"hover\", function(hovered) {\n          scatter.highlight(hovered)\n          brush.highlight(hovered)\n        })\n        scatter.on(\"hover\", function(hovered) {\n          table.highlight(hovered)\n          brush.highlight(hovered)\n        })\n        histogram.on(\"hover\", function(hovered) {\n          table.highlight(hovered)\n          scatter.highlight(hovered)\n          brush.highlight(hovered)\n        })\n      \n      })\n\n    </script>\n  </body>\n</html>\n","filenames":["brush.js","histogram.js","index.html","pics.json","scatter.js","table.js"]}},{"_index":"blockbuilder","_type":"blocks","_id":"3426132","_score":0.35020334,"_source":{"userId":"tmcw","description":"MapBox + d3","created_at":"2012-08-22T14:31:03Z","updated_at":"2016-01-05T17:12:07Z","api":["d3.select","d3.geo.path","d3.geo.bounds","d3.json"],"colors":["#000000","#ffffff","#a52a2a"],"readme":"","code":"<!DOCTYPE html>\n<html>\n<head>\n  <script src='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.js'></script>\n  <script src='http://d3js.org/d3.v2.min.js?2.9.3'></script>\n  <link\n      href='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.css'\n      rel='stylesheet' />\n  <style>\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n    .d3-vec { position:absolute; }\n    path {\n      fill: #000;\n      fill-opacity: .2;\n      stroke: #fff;\n      stroke-width: 1.5px;\n    }\n\n    path:hover {\n      fill: brown;\n      fill-opacity: .7;\n    }\n  </style>\n</head>\n<body>\n<div id='map'></div>\n<script>\n  function folly() {\n      var f = {}, bounds, feature;\n      var div = d3.select(document.body)\n          .append(\"div\")\n          .attr('class', 'd3-vec'),\n      svg = div.append('svg'),\n      g = svg.append(\"g\");\n\n      f.parent = div.node();\n\n      // Use Leaflet to implement a D3 geographic projection.\n      f.project = function(x) {\n        var point = f.map.locationPoint({ lat: x[1], lon: x[0] });\n        return [point.x, point.y];\n      }\n\n      // Reposition the SVG to cover the features.\n      f.draw = function() {\n        var bounds = f.map.extent(),\n            bl = bounds.southWest(),\n            tr = bounds.northEast();\n        var bottomLeft = f.project([bl.lon, bl.lat]),\n            topRight = f.project([tr.lon, tr.lat]);\n\n        svg.attr(\"width\", topRight[0] - bottomLeft[0])\n            .attr(\"height\", bottomLeft[1] - topRight[1])\n            .style(\"margin-left\", bottomLeft[0] + \"px\")\n            .style(\"margin-top\", topRight[1] + \"px\");\n\n        g.attr(\"transform\", \"translate(\" + -bottomLeft[0] + \",\" + -topRight[1] + \")\");\n\n        path = d3.geo.path().projection(f.project);\n\n        feature.attr(\"d\", path);\n      }\n\n      f.data = function(collection) {\n          bounds = d3.geo.bounds(collection);\n          feature = g.selectAll(\"path\")\n              .data(collection.features)\n              .enter().append(\"path\");\n          return f;\n      };\n\n      return f;\n  }\n  mapbox.auto('map', 'examples.map-vyofok3q', function(map) {\n      d3.json(\"us-states.json\", function(collection) {\n          var l = folly().data(collection);\n          map.addLayer(l);\n          map.zoom(4).center({ lat: 37, lon: -90 });\n      });\n  });\n</script>\n</body>\n</html>\n","filenames":["index.html","us-states.json"]}},{"_index":"blockbuilder","_type":"blocks","_id":"f7b24a7a56e5caa479d2","_score":0.3501558,"_source":{"userId":"balajikvijayan","description":"AirBnB D3","created_at":"2015-12-11T01:33:50Z","updated_at":"2015-12-11T01:33:50Z","api":["d3.select","d3.max","d3.extent","d3.scale.linear","d3.svg.axis","d3.selectAll","d3.csv"],"colors":["#4eb0bb","#ff0000","#008000","#0000ff","#808080","#000000"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)","code":"<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.8/d3.min.js\"></script>\n  <style>\n    circle {\n      opacity: 0.2;\n    }\n    body {\n        font-family: futura;\n    }\n    h2.title {\n      color: black;\n      text-align: center;\n    }\n    .axis {\n      font-family: arial;\n      font-size: 0.7em;\n    }\n    text {\n      fill: black;\n    }\n    .label {\n      font-size: 2em;\n    }\n    path {\n      fill: none;\n      stroke: black;\n      stroke-width: 1px;\n    }\n    .tick {\n      fill: none;\n      stroke: black;\n    }\n    .line {\n      fill: none;\n      stroke: #4eb0bb;\n      stroke-width: 1px;\n    }\n  </style>\n  <script>\n    function draw(data) {\n    \"use strict\";\n\n    /*\n        D3.js setup code\n    */\n\n    // set margins according to Mike Bostock's margin conventions\n    // http://bl.ocks.org/mbostock/3019563\n    var margin = {top: 25, right: 40, bottom: 150, left: 75};\n    \n    // set height and width of chart\n    var width = 700 - margin.left - margin.right,\n        height = 800 - margin.top - margin.bottom;\n    \n    // specify the radius of our circles and the\n    // column we want to plot\n    var radius = 3,\n        field = 'San Francisco',\n        x_field = \"number_of_reviews\",\n        y_field = \"availability_365\";\n  \n    // Append the title for the graph\n    d3.select(\"body\")\n        .append(\"h2\")\n        .text(field + \" Listings\")\n        .attr('class', 'title');\n    \n    // append the SVG tag with height and width to accommodate for margins\n    var svg = d3.select(\"body\")\n                .append(\"svg\")\n                    .attr(\"width\", width + margin.left + margin.right)\n                    .attr(\"height\", height + margin.top + margin.bottom)\n                .append('g')\n                    .attr('class','chart')\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    \n    // remove missing values\n    data = data.filter(function(d) {\n      return d[y_field];\n    });\n\n    // bind our data to svg circles for the scatter plot\n    svg.selectAll(\"circle\")\n        .data(data)\n        .enter()\n        .append(\"circle\")\n      \n      // maximum price\n      var max_y = d3.max(data, function(d) {\n          return +d[y_field];\n//         \treturn 10000;\n      });\n\n      // get min/max review count\n      var review_extent = d3.extent(data, function(d){\n          return +d[x_field];\n      });\n\n      // Create x-axis scale mapping dates -> pixels\n      var review_scale = d3.scale.linear()\n          .range([0, width])\n          .domain(review_extent);\n\n      // Create y-axis scale mapping price -> pixels\n      var measure_scale = d3.scale.linear()\n          .range([height, 0])\n          .domain([0, max_y]);\n//       \t\t.domain([0, 10000]);\n\n      // Create D3 axis object from time_scale for the x-axis\n      var x_axis = d3.svg.axis()\n          .scale(review_scale);\n\n      // Create D3 axis object from measure_scale for the y-axis\n      var measure_axis = d3.svg.axis()\n          .scale(measure_scale)\n          .orient(\"left\");\n\n      // Append SVG to page corresponding to the D3 x-axis\n      svg.append('g')\n          .attr('class', 'x axis')\n          .attr('transform', \"translate(0,\" + height + \")\")\n          .call(x_axis);\n\n      // Append SVG to page corresponding to the D3 y-axis\n      svg.append('g')\n          .attr('class', 'y axis')\n          .call(measure_axis);\n\n      // add label to y-axis\n      d3.select(\".y.axis\")\n          .append(\"text\")\n          .attr('class', 'label')\n          .text(\"Price (dollar/sq-ft)\")\n          .attr(\"transform\", \"rotate(-90, -50, 0) translate(-450)\");\n\n      // based on the data bound to each svg circle,\n      // change its center-x (cx) and center-y (cy)\n      // coordinates\n      d3.selectAll('circle')\n          .attr('cx', function(d) {\n              return review_scale(+d[x_field]);\n          })\n          .attr('cy', function(d) {\n              return measure_scale(+d[y_field]);\n          })\n          .attr('r', function(d) {\n            return 2;\n          })\n          .style('fill', function(d) {\n            switch (d['room_type']) {\n              case 'Entire home/apt':\n                return 'red';\n              case 'Private room':\n                return 'green'\n              case 'Shared room':\n                return 'blue';\n              default:\n                return 'gray';\n            }\n          });\n    }\n  </script>\n</head>\n  <body>\n    <script>\n      /*\n      Use D3 to load the CSV file and pass\n      the contents of it to the draw function.\n      */\n      d3.csv(\"http://jay-oh-en.github.io/interactive-data-viz/data/airbnb/listings.csv\", draw);\n    </script>\n  </body>\n</html>","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"899649","_score":0.34989044,"_source":{"userId":"mbostock","description":"Polymaps + D3","created_at":"2011-04-02T17:01:34Z","updated_at":"2016-02-08T23:44:39Z","api":["d3.select","d3.json","d3.entries"],"colors":["#e6e6e6","#a52a2a","#000000"],"readme":"","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"text/javascript\" src=\"https://cdn.rawgit.com/mbostock/d3/v1.8.4/d3.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdn.rawgit.com/simplegeo/polymaps/v2.4.0/polymaps.js\"></script>\n    <style type=\"text/css\">\n\n@import url(\"https://cdn.rawgit.com/simplegeo/polymaps/v2.4.0/examples/example.css\");\n\nhtml, body {\n  height: 100%;\n  background: #E6E6E6;\n  margin: 0;\n  font: 10px sans-serif;\n}\n\nsvg {\n  display: block;\n}\n\ncircle {\n  stroke: black;\n  fill: brown;\n  fill-opacity: .5;\n}\n\n#map {\n  width: 960px;\n  height: 500px;\n}\n\n    </style>\n  </head>\n  <body>\n    <div id=\"map\"></div>\n    <script type=\"text/javascript\">\n\nvar po = org.polymaps;\n\n// Create the map object, add it to #map…\nvar map = po.map()\n    .container(d3.select(\"#map\").append(\"svg:svg\").node())\n    .zoom(8)\n    .add(po.interact());\n\n// Add the CloudMade image tiles as a base layer…\nmap.add(po.image()\n    .url(po.url(\"http://{S}tile.cloudmade.com\"\n    + \"/1a1b06b230af4efdbb989ea99e9841af\" // http://cloudmade.com/register\n    + \"/998/256/{Z}/{X}/{Y}.png\")\n    .hosts([\"a.\", \"b.\", \"c.\", \"\"])));\n\n// Add the custom stations layer…\nmap.add(stations(\"stations.json\"));\n\n// Add the compass control on top.\nmap.add(po.compass()\n    .pan(\"none\"));\n\n// Custom layer implementation.\nfunction stations(url) {\n  var data;\n\n  // Create the base layer object, using our tile factory.\n  // Note that the layer isn't tiled; only one tile per world.\n  var layer = po.layer(load)\n      .tile(false);\n\n  // Load the station data. When the data comes back, reload.\n  d3.json(url, function(json) {\n    data = json;\n    layer.reload();\n  });\n\n  // Custom tile implementation.\n  function load(tile, projection) {\n    projection = projection(tile).locationPoint;\n\n    // Add an svg:g for each station.\n    var g = d3.select(tile.element = po.svg(\"g\")).selectAll(\"g\")\n        .data(d3.entries(data))\n      .enter().append(\"svg:g\")\n        .attr(\"transform\", transform);\n\n    // Add a circle.\n    g.append(\"svg:circle\")\n        .attr(\"r\", 4.5);\n\n    // Add a label.\n    g.append(\"svg:text\")\n        .attr(\"x\", 7)\n        .attr(\"dy\", \".31em\")\n        .text(function(d) { return d.key; });\n\n    function transform(d) {\n      d = projection({lon: d.value[0], lat: d.value[1]});\n      return \"translate(\" + d.x + \",\" + d.y + \")\";\n    }\n  }\n\n  return layer;\n}\n\n    </script>\n  </body>\n</html>\n","filenames":[".block","index.html","stations.json","thumbnail.png"],"thumb":"b882d40e0524553c695c97b43e80a1dc67287f70"}},{"_index":"blockbuilder","_type":"blocks","_id":"803b712a4d6efbf7bdb4","_score":0.34981424,"_source":{"userId":"WilliamQLiu","description":"D3 Scatterplot","created_at":"2014-07-30T20:13:36Z","updated_at":"2015-08-29T14:04:43Z","api":["d3.select","d3.scale.linear","d3.max","d3.svg.axis"],"colors":["#008000","#006400","#000000"],"readme":"","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Load D3 from site -->\n    <script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n  </head>\n \n    <!-- CSS (Styling) -->\n    <style type=\"text/css\">\n      .axis path,\n        .axis line {\n            fill: none;\n            stroke: black;\n            shape-rendering: crispEdges;\n        }\n        .axis text {\n            font-family: sans-serif;\n            font-size: 11px;\n        }\n    </style>\n    <!-- End CSS (Styling) -->\n \n  <body>\n    <h2>Bar Chart</h2>\n    <p>This is a data visualization using bar charts </p>\n    <h3></h3>\n  \n  <!-- Begin D3 Javascript -->\n  <script type=\"text/javascript\">\n  \n            // ===== Start Scatterplot =====\n            // Setup settings for graphic\n            var canvas_width = 500;\n            var canvas_height = 200;\n            var padding = 25;  // Padding around canvas, i.e. replaces the 0 of scale\n\n            // Create SVG element\n            var svg = d3.select(\"h3\")  // This is where we put our vis\n                .append(\"svg\")\n                .attr(\"width\", canvas_width)\n                .attr(\"height\", canvas_height)\n\n            // scatterplot data is an array of arrays\n            var data_scatter = [[5, 20], [480, 90], [250, 50], [100, 50], [330, 30], [475, 33],\n                [77, 10], [150, 150]];  // Can add additional values and will scale\n\n            // Define Scales - scales map an input domain with an output range\n            var xScale = d3.scale.linear()\n                .domain([0, d3.max(data_scatter, function(d) {\n                    return d[0];  // get the input domain as first column of array\n                })])\n                .range([padding, canvas_width - padding * 2])  // set the output range\n                .nice();  // Make decimals round up nicely\n\n            var yScale = d3.scale.linear()\n                .domain([0, d3.max(data_scatter, function(d) {\n                    return d[1];  // gets the input domain as the second column of array\n                })])\n                .range([canvas_height - padding, padding])  // set the output range\n                .nice();  // Make decimals round up nicely\n\n            // Add circles from data\n            svg.selectAll(\"circle\")\n                .data(data_scatter)\n                .enter()\n                .append(\"circle\")\n                .attr(\"x\", function(d) {\n                    return xScale(d[0]);  // Location of x\n                })\n                .attr(\"y\", function(d) {\n                    return yScale(d[1]);  // Location of y\n                })\n                .attr(\"r\", 4)  // Radius\n                .attr(\"cx\", function(d) {\n                    return xScale(d[0]);  // Returns scaled circle x\n                })\n                .attr(\"cy\", function(d) {\n                    return yScale(d[1]);  // Returns scaled circle y\n                });\n\n            // Add Text Labels\n            svg.selectAll(\"text\")\n                .data(data_scatter)\n                .enter()\n                .append(\"text\")\n                .text(function(d) {\n                    return d[0] + \",\" + d[1];\n                })\n                .attr(\"x\", function(d) {\n                    return xScale(d[0]);  // Returns scaled location of x\n                })\n                .attr(\"y\", function(d) {\n                    return yScale(d[1]);  // Returns scaled circle y\n                })\n                .attr(\"font_family\", \"sans-serif\")  // Font type\n                .attr(\"font-size\", \"11px\")  // Font size\n                .attr(\"fill\", \"darkgreen\");   // Font color\n\n            // Define X axis and attach to graph\n            var xAxis = d3.svg.axis()  // Create an x axis\n                .scale(xScale)      // Scale x axis\n                .orient(\"bottom\")  // Put text on bottom of axis line\n                .ticks(10);  // Set rough # of ticks (optional)\n\n            svg.append(\"g\")     // Append a group element (itself invisible, but helps 'group' elements)\n                .attr(\"class\", \"axis\")  // Assign the 'axis' CSS\n                .attr(\"transform\", \"translate(0,\" + (canvas_height - padding) + \")\")  // Place axis at bottom\n                .call(xAxis);  // Call function to create axis\n\n            // Define Y axis and attach to graph\n            var yAxis = d3.svg.axis()  // Create a y axis\n                .scale(yScale)  // Scale y axis\n                .orient(\"left\")\n                .ticks(5);  // Set rough # of ticks (optional)\n\n            svg.append(\"g\")\n                .attr(\"class\", \"axis\")\n                .attr(\"transform\", \"translate(\" + padding + \",0)\")\n                .call(yAxis);\n \n  </script>\n  \n  </body>\n</html>","filenames":["index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"3616279","_score":0.34821805,"_source":{"userId":"GerHobbelt","description":"d3.js: force layout with self-referencing links","created_at":"2012-09-04T03:37:33Z","updated_at":"2015-10-10T02:08:06Z","api":["d3.svg.line","d3.scale.pow","d3.scale.log","d3.scale.category20","d3.geom.hull","d3.select","d3.scale.linear","d3.behavior.drag","d3.json","d3.layout.force","d3.timer"],"colors":["#cccccc","#555555","#ffffff","#333333","#00eeee","#33bbbb","#231f20","#939598","#58595b","#ff0000","#ffa500","#d2b48c","#008000","#b0c4de","#4682b4","#0000ff","#1f77b4","#aec7e8","#ff7f0e","#ffbb78","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5","#8c564b","#c49c94","#e377c2","#f7b6d2","#7f7f7f","#c7c7c7","#bcbd22","#dbdb8d","#17becf","#9edae5"],"readme":"# Experiment �� <a href=\"http://bl.ocks.org/3616279\" title=\"view this gist via bl.ocks.org\">?</a> <a href=\"http://bl.ocks.org/GerHobbelt\" title=\"view a list of all my gists at bl.ocks.org\">8</a>\n\nDerived from the D3.js example [force_cluster.html](https://github.com/mbostock/d3/blob/master/examples/force/force-cluster.html) and [gist 3104394](http://bl.ocks.org/3104394).\n\nFeatures\n========\n\n- all of [gist 3104394](http://bl.ocks.org/3104394) [@ github](https://gist.github.com/3104394)\n- showcases a tweaked 'miserables.json' file which includes 'circular links' i.e. links which connect node A to node A (~ self-reference)\n\nUsage\n-----\n\n* Slide the 'debug level' slider to see the various debug levels visually; the hospital curves are (top): force.alpha and (bottom) total x/y change squared: a measurement for the amount of movement of nodes in the graph. Note that the bottom curve is inverted, so that when both meet, you're getting close to done. :-)\n* Click on node to expand or collapse. When a node has 'bundled' outgoing links, the first click will expand only those (a.k.a. 2nd display mode / expand state = 1), the next click will then expand the group node itself.\n* Click on hull (which shows up when you expanded a group node) to collapse the group.\n* Drag node to move entire graph around.\n\nNotes\n-----\n\nThe ability to draw circular references is following the overall force design used here, \nwhere helper nodes (and ditto links) are used to produce the bezier-based links; \na self-reference is nothing but yet another nodeA -> helper -> nodeB link chain where\n'nodeB' just happens to be nodeA again.\n\nThis code uses two(2) d3.layout.force() forces: one to layout the original nodes (or their group node equivalent),\nthe second is used to layout all the helper nodes (which are only visible in debug modes 1 and 2): the latter are \nused to construct the bezier paths representing the links.\n\n","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <title>Clustered Network</title>\n    <script src=\"http://d3js.org/d3.v2.js\"></script>\n    <link href='http://fonts.googleapis.com/css?family=Gudea:700,400italic,400' rel='stylesheet' type='text/css'>\n    <style type=\"text/css\">\nsvg {\n  border: 1px solid #ccc;\n}\nbody {\n  font: 10px 'Gudea', sans-serif;\n}\ntext {\n  font-family: 'Gudea', sans-serif;\n  font-size: 9pt;\n}\ncircle.node {\n  fill: lightsteelblue;\n  stroke: #555;\n  stroke-width: 3px;\n}\ncircle.leaf {\n  stroke: #fff;\n  stroke-width: 1.5px;\n}\ncircle.link-expanded {\n  stroke: #555;\n  stroke-width: 3px;\n  stroke-dasharray: 2px 4px;\n}\ncircle.helper {\n  stroke-width: 0;\n  fill: #333;\n  opacity: 0.6;\n}\ncircle.center-of-mass {\n  fill: white;\n  stroke: red;\n  stroke-width: 5px;\n}\npath.hull {\n  fill: lightsteelblue;\n  fill-opacity: 0.3;\n}\npath.hlink {\n  stroke: #333;\n  stroke-opacity: 0.5;\n  fill: none;\n  pointer-events: none;\n}\npath.trace-alpha {\n  stroke: #0ee;\n  stroke-opacity: 0.8;\n  stroke-width: 1.5px;\n  fill: none;\n  pointer-events: none;\n}\npath.trace-c2 {\n  stroke: #3bb;\n  stroke-opacity: 0.8;\n  stroke-width: 1.5px;\n  fill: none;\n  pointer-events: none;\n}\nline.link {\n  stroke: red;\n  stroke-opacity: 0.7;\n  pointer-events: none;\n}\n    </style>\n  </head>\n  <body>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"controls\" visibility=\"hidden\">\n  <g visibility=\"visible\">\n    <rect x=\"0\" y=\"0.55\" opacity=\"0.6\" fill=\"#FFFFFF\" stroke=\"#231F20\" stroke-miterlimit=\"10\" width=\"192\" height=\"22\"/>\n    <text transform=\"matrix(1 0 0 1 4.5066 15.343)\"  >Debug level:</text>\n    <g id=\"slider-debug-level\">\n      <line id=\"slider-x-debug-level\" fill=\"none\" stroke=\"#939598\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"73.5\" y1=\"11.05\" x2=\"160.5\" y2=\"11.05\"/>\n      <rect id=\"sliderpos-debug-level\" x=\"77\" y=\"3.55\" fill=\"#58595B\" stroke=\"#231F20\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" width=\"4\" height=\"15\"/>\n            <text id=\"sliderval-debug-level\" transform=\"matrix(1 0 0 1 164.6638 15.343)\"  >?????</text>\n    </g>\n  </g>\n</svg>\n\n<script type=\"text/javascript\" src=\"http://gerhobbelt.github.com/bl.ocks.org-hack/fixit.js\" ></script>\n\n    <script type=\"text/javascript\">\nvar width = 960,        // svg width\n    height = 500,       // svg height\n    dr = 4,             // default point radius\n    off = 15,           // cluster hull offset\n    cycle_curvep = 0.5, // cyclic ~ self-referential links: determines the 'radius' of the bezier path constructed for the link\n    expand = {},        // expanded clusters\n    data, net, force1, force2, hullg, hull, linkg, helper_linkg, link, hlink, nodeg, helper_nodeg, node, hnode,\n    debug = 3,          // 0: disable, 1: all, 2: only force2 + curves, 3: curves only\n    alpha_trace = [], alpha_line, alpha_scale, debug_g,\n    c2_trace = [], c2_line, c2_scale, debug_g;\n\n    //for (var gn = 0; gn < 20; gn++) expand[gn] = 2;\n\nalpha_line = d3.svg.line()\n  .x(function(d, i) {\n    return i + 10;\n  })\n  .y(function(d, i) {\n    return d;\n  });\n\nalpha_scale = d3.scale.pow().exponent(-1.0).domain([5,.005]).range([10, height - 10]).clamp(true);\n\nc2_scale = d3.scale.log().domain([0.01, width * height]).range([10, height - 10]).clamp(true);\n\nc2_line = d3.svg.line()\n  .x(function(d, i) {\n    return i + 10;\n  })\n  .y(function(d, i) {\n    return d;\n  });\n\nvar curve = d3.svg.line()\n  .interpolate(\"cardinal-closed\")\n  .tension(.85);\n\nvar fill = d3.scale.category20();\n\nfunction noop() { return false; }\n\nfunction nodeid(n) {\n  return n.size > 0 ? \"_g_\" + n.group + \"_\" + n.expansion : n.name;\n}\n\nfunction linkid(l) {\n  var u = nodeid(l.source),\n      v = nodeid(l.target);\n  return u<v ? u+\"|\"+v : v+\"|\"+u;\n}\n\nfunction getGroup(n) { return n.group; }\n\nfunction cycleState(d) {\n  var g = d.group, s = expand[g] || 0;\n  // it's no use 'expanding the intergroup links only' for nodes which only have 1 outside link for real:\n  if (d.ig_link_count < 2)\n    s = (s ? 0 : 2);\n  else {\n    s++; s %= 3;\n  }\n  return expand[g] = s;\n}\n\n// constructs the network to visualize\nfunction network(data, prev) {\n  expand = expand || {};\n  var gm = {},    // group map\n      nm = {},    // node map\n      nml = {},   // node map for left-side 'link path helper nodes'\n      nmr = {},   // node map for right-side 'link path helper nodes'\n      nmc = {},   // node map for cyclic ~ self-referencing 'link path helper nodes'\n      nmimg = {}, // node map for cloned nodes for force2\n      lm = {},    // link maps - lm ~ lml-lmm-lmr\n      lml = {},\n      lmm = {},\n      lmr = {},\n      lmc = {},\n      gn = {},                  // previous group nodes\n      gc = {},                  // previous group centroids\n      nodes = [],               // output nodes\n      links = [],               // output links\n      helper_nodes = [],        // helper force graph nodes\n      helper_links = [];        // helper force graph links\n      helper_render_links = []; // helper force graph links\n  var k;\n\n  // process previous nodes for reuse or centroid calculation\n  if (prev) {\n    prev.nodes.forEach(function(n) {\n      var i = getGroup(n), o;\n      if (n.size > 0) {\n        gn[i] = n;\n        n.size = 0;\n        n.ig_link_count = 0;\n        n.link_count = 0;\n        n.first_link = null;\n        n.first_link_target = null;\n      } else {\n        o = gc[i] || (gc[i] = {x:0,y:0,count:0});\n        o.x += n.x;\n        o.y += n.y;\n        o.count += 1; // we count regular nodes here, so .count is a measure for the number of nodes in the group\n      }\n    });\n  }\n\n  // determine nodes\n  for (k=0; k<data.nodes.length; ++k) {\n    var n = data.nodes[k],\n        i = getGroup(n),\n        expansion = expand[i] || 0,\n        l = gm[i] || (gm[i]=gn[i]) || (gm[i]={group:i, size:0, nodes:[], ig_link_count:0, link_count:0, expansion: expansion}),\n        img;\n\n    // we need to create a NEW object when expansion changes from 0->1 for a group node\n    // in order to break the references from the d3 selections, so that the next time\n    // this group node will indeed land in the 'enter()' set\n    if (l.expansion != expansion) {\n      l = gn[i] = gm[i] = {group:l.group, x:l.x, y: l.y, size:l.size, nodes:l.nodes, ig_link_count:l.ig_link_count, link_count:l.link_count, expansion: expansion};\n    }\n\n    if (expansion == 2) {\n      // the node should be directly visible\n      nm[nodeid(n)] = n;\n      img = {ref: n, x: n.x, y: n.y, size: n.size || 0, fixed: 1, id: nodeid(n)};\n      nmimg[nodeid(n)] = img;\n      nodes.push(n);\n      helper_nodes.push(img);\n      if (gn[i]) {\n        // place new nodes at cluster location (plus jitter)\n        n.x = gn[i].x + Math.random();\n        n.y = gn[i].y + Math.random();\n      }\n    } else {\n      // the node is part of a collapsed cluster\n      if (l.size == 0) {\n        // if new cluster, add to set and position at centroid of leaf nodes\n        nm[nodeid(n)] = l;\n        l.size = 1;                     // hack to make nodeid() work correctly for the new group node\n        nm[nodeid(l)] = l;\n        img = {ref: l, x: l.x, y: l.y, size: l.size || 0, fixed: 1, id: nodeid(l)};\n        nmimg[nodeid(l)] = img;\n        l.size = 0;                     // undo hack\n        nmimg[nodeid(n)] = img;\n        nodes.push(l);\n        helper_nodes.push(img);\n        if (gc[i]) {\n          l.x = gc[i].x / gc[i].count;\n          l.y = gc[i].y / gc[i].count;\n        }\n      } else {\n        // have element node point to group node:\n        nm[nodeid(n)] = l; // l = shortcut for: nm[nodeid(l)];\n        nmimg[nodeid(n)] = nmimg[nodeid(l)];\n      }\n      l.nodes.push(n);\n    }\n    // always count group size as we also use it to tweak the force graph strengths/distances\n    l.size += 1;\n    n.group_data = l;\n    n.link_count = 0;\n    n.first_link = null;\n    n.first_link_target = null;\n  }\n\n  // determine links\n  for (k=0; k<data.links.length; ++k) {\n    var e = data.links[k],\n        u = getGroup(e.source),\n        v = getGroup(e.target),\n        rui, rvi, ui, vi, lu, rv, ustate, vstate, uimg, vimg,\n        i, ix,\n        l, ll, l_, lr;\n    if (u != v) {\n      gm[u].ig_link_count++;\n      gm[v].ig_link_count++;\n    }\n    ustate = expand[u] || 0;\n    vstate = expand[v] || 0;\n    // while d3.layout.force does convert link.source and link.target NUMERIC values to direct node references,\n    // it doesn't for other attributes, such as .real_source, so we do not use indexes in nm[] but direct node\n    // references to skip the d3.layout.force implicit links conversion later on and ensure that both .source/.target\n    // and .real_source/.real_target are of the same type and pointing at valid nodes.\n    rui = nodeid(e.source);\n    rvi = nodeid(e.target);\n    u = nm[rui];\n    v = nm[rvi];\n    if (u == v) {\n      // skip non-original links from node to same (A-A); they are rendered as 0-length lines anyhow. Less links in array = faster animation.\n      if (ustate < 2)\n        continue;\n\n      // self-referential 'links' are produced as 2 links+1 helper node; this is a generalized approach so we\n      // can support multiple self-referential links as thanks to the force layout\n      // those helpers will all be in different places, hence the link 'path' for each\n      // parallel link will be different.\n      ui = nodeid(u);\n      i = ui+\"|\"+ui+\"|\"+k;\n      l = lm[i] || (lm[i] = {source:u, target:u, size:0, distance: 0});\n      l.cyclic = true;\n      ix = i;\n      // link(u,v) ==> u -> lu -> u\n      lu = nmc[ix] || (nmc[ix] = data.helpers.cyclic[ix] || (data.helpers.cyclic[ix] = {ref: u, id: \"_ch_\" + ix, size: -1, link_ref: l, cyclic_helper: true}));\n      uimg = nmimg[ui];\n      l_ = lmc[ix] || (lmc[ix] = {g_ref: l, ref: e, id: \"c\"+ix, source:uimg, target: lu, real_source:u, size: 0, distance: 0, cyclic: true});\n      l.size += 1;\n      l_.size += 1;\n      continue;\n    }\n    // 'links' are produced as 3 links+2 helper nodes; this is a generalized approach so we\n    // can support multiple links between element nodes and/or groups, always, as each\n    // 'original link' gets its own set of 2 helper nodes and thanks to the force layout\n    // those helpers will all be in different places, hence the link 'path' for each\n    // parallel link will be different.\n    ui = nodeid(u);\n    vi = nodeid(v);\n    i = (ui < vi ? ui+\"|\"+vi : vi+\"|\"+ui);\n    l = lm[i] || (lm[i] = {source:u, target:v, size:0, distance: 0});\n    if (ustate == 1) {\n      ui = rui;\n    }\n    if (vstate == 1) {\n      vi = rvi;\n    }\n    ix = (ui < vi ? ui+\"|\"+vi+\"|\"+ustate+\"|\"+vstate : vi+\"|\"+ui+\"|\"+vstate+\"|\"+ustate);\n    ix = (ui < vi ? ui+\"|\"+vi : vi+\"|\"+ui);\n    // link(u,v) ==> u -> lu -> rv -> v\n    lu = nml[ix] || (nml[ix] = data.helpers.left[ix]  || (data.helpers.left[ix]  = {ref: u, id: \"_lh_\" + ix, size: -1, link_ref: l}));\n    rv = nmr[ix] || (nmr[ix] = data.helpers.right[ix] || (data.helpers.right[ix] = {ref: v, id: \"_rh_\" + ix, size: -1, link_ref: l}));\n    uimg = nmimg[ui];\n    vimg = nmimg[vi];\n    ll = lml[ix] || (lml[ix] = {g_ref: l, ref: e, id: \"l\"+ix, source:uimg, target:  lu, real_source:u, real_target:v, size:0, distance: 0, left_seg  : true});\n    l_ = lmm[ix] || (lmm[ix] = {g_ref: l, ref: e, id: \"m\"+ix, source:  lu, target:  rv, real_source:u, real_target:v, size:0, distance: 0, middle_seg: true});\n    lr = lmr[ix] || (lmr[ix] = {g_ref: l, ref: e, id: \"r\"+ix, source:  rv, target:vimg, real_source:u, real_target:v, size:0, distance: 0, right_seg : true});\n    l.size += 1;\n    ll.size += 1;\n    l_.size += 1;\n    lr.size += 1;\n\n    // these are only useful for single-linked nodes, but we don't care; here we have everything we need at minimum cost.\n    if (l.size == 1) {\n      u.link_count++;\n      v.link_count++;\n      u.first_link = l;\n      v.first_link = l;\n      u.first_link_target = v;\n      v.first_link_target = u;\n    }\n  }\n\n  for (k in lm) { links.push(lm[k]); }\n  for (k in lml) { helper_links.push(lml[k]); }\n  for (k in lmm) { helper_links.push(lmm[k]); helper_render_links.push(lmm[k]); }\n  for (k in lmr) { helper_links.push(lmr[k]); }\n  for (k in lmc) { helper_links.push(lmc[k]); helper_render_links.push(lmc[k]); }\n  for (k in nml) { helper_nodes.push(nml[k]); }\n  for (k in nmr) { helper_nodes.push(nmr[k]); }\n  for (k in nmc) { helper_nodes.push(nmc[k]); }\n  //for (k in nmc) { nodes.push(nmc[k]); }\n\n  return {nodes: nodes, links: links, helper_nodes: helper_nodes, helper_links: helper_links, helper_render_links: helper_render_links};\n}\n\nfunction convexHulls(nodes, offset) {\n  var hulls = {};\n\n  // create point sets\n  for (var k=0; k<nodes.length; ++k) {\n    var n = nodes[k];\n    if (n.size) continue;\n    var i = getGroup(n),\n        l = hulls[i] || (hulls[i] = []);\n    l.push([n.x - offset, n.y - offset]);\n    l.push([n.x - offset, n.y + offset]);\n    l.push([n.x + offset, n.y - offset]);\n    l.push([n.x + offset, n.y + offset]);\n  }\n\n  // create convex hulls\n  var hullset = [];\n  for (i in hulls) {\n    hullset.push({group: i, path: d3.geom.hull(hulls[i])});\n  }\n\n  return hullset;\n}\n\nfunction drawCluster(d) {\n  return curve(d.path); // 0.8\n}\n\n// these functions call init(); by declaring them here,\n// they don't have the old init() as a closure any more.\n// This should save us some memory and cycles when using\n// this in a long-running setting.\n\nfunction on_hull_click(d) {\n  if (debug == 1) console.log(\"node click\", d, arguments, this, expand[d.group]);\n  // clicking on 'path helper nodes' shouln't expand/collapse the group node:\n  if (d.size < 0)\n    return;\n  cycleState(d);\n  init();\n}\n\nfunction on_node_click(d) {\n  if (debug == 1) console.log(\"node click\", d, arguments, this, expand[d.group]);\n  // clicking on 'path helper nodes' shouln't expand/collapse the group node:\n  if (d.size < 0)\n    return;\n  cycleState(d);\n  init();\n}\n\n// --------------------------------------------------------\n\nvar vis = d3.select(\"svg\")\n  .attr(\"width\", width)\n  .attr(\"height\", height);\n\nvar debug_ui = vis.select(\"#slider-debug-level\");\ndebug_ui.select(\"#sliderval-debug-level\").text(debug);\nvar dbg = debug_ui.select(\"#slider-x-debug-level\");\nx1 = +dbg.attr(\"x1\");\nx2 = +dbg.attr(\"x2\");\nvar debug_ui_scale = d3.scale.linear().domain([0,3]).range([+dbg.attr(\"x1\")+3.5, +dbg.attr(\"x2\")-3.5-4]).clamp(true);\n\n// as per http://bl.ocks.org/1557377; correction for latest d3 lib: origin(Object) doesn't cut it.\nvar slider_drag = d3.behavior.drag()\n/*\n        .origin(function(d, i) {\n            // must return {x: value, y: value} object\n            var owner = this.ownerSVGElement;\n            var rect = owner.getBoundingClientRect();\n            // (window.scrollX || window.scrollY) ?\n            //return {x: rect.left - this.clientLeft, y: rect.top - this.clientTop};\n            return {x: rect.left, y: rect.top};\n        })\n*/\n  .on(\"drag\", slider_dragmove);\n\ndebug_ui.select(\"#sliderpos-debug-level\")\n  .attr(\"x\", debug_ui_scale(debug))\n  .call(slider_drag);\n\nfunction slider_dragmove(d) {\n  if (!isFinite(d3.event.x))\n    return;\n  var dv = debug_ui_scale.invert(d3.event.x);\n  dv = Math.round(dv);\n  d3.select(this)\n    .attr(\"x\", debug_ui_scale(dv));\n  debug_ui.select(\"#sliderval-debug-level\").text(dv);\n  if (dv != debug) {\n    debug = dv;\n\n    helper_nodeg\n      .selectAll(\"*\")\n        .remove();\n    linkg\n      .selectAll(\"*\")\n        .remove();\n    vis.select(\"#center-of-mass\")\n      .attr(\"display\", (debug == 1) ? null : \"none\");\n    debug_g\n      .attr(\"display\", debug ? null : \"none\");\n\n    init();\n  }\n}\n\ndebug_g = vis.append(\"g\");\ndebug_g\n  .append(\"path\")\n  .attr(\"class\", \"trace-alpha\");\ndebug_g\n  .append(\"path\")\n  .attr(\"class\", \"trace-c2\");\n\nvar pathgen = d3.svg.line().interpolate(\"basis\");\nvar cycle_pathgen = d3.svg.line().interpolate(\"basis\");\n\nd3.json(\"miserables-with-cycles.json\", function(json) {\n  /*\n  JSON layout:\n\n  {\n    \"nodes\": [\n      {\n        \"name\"  : \"bla\",    // in this code, this is expected to be a globally unique string (as it's used for the id via nodeid())\n        \"group\" : 1         // group ID (number)\n      },\n      ...\n    ],\n    \"links\": [\n      {\n        \"source\" : 1,       // nodes[] index (number; is immediately converted to direct nodes[index] reference)\n        \"target\" : 0,       // nodes[] index (number; is immediately converted to direct nodes[index] reference)\n        \"value\"  : 1        // [not used in this force layout]\n      },\n      ...\n    ]\n  }\n  */\n  data = json;\n  for (var i=0; i<data.links.length; ++i) {\n    o = data.links[i];\n    o.source = data.nodes[o.source];\n    o.target = data.nodes[o.target];\n  }\n  // prepare data struct to also carry our 'path helper nodes':\n  data.helpers = {left: {}, right: {}, cyclic: {}};\n\n  hullg = vis.append(\"g\");\n  //if (debug && debug < 3) {\n    linkg = vis.append(\"g\");\n    helper_nodeg = vis.append(\"g\");\n  //}\n  helper_linkg = vis.append(\"g\");\n  nodeg = vis.append(\"g\");\n  //if (debug == 1) {\n    node = vis.append(\"g\")\n        .attr(\"id\", \"center-of-mass\")\n      .append(\"circle\")\n        .attr(\"class\", \"center-of-mass\")\n        .attr(\"visibility\", (debug == 1) ? \"visible\" : \"hidden\")\n        .attr(\"r\", 10);\n  //}\n\n  init();\n\n  vis.attr(\"opacity\", 1e-6)\n    .transition()\n    .duration(1000)\n    .attr(\"opacity\", 1);\n});\n\nfunction init() {\n  if (force1) force1.stop();\n\n  net = network(data, net);\n\n  force1 = d3.layout.force()\n      .nodes(net.nodes)\n      .links(net.links)\n      .size([width, height])\n      .linkDistance(function(l, i) {\n        //return 300;\n        var n1 = l.source, n2 = l.target,\n            g1 = n1.group_data || n1, g2 = n2.group_data || n2,\n            n1_is_group = n1.size || 0, n2_is_group = n2.size || 0,\n            rv = 300;\n        // larger distance for bigger groups:\n        // both between single nodes and _other_ groups (where size of own node group still counts),\n        // and between two group nodes.\n        //\n        // reduce distance for groups with very few outer links,\n        // again both in expanded and grouped form, i.e. between individual nodes of a group and\n        // nodes of another group or other group node or between two group nodes.\n        //\n        // The latter was done to keep the single-link groups close.\n        if (n1.group == n2.group) {\n          if ((n1.link_count < 2 && !n1_is_group) || (n2.link_count < 2 && !n2_is_group)) {\n            // 'real node' singles: these don't need a big distance to make the distance, if you whumsayin' ;-)\n            rv = 2;\n          } else if (!n1_is_group && !n2_is_group) {\n            rv = 2;\n          } else if (g1.link_count < 4 || g2.link_count < 4) {\n            rv = 100;\n          }\n        } else {\n          if (!n1_is_group && !n2_is_group) {\n            rv = 50;\n          } else if ((n1_is_group && n2_is_group) && (g1.link_count < 4 || g2.link_count < 4)) {\n            // 'real node' singles: these don't need a big distance to make the ditance, if you whumsayin' ;-)\n            rv = 100;\n          } else if ((n1_is_group && g1.link_count < 2) || (n2_is_group && g2.link_count < 2)) {\n            // 'real node' singles: these don't need a big distance to make the ditance, if you whumsayin' ;-)\n            rv = 30;\n          } else if (!n1_is_group || !n2_is_group) {\n            rv = 100;\n          }\n        }\n        return l.distance = rv;\n      })\n      .gravity(1.0)             // gravity+charge tweaked to ensure good 'grouped' view (e.g. green group not smack between blue&orange, ...\n      .charge(function(d, i) {  // ... charge is important to turn single-linked groups to the outside\n        if (d.size > 0) {\n          return -5000;  // group node\n        } else {\n          // 'regular node'\n          return -1000;\n        }\n      })\n      .friction(0.7)   // friction adjusted to get dampened display: less bouncy bouncy ball [Swedish Chef, anyone?]\n      .on(\"end\", function() {\n        // done\n      })\n      .on(\"start\", function() {\n        // zip nada\n      })\n      .start();\n\n  /*\n  And here's the crazy idea for allowing AND rendering multiple links between 2 nodes, etc., as the initial attempt\n  to include the 'helper' nodes in the basic 'force' failed dramatically from a visual PoV: we 'overlay' the basic\n  nodes+links force with a SECOND force layout which 'augments' the original force layout by having it 'layout' all\n  the helper nodes (with their links) between the 'fixed' REAL nodes, which are laid out by the original force.\n\n  This way, we also have the freedom to apply a completely different force field setup to the helpers (no gravity\n  as it doesn't make sense for helpers, different charge values, etc.).\n  */\n  force2 = d3.layout.force()\n      .nodes(net.helper_nodes)\n      .links(net.helper_links)\n      .size([width, height])\n      .linkDistance(function(l, i) {\n        var n1 = l.real_source, n2 = l.real_target, rv,\n            lr = l.g_ref,\n            n1r, n2r,\n            dx, dy;\n        if (l.cyclic)\n          return 15;\n        if (lr.source.size > 0 || lr.target.size > 0)\n          return 20;\n        return 1;\n      })\n      .gravity(0.0)   // just a tad of gravidy to help keep those curvy buttocks decent\n      .charge(function(d, i) {\n        // helper nodes have a medium-to-high charge, depending on the number of links the related force link represents.\n        // Hence bundles of links fro A->B will have helper nodes with huge charges: better spreading of the link paths.\n        //\n        // Unless we're looking at helpers for links between 'real nodes', NOT GROUPS: in that case we want to keep\n        // the lines are straight as posssible as there would only be one relation for A->B anyway, so we lower the charge\n        // for such nodes and helpers.\n        if (d.fixed)\n          return -10;\n        var l = d.link_ref,\n            c = l.link_count || 1;\n        if (l.source.size > 0 || l.target.size > 0)\n          return -30;\n        return -1;\n      })\n      .friction(0.95)\n      .start()\n      .stop();          // and immediately stop! force.tick will drive this one every tick!\n\n  hullg.selectAll(\"path.hull\").remove();\n  hull = hullg.selectAll(\"path.hull\")\n      .data(convexHulls(net.nodes, off))\n      .enter().append(\"path\")\n        .attr(\"class\", \"hull\")\n        .attr(\"d\", drawCluster)\n        .style(\"fill\", function(d) { return fill(d.group); })\n        .on(\"click\", on_hull_click);\n\n  if (debug == 1) {\n    link = linkg.selectAll(\"line.link\").data(net.links, linkid);\n    link.exit().remove();\n    link.enter().append(\"line\")\n        .attr(\"class\", \"link\")\n        .attr(\"x1\", function(d) { return d.source.x; })\n        .attr(\"y1\", function(d) { return d.source.y; })\n        .attr(\"x2\", function(d) { return d.target.x; })\n        .attr(\"y2\", function(d) { return d.target.y; });\n    // both existing and enter()ed links may have changed stroke width due to expand state change somewhere:\n    link.style(\"stroke-width\", function(d) { return d.size || 1; });\n  }\n\n  hlink = helper_linkg.selectAll(\"path.hlink\").data(net.helper_render_links, function(d) {\n    return d.id;\n  });\n  hlink.exit().remove();\n  hlink.enter().append(\"path\")\n      .attr(\"class\", \"hlink\");\n  // both existing and enter()ed links may have changed stroke width due to expand state change somewhere:\n  hlink.style(\"stroke-width\", function(d) { return d.size || 1; });\n\n\n  if (debug && debug < 3) {\n    hnode = helper_nodeg.selectAll(\"circle.node\").data(net.helper_nodes, function(d) {\n      return d.id;\n    });\n    hnode.exit().remove();\n    hnode.enter().append(\"circle\")\n        // if (d.size) -- d.size > 0 when d is a group node.\n        // d.size < 0 when d is a 'path helper node'.\n        .attr(\"class\", function(d) {\n          return \"node\" + (d.size > 0 ? \"\" : d.size < 0 ? \" helper\" : \" leaf\");\n        })\n        .attr(\"r\", function(d) {\n          return d.size > 0 ? d.size + dr : d.size < 0 ? 2 : dr + 1;\n        })\n        .attr(\"cx\", function(d) { return d.x; })\n        .attr(\"cy\", function(d) { return d.y; })\n        .style(\"fill\", function(d) { return fill(d.group); });\n  }\n\n  node = nodeg.selectAll(\"circle.node\").data(net.nodes, nodeid);\n  node.exit().remove();\n  node.enter().append(\"circle\")\n      // if (d.size) -- d.size > 0 when d is a group node.\n      // d.size < 0 when d is a 'path helper node'.\n      .attr(\"class\", function(d) {\n        return \"node\" + (d.size > 0 ? d.expansion ? \" link-expanded\" : \"\" : \" leaf\");\n      })\n      .attr(\"r\", function(d) {\n        return d.size > 0 ? d.size + dr : dr + 1;\n      })\n      .attr(\"cx\", function(d) { return d.x; })\n      .attr(\"cy\", function(d) { return d.y; })\n      .style(\"fill\", function(d) { return fill(d.group); })\n      .on(\"click\", on_node_click);\n\n  node.call(force1.drag);\n\n  var drag_in_progress = false;\n  var change_squared = width * height;\n\n  // CPU load redux for the fix, part 3: jumpstart the annealing process again when the user moves the mouse outside the node,\n  // when we believe the drag is still going on; even when it isn't anymore, but D3 doesn't inform us about that!\n  node\n    .on(\"mouseout.ger_fix\", function(d) {\n      if (debug == 1) console.log(\"mouseout.ger_fix\", this, arguments, d.fixed, drag_in_progress);\n      if (drag_in_progress) {\n        force1.resume();\n      }\n    });\n\n  var resume_threshold = 0.05;\n\n  force1.on(\"tick\", function(e) {\n    if (debug) {\n      alpha_trace.push(alpha_scale(e.alpha));\n      if (alpha_trace.length > width - 20)\n        alpha_trace.shift();\n      debug_g.select(\"path.trace-alpha\")\n          .attr(\"d\", alpha_line(alpha_trace));\n\n      c2_trace.push(c2_scale(change_squared));\n      if (c2_trace.length > width - 20)\n        c2_trace.shift();\n      debug_g.select(\"path.trace-c2\")\n          .attr(\"d\", c2_line(c2_trace));\n    }\n\n    /*\n    Force all nodes with only one link to point outwards.\n\n    To do this, we first calculate the center mass (okay, we wing it, we fake node 'weight'),\n    then see whether the target node for links from single-link nodes is closer to the\n    center-of-mass than us, and if it isn't, we push the node outwards.\n    */\n    var center = {x: 0, y: 0, weight: 0}, singles = [], centroids = {},\n        size, c, k, mx, my, dx, dy, alpha;\n\n    drag_in_progress = false;\n    net.nodes.forEach(function(n) {\n      var w = Math.max(1, n.size || 0, n.weight || 0),\n          i = getGroup(n),\n          gc = centroids[i] || (centroids[i] = { x:0, y:0, weight: 0});\n\n      center.x += w * n.x;\n      center.y += w * n.y;\n      center.weight += w;\n\n      gc.x += w * n.x;\n      gc.y += w * n.y;\n      gc.weight += w;\n\n      if (n.fixed & 2) {\n        drag_in_progress = true;\n      }\n\n      if (n.size > 0 ? n.link_count < 4 : n.group_data.link_count < 3)\n        singles.push(n);\n    });\n\n    size = force1.size();\n\n    mx = size[0] / 2;\n    my = size[1] / 2;\n\n    for (k in centroids) {\n      var gc = centroids[k];\n      gc.x /= gc.weight;\n      gc.y /= gc.weight;\n    }\n\n    singles.forEach(function(n) {\n      var l = n.first_link, n2 = n.first_link_target,\n          proj, ax, bx, ay, by, k, x, y, alpha, rej, power,\n          dx, dy,\n          n_is_group = n.size || 0,\n          ng = n.group_data || n,\n          c2,\n          w = Math.max(1, n.size || 0, n.weight || 0),\n          i = getGroup(n),\n          gc = centroids[i];\n\n      // haven't decided what to do for unconnected nodes, yet...\n      if (!l)\n        return;\n\n      // apply amplification of the 'original' alpha:\n      // 1.0 for singles and double-connected nodes, close to 0 for highly connected nodes, rapidly decreasing.\n      // Use this as we want to give those 'non-singles' a little bit of the same 'push out' treatment.\n      // Reduce effect for 'real nodes' which are singles: they need much less encouragement!\n      power = Math.max(2, n_is_group ? n.link_count : n.group_data.link_count);\n      power = 2 / power;\n\n      alpha = e.alpha * power;\n\n      // undo/revert gravity forces (or as near as we can get, here)\n      //\n      // revert for truely single nodes, revert just a wee little bit for dual linked nodes,\n      // only reduce ever so slighty for nodes with few links (~ 3) that made it into this\n      // 'singles' selection\n      if (k = alpha * force1.gravity() * (0.8 + power)) {\n        dx = (mx - n.x) * k;\n        dy = (my - n.y) * k;\n        n.x -= dx;\n        n.y -= dy;\n\n        center.x -= dx * w;\n        center.y -= dy * w;\n        gc.x -= dx * w;\n        gc.y -= dy * w;\n      }\n    });\n\n    // move the entire graph so that its center of mass sits at the center, period.\n    center.x /= center.weight;\n    center.y /= center.weight;\n\n    if (debug == 1) {\n      c = vis.selectAll(\"circle.center-of-mass\")\n          .attr(\"cx\", center.x)\n          .attr(\"cy\", center.y);\n    }\n\n    dx = mx - center.x;\n    dy = my - center.y;\n\n    alpha = e.alpha * 5;\n    dx *= alpha;\n    dy *= alpha;\n\n    net.nodes.forEach(function(n) {\n      n.x += dx;\n      n.y += dy;\n    });\n\n\n    change_squared = 0;\n\n    // fixup .px/.py so drag behaviour and annealing get the correct values, as\n    // force.tick() would expect .px and .py to be the .x and .y of yesterday.\n    net.nodes.forEach(function(n) {\n      // restrain all nodes to window area\n      var k, dx, dy,\n          r = (n.size > 0 ? n.size + dr : dr + 1) + 2 /* styled border outer thickness and a bit */;\n\n      dx = 0;\n      if (n.x < r)\n        dx = r - n.x;\n      else if (n.x > size[0] - r)\n        dx = size[0] - r - n.x;\n\n      dy = 0;\n      if (n.y < r)\n        dy = r - n.y;\n      else if (n.y > size[1] - r)\n        dy = size[1] - r - n.y;\n\n      k = 1.2;\n\n      n.x += dx * k;\n      n.y += dy * k;\n      // restraining completed.......................\n\n      // fixes 'elusive' node behaviour when hovering with the mouse (related to force.drag)\n      if (n.fixed) {\n        // 'elusive behaviour' ~ move mouse near node and node would take off, i.e. act as an elusive creature.\n        n.x = n.px;\n        n.y = n.py;\n      }\n      n.px = n.x;\n      n.py = n.y;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n\n    // also restrain helper nodes to within the visible area --> link paths are almost always ket in-view:\n    net.helper_nodes.forEach(function(n) {\n      // restrain all nodes to window area\n      var k, dx, dy,\n          r = (n.size > 0 ? n.size : 1) + 5 /* heuristic */;\n\n      dx = 0;\n      if (n.x < r)\n        dx = r - n.x;\n      else if (n.x > size[0] - r)\n        dx = size[0] - r - n.x;\n\n      dy = 0;\n      if (n.y < r)\n        dy = r - n.y;\n      else if (n.y > size[1] - r)\n        dy = size[1] - r - n.y;\n\n      k = 1.2;\n\n      n.x += dx * k;\n      n.y += dy * k;\n      // restraining completed.......................\n\n      n.px = n.x;\n      n.py = n.y;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n\n    if (!isFinite(change_squared))\n      change_squared = width * height;\n\n    // kick the force2 to also do a bit of annealing alongside:\n    // to make it do something, we need to surround it alpha-tweaking stuff, though.\n    force2.resume();\n    force2.tick();\n    force2.stop();\n\n    // fast stop + the drag fix, part 2:\n    if (change_squared < .05) {\n      if (debug == 1) console.log(\"fast stop: CPU load redux\");\n      force1.stop();\n      // fix part 4: monitor D3 resetting the drag marker:\n      if (drag_in_progress) {\n        if (debug == 1) console.log(\"START monitor drag in progress\", drag_in_progress);\n        d3.timer(function() {\n          drag_in_progress = false;\n          net.nodes.forEach(function(n) {\n            if (n.fixed & 2) {\n              drag_in_progress = true;\n            }\n          });\n          force1.resume();\n          if (debug == 1) console.log(\"monitor drag in progress: drag ENDED\", drag_in_progress);\n          // Quit monitoring as soon as we noticed the drag ENDED.\n          // Note: we continue to monitor at +500ms intervals beyond the last tick\n          //       as this timer function ALWAYS kickstarts the force layout again\n          //       through force.resume().\n          //       d3.timer() API only accepts an initial delay; we can't set this\n          //       thing to scan, say, every 500msecs until the drag is done,\n          //       so we do it that way, via the revived force.tick process.\n          return true;\n        }, 500);\n      }\n    } else if (change_squared > net.nodes.length * 0.1 * resume_threshold && e.alpha < resume_threshold) {\n      // jolt the alpha (and the visual) when there's still a lot of change when we hit the alpha threshold.\n      force1.alpha(e.alpha *= 2); //force.resume(), but now with decreasing alpha starting value so the jolts don't get so big.\n\n      // And 'dampen out' the trigger point, so it becomes harder and harder to trigger the threshold.\n      // This is done to cope with those instable (forever rotating, etc.) layouts...\n      resume_threshold *= 0.75;\n    } else {\n      //console.log(\"fast stop tracking: \", change_squared, net.nodes.length * 0.1 * resume_threshold, e.alpha, resume_threshold);\n    }\n\n    //--------------------------------------------------------------------\n\n    if (!hull.empty()) {\n      hull.data(convexHulls(net.nodes, off))\n          .attr(\"d\", drawCluster);\n    }\n\n    if (debug == 1) {\n      link.attr(\"x1\", function(d) { return d.source.x; })\n          .attr(\"y1\", function(d) { return d.source.y; })\n          .attr(\"x2\", function(d) { return d.target.x; })\n          .attr(\"y2\", function(d) { return d.target.y; });\n    }\n\n    node.attr(\"cx\", function(d) { return d.x; })\n        .attr(\"__name__\", function(d) { return d.name || \"xxx\"; })\n        .attr(\"cy\", function(d) { return d.y; });\n  });\n\n\n\n  var log_count = 100;\n\n\n\n\n  force2.on(\"tick\", function(e) {\n    /*\n      Update all 'real'=fixed nodes.\n    */\n    net.helper_nodes.forEach(function(n) {\n      var o;\n      if (n.fixed) {\n        o = n.ref;\n        n.px = n.x = o.x;\n        n.py = n.y = o.y;\n      }\n    });\n    net.helper_links.forEach(function(l) {\n      var o = l.g_ref;\n      l.distance = o.distance;\n    });\n\n    // NOTE: force2 is fully driven by force(1), but still there's need for 'fast stop' handling in here\n    //       as our force2 may be more 'joyous' in animating the links that force is animating the nodes\n    //       themselves. Hence we also take the delta movement of the helper nodes into account!\n    net.helper_nodes.forEach(function(n) {\n      // skip the 'fixed' buggers: those are already accounted for in force.tick!\n      if (n.fixed)\n        return;\n\n      // plus copy for faster stop check\n      change_squared += (n.qx - n.x) * (n.qx - n.x);\n      change_squared += (n.qy - n.y) * (n.qy - n.y);\n      n.qx = n.x;\n      n.qy = n.y;\n    });\n    if (!isFinite(change_squared))\n      change_squared = width * height;\n\n    //--------------------------------------------------------------------\n\n    var logged = false;\n\n    hlink.attr(\"d\", function(d) {\n      if (isFinite(d.real_source.x)) {\n        var linedata, dx, dy, f;\n        if (d.cyclic) {\n          // construct round-ish bezier from node to helper and back again:\n          dx = d.target.x - d.real_source.x;\n          dy = d.target.y - d.real_source.y;\n          linedata = [\n              [d.real_source.x, d.real_source.y],\n              [d.target.x - cycle_curvep * dy, d.target.y + cycle_curvep * dx],\n              [d.target.x + cycle_curvep * dx, d.target.y + cycle_curvep * dy],\n              [d.target.x + cycle_curvep * dy, d.target.y - cycle_curvep * dx],\n              [d.real_source.x, d.real_source.y]\n          ];\n          return cycle_pathgen(linedata);\n        } else {\n          linedata = [\n              [d.real_source.x, d.real_source.y],\n              [d.source.x, d.source.y],\n              [d.target.x, d.target.y],\n              [d.real_target.x, d.real_target.y]\n          ];\n          return pathgen(linedata);\n        }\n      } else {\n        if (!logged) {\n          console.log(\"boom\");\n          logged = true;\n        }\n        return null;\n      }\n    });\n\n    if (debug && debug < 3) {\n      hnode.attr(\"cx\", function(d) { return d.x; })\n           .attr(\"cy\", function(d) { return d.y; });\n    }\n  });\n}\n\n    </script>\n  </body>\n</html>\n","filenames":[".gitignore","CREDITS","README.md","index.html","miserables-with-cycles.json"]}},{"_index":"blockbuilder","_type":"blocks","_id":"da5fe39eac5eed0cb60a","_score":0.3479148,"_source":{"userId":"trinary","description":"x3dom + d3","created_at":"2015-11-08T23:33:11Z","updated_at":"2015-11-08T23:38:52Z","api":["d3.select","d3.scale.linear","d3.range"],"colors":[],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <script type='text/javascript' src='http://www.x3dom.org/download/x3dom.js'> </script>\n  <link rel='stylesheet' type='text/css' href='http://www.x3dom.org/download/x3dom.css'></link>\n</head>\n\n<body>\n  <script>\n(function() {\n  var width = 960, height = 540, n = 10, max = 100;\n  var x3d = d3.select(\"body\").append(\"x3d\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n  var scene = x3d.append(\"scene\");\n\n  var dataScale = d3.scale.linear().domain([0,1]).range([0,max]);\n  var x = d3.scale.linear().domain([0,n]).range([-5, 5]);\n  var y = d3.scale.linear().domain([0,100]).range([0.01, 5]);\n\n  var data = d3.range(n).map((i) => dataScale(Math.random()));\n\n  var shapes = scene.selectAll(\"transform\")\n    .data(data)\n    .enter()\n    .append(\"transform\")\n      .attr(\"translation\", (d, i) => `${x(i)} ${ y(d)/2} 0` )\n    .append(\"shape\");\n  shapes.append(\"appearance\")\n    .append(\"material\")\n      .attr(\"diffuseColor\", \"0.2 0.2 0.8\");\n  shapes.append(\"box\")\n    .attr(\"size\", (d,i) => `0.2 ${y(d)} 0.2`);\n}());\n  </script>\n</body>\n","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"3943324","_score":0.34773204,"_source":{"userId":"tmcw","description":"d3 tiles","created_at":"2012-10-24T02:12:57Z","updated_at":"2015-10-12T00:28:09Z","api":["d3.geo.mercator","d3.geo.path","d3.select","d3.behavior.zoom","d3.json","d3.range"],"colors":["#e5f5f9","#2ca25f","#bdbdbd","#ff0000"],"readme":"","code":"<!DOCTYPE html>\n<style>\n  path {\n    fill: #E5F5F9;\n    opacity:0.4;\n    stroke: #2CA25F;\n    stroke-width: 0.5;\n  }\n  #axes {\n    stroke: #BDBDBD;\n    stroke-width: 0.5;\n  }\n</style>\n<body>\n<script src=\"http://d3js.org/d3.v2.js\"></script>\n<script>\n  var width = 960,\n      height = 500,\n      projection = d3.geo.mercator().scale(512).translate([256, 256]),\n      path = d3.geo.path().projection(projection);\n\n  var svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .call(d3.behavior.zoom()\n        .translate(projection.translate())\n        .scale(projection.scale())\n        .on(\"zoom\", redraw));\n\n  var axes = svg.append(\"g\").attr(\"id\", \"axes\"),\n      xAxis = axes.append(\"line\").attr(\"y2\", height),\n      yAxis = axes.append(\"line\").attr(\"x2\", width);\n\n  var tileg = svg.append('g').attr('id', 'tiles');\n  var overlay = svg.append('g').attr('id', 'overlay');\n\n  function tileUrl(d) {\n      return 'http://a.tiles.mapbox.com/v3/tmcw.map-hehqnmda/' + d.join('/') + '.png';\n  }\n\n  d3.json(\"land.json\", function(collection) {\n    overlay.insert(\"path\", \".graticule\")\n        .datum(collection)\n        .attr(\"class\", \"boundary\")\n        .attr(\"d\", path);\n  });\n\n  function redraw() {\n    if (d3.event) {\n      projection\n          .translate(d3.event.translate)\n          .scale(d3.event.scale);\n    }\n\n    var t = projection.translate(),\n        s = projection.scale(),\n        z = Math.max(Math.log(s) / Math.log(2) - 8, 0);\n        rz = Math.floor(z),\n        ts = 256 * Math.pow(2, z - rz);\n\n    // This is the 0, 0 px of the projection\n    var tile_origin = [s / 2 - t[0], s / 2 - t[1]];\n\n    var tiles = [];\n\n    var cols = d3.range(Math.max(0, Math.floor((tile_origin[0] - width) / ts)),\n        Math.max(0, Math.ceil((tile_origin[0] + width) / ts)));\n\n    var rows = d3.range(Math.max(0, Math.floor((tile_origin[1] - height) / ts)),\n        Math.max(0, Math.ceil((tile_origin[1] + height) / ts)));\n\n    cols.forEach(function(x) {\n        rows.forEach(function(y) {\n            tiles.push([Math.floor(z), x, y]);\n        });\n    });\n\n    var tiles = tileg.selectAll('image.tile')\n        .data(tiles, function(d) { return d.join(',') });\n\n    tiles.exit().remove();\n    tiles.enter().append('image')\n        .attr('class', 'tile')\n        .attr('xlink:href', tileUrl);\n\n    tiles.attr({ width: ts, height: ts })\n        .attr('transform', function(d) {\n            return 'translate(' + [(d[1] * ts) - tile_origin[0], (d[2] * ts) - tile_origin[1]] + ')';\n        })\n\n    overlay.selectAll(\"path\").attr(\"d\", path);\n\n    xAxis.attr(\"x1\", t[0]).attr(\"x2\", t[0]);\n    yAxis.attr(\"y1\", t[1]).attr(\"y2\", t[1]);\n  }\n\n  redraw();\n</script>\n","filenames":["index.html","land.json"]}},{"_index":"blockbuilder","_type":"blocks","_id":"2a2165ef2225a2d322fc","_score":0.34773204,"_source":{"userId":"peripherie","description":"D3 module4","created_at":"2015-04-12T10:50:58Z","updated_at":"2015-08-29T14:19:00Z","api":["d3.scale.linear","d3.scale.ordinal","d3.svg.axis","d3.select","d3.csv","d3.descending","d3.max"],"colors":["#ededed","#ff0000","#ffa500","#ffffff","#000000"],"readme":"","code":"<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>D3 module4 project</title>\n\t\t<script type=\"text/javascript\" src=\"http://d3js.org/d3.v3.js\"></script>\n\t\t<style type=\"text/css\">\n\t\t\t\n\t\t\tbody {\n\t\t\t\tbackground-color: #EDEDED;\n\t\t\t\tfont-family: Helvetica, Arial, sans-serif;\n\t\t\t}\n\n\t\t\th1 {\n\t\t\t\tfont-size: 24px;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\tp {\n\t\t\t\tfont-size: 18px;\n\t\t\t\tmargin: 10px 0 0 0;\n\t\t\t}\n\n\t\t\tsvg {\n\t\t\t\tbackground-color: white;\n\t\t\t}\n\n\t\t\trect:hover {\n\t\t\t\tfill: orange;\n\t\t\t}\n\t\t\t\n\t\t\t.axis path,\n\t\t\t.axis line {\n\t\t\t\tfill: none;\n\t\t\t\tstroke: black;\n\t\t\t\tshape-rendering: crispEdges;\n\t\t\t}\n\t\t\t\n\t\t\t.axis text {\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tfont-size: 14px;\n\t\t\t}\n\n\t\t\t.y.axis path,\n\t\t\t.y.axis line {\n\t\t\t\topacity: 0;\n\t\t\t}\n\n\t\t</style>\n\t</head>\n\t<body>\n\n\t\t<h1>GDP OUTLOOK</h1>\n\n\t\t<p>IMF estimates &ldquo;G7 GDP per capita in 2019.&rdquo;  Source: <a href=\"https://www.imf.org/external/pubs/ft/weo/2014/02/weodata/index.aspx\">IMF</a>, 2014</p>\n\n\t\t<script type=\"text/javascript\">\t\t\n\n\n\t\t\tvar w = 700;\n\t\t\tvar h = 500;\n\t\t\tvar padding = [ 20, 10, 30, 120 ];  //Top, right, bottom, left\n            \n            var f2c = d3.scale.linear().domain([32,212]).range([0,100]);\n\n\n\t\t\tvar widthScale = d3.scale.linear()\n\t\t\t\t\t\t\t\t.range([ 0, w - padding[1] - padding[3] ]);\n\t\t\t\n\t\t\tvar heightScale = d3.scale.ordinal()\n\t\t\t\t\t\t\t\t.rangeRoundBands([ padding[0], h - padding[2] ], 0.1);\n\n\n\n\t\t\tvar xAxis = d3.svg.axis()\n\t\t\t\t\t\t\t.scale(widthScale)\n\t\t\t\t\t\t\t.orient(\"bottom\");\n\n\t\t\tvar yAxis = d3.svg.axis()\n\t\t\t\t\t\t\t.scale(heightScale)\n\t\t\t\t\t\t\t.orient(\"left\");\n\n\n\n\t\t\tvar svg = d3.select(\"body\")\n\t\t\t\t\t\t.append(\"svg\")\n\t\t\t\t\t\t.attr(\"width\", w)\n\t\t\t\t\t\t.attr(\"height\", h);\n\n\n\n\t\t\td3.csv(\"d3G7GDP.csv\", function(data) {\n\n\t\t\t\tdata.sort(function(a, b) {\n\t\t\t\t\treturn d3.descending(+a.Y2019, +b.Y2019);\n\t\t\t\t});\n\n\t\t\t\twidthScale.domain([ 0, d3.max(data, function(d) {\n\t\t\t\t\treturn +d.Y2019;\n\t\t\t\t}) ]);\n\n\t\t\t\theightScale.domain(data.map(function(d) { return d.country; } ));\n\n\t\t\t\tvar rects = svg.selectAll(\"rect\")\n\t\t\t\t\t\t\t\t.data(data)\n\t\t\t\t\t\t\t\t.enter()\n\t\t\t\t\t\t\t\t.append(\"rect\");\n\n\t\t\t\trects.attr(\"x\", padding[3])\n\t\t\t\t\t.attr(\"y\", function(d) {\n\t\t\t\t\t\treturn heightScale(d.country);\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"width\", function(d) {\n\t\t\t\t\t\treturn widthScale(d.Y2019);\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"height\", heightScale.rangeBand())\n\t\t\t\t\t.attr(\"fill\", \"red\")\n\t\t\t\t\t.append(\"title\")\n\t\t\t\t\t.text(function(d) {\n\t\t\t\t\t\treturn d.country + \"'s GDP per capita in 2019 is estimated to be \" + d.Y2019 + \"US$\";\n\t\t\t\t\t});\n\n\t\t\t\tsvg.append(\"g\")\n\t\t\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t\t\t.attr(\"transform\", \"translate(\" + padding[3] + \",\" + (h - padding[2]) + \")\")\n\t\t\t\t\t.call(xAxis);\n\n\t\t\t\tsvg.append(\"g\")\n\t\t\t\t\t.attr(\"class\", \"y axis\")\n\t\t\t\t\t.attr(\"transform\", \"translate(\" + padding[3] + \",0)\")\n\t\t\t\t\t.call(yAxis);\n\n\t\t\t});\n\n\n\t\t</script>\n\n\t</body>\n</html>","filenames":["d3G7GDP.csv","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"4142064","_score":0.3476988,"_source":{"userId":"pnavarrc","description":"MapBox + d3","created_at":"2012-11-25T01:48:18Z","updated_at":"2015-10-13T04:48:05Z","api":["d3.select","d3.geo.path","d3.geo.bounds","d3.json"],"colors":["#000000","#ffffff","#a52a2a"],"readme":"","code":"<!DOCTYPE html>\n<html>\n<head>\n  <script src='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.js'></script>\n  <script src='http://d3js.org/d3.v2.js?2.9.3'></script>\n  <link\n      href='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.css'\n      rel='stylesheet' />\n  <style>\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n    .d3-vec { position:absolute; }\n    path {\n      fill: #000;\n      fill-opacity: .2;\n      stroke: #fff;\n      stroke-width: 1.5px;\n    }\n\n    path:hover {\n      fill: brown;\n      fill-opacity: .7;\n    }\n  </style>\n</head>\n<body>\n<div id='map'></div>\n<script>\n  function folly() {\n      var f = {}, bounds, feature;\n      var div = d3.select(document.body)\n          .append(\"div\")\n          .attr('class', 'd3-vec'),\n      svg = div.append('svg'),\n      g = svg.append(\"g\");\n\n      f.parent = div.node();\n\n      // Use Leaflet to implement a D3 geographic projection.\n      f.project = function(x) {\n        var point = f.map.locationPoint({ lat: x[1], lon: x[0] });\n        return [point.x, point.y];\n      }\n\n      // Reposition the SVG to cover the features.\n      f.draw = function() {\n        var bounds = f.map.extent(),\n            bl = bounds.southWest(),\n            tr = bounds.northEast();\n        var bottomLeft = f.project([bl.lon, bl.lat]),\n            topRight = f.project([tr.lon, tr.lat]);\n\n        svg.attr(\"width\", topRight[0] - bottomLeft[0])\n            .attr(\"height\", bottomLeft[1] - topRight[1])\n            .style(\"margin-left\", bottomLeft[0] + \"px\")\n            .style(\"margin-top\", topRight[1] + \"px\");\n\n        g.attr(\"transform\", \"translate(\" + -bottomLeft[0] + \",\" + -topRight[1] + \")\");\n\n        path = d3.geo.path().projection(f.project);\n\n        feature.attr(\"d\", path);\n      }\n\n      f.data = function(collection) {\n          bounds = d3.geo.bounds(collection);\n          feature = g.selectAll(\"path\")\n              .data(collection)\n              .enter().append(\"path\");\n          return f;\n      };\n\n      return f;\n  }\n  var mapbox_tilejson = 'http://api.tiles.mapbox.com/v3/mapbox.mapbox-light.jsonp';\n  mapbox.load(mapbox_tilejson, function(o) {\n    var m = mapbox.map('map');\n    m.addLayer(o.layer);\n    m.ui.zoomer.add();\n    var mapbounds = new MM.Extent(\n      32.15603702811953,\n      34.8453784951352,\n      32.02354637361072,\n      34.733455277361784);\n    m.setExtent(mapbounds);\n    m.setPanLimits(mapbounds);\n    m.setZoomRange(13,17);\n    d3.json(\"tlv.json\", function(collection) {\n        var l = folly().data([collection]);\n        m.addLayer(l);\n    });\n  });\n</script>\n</body>\n</html>\n","filenames":["index.html","tlv.json"]}},{"_index":"blockbuilder","_type":"blocks","_id":"2e44bd82c9d048b88451","_score":0.34752172,"_source":{"userId":"sdbernard","description":"d3 module2","created_at":"2015-11-07T15:15:05Z","updated_at":"2015-11-07T16:18:34Z","api":["d3.format","d3.scale.ordinal","d3.layout.stack","d3.time.format","d3.select","d3.time.scale","d3.scale.linear","d3.svg.axis","d3.svg.line","d3.svg.area","d3.csv","d3.max","d3.min","d3.mouse"],"colors":["#f7fcb9","#addd8e","#31a354","#ffffcc","#c2e699","#78c679","#238443","#006837","#d9f0a3","#41ab5d","#005a32","#ffffe5","#004529","#edf8b1","#7fcdbb","#2c7fb8","#a1dab4","#41b6c4","#225ea8","#253494","#c7e9b4","#1d91c0","#0c2c84","#ffffd9","#081d58","#e0f3db","#a8ddb5","#43a2ca","#f0f9e8","#bae4bc","#7bccc4","#2b8cbe","#0868ac","#ccebc5","#4eb3d3","#08589e","#f7fcf0","#084081","#e5f5f9","#99d8c9","#2ca25f","#edf8fb","#b2e2e2","#66c2a4","#238b45","#006d2c","#ccece6","#41ae76","#005824","#f7fcfd","#00441b","#ece2f0","#a6bddb","#1c9099","#f6eff7","#bdc9e1","#67a9cf","#02818a","#016c59","#d0d1e6","#3690c0","#016450","#fff7fb","#014636","#ece7f2","#f1eef6","#74a9cf","#0570b0","#045a8d","#034e7b","#023858","#e0ecf4","#9ebcda","#8856a7","#b3cde3","#8c96c6","#88419d","#810f7c","#bfd3e6","#8c6bb1","#6e016b","#4d004b","#fde0dd","#fa9fb5","#c51b8a","#feebe2","#fbb4b9","#f768a1","#ae017e","#7a0177","#fcc5c0","#dd3497","#fff7f3","#49006a","#e7e1ef","#c994c7","#dd1c77","#d7b5d8","#df65b0","#ce1256","#980043","#d4b9da","#e7298a","#91003f","#f7f4f9","#67001f","#fee8c8","#fdbb84","#e34a33","#fef0d9","#fdcc8a","#fc8d59","#d7301f","#b30000","#fdd49e","#ef6548","#990000","#fff7ec","#7f0000","#ffeda0","#feb24c","#f03b20","#ffffb2","#fecc5c","#fd8d3c","#e31a1c","#bd0026","#fed976","#fc4e2a","#b10026","#800026","#fff7bc","#fec44f","#d95f0e","#ffffd4","#fed98e","#fe9929","#cc4c02","#993404","#fee391","#ec7014","#8c2d04","#662506","#efedf5","#bcbddc","#756bb1","#f2f0f7","#cbc9e2","#9e9ac8","#6a51a3","#54278f","#dadaeb","#807dba","#4a1486","#fcfbfd","#3f007d","#deebf7","#9ecae1","#3182bd","#eff3ff","#bdd7e7","#6baed6","#2171b5","#08519c","#c6dbef","#4292c6","#084594","#f7fbff","#08306b","#e5f5e0","#a1d99b","#edf8e9","#bae4b3","#74c476","#c7e9c0","#f7fcf5","#fee6ce","#fdae6b","#e6550d","#feedde","#fdbe85","#d94701","#a63603","#fdd0a2","#f16913","#d94801","#fff5eb","#7f2704","#fee0d2","#fc9272","#de2d26","#fee5d9","#fcae91","#fb6a4a","#cb181d","#a50f15","#fcbba1","#ef3b2c","#99000d","#fff5f0","#67000d","#f0f0f0","#bdbdbd","#636363","#f7f7f7","#cccccc","#969696","#525252","#252525","#d9d9d9","#737373","#ffffff","#000000","#f1a340","#998ec3","#e66101","#fdb863","#b2abd2","#5e3c99","#b35806","#fee0b6","#d8daeb","#542788","#e08214","#8073ac","#7f3b08","#2d004b","#d8b365","#f5f5f5","#5ab4ac","#a6611a","#dfc27d","#80cdc1","#018571","#8c510a","#f6e8c3","#c7eae5","#01665e","#bf812d","#35978f","#543005","#003c30","#af8dc3","#7fbf7b","#7b3294","#c2a5cf","#a6dba0","#008837","#762a83","#e7d4e8","#d9f0d3","#1b7837","#9970ab","#5aae61","#40004b","#e9a3c9","#a1d76a","#d01c8b","#f1b6da","#b8e186","#4dac26","#c51b7d","#fde0ef","#e6f5d0","#4d9221","#de77ae","#7fbc41","#8e0152","#276419","#ef8a62","#ca0020","#f4a582","#92c5de","#0571b0","#b2182b","#fddbc7","#d1e5f0","#2166ac","#d6604d","#4393c3","#053061","#999999","#bababa","#404040","#e0e0e0","#4d4d4d","#878787","#1a1a1a","#ffffbf","#91bfdb","#d7191c","#fdae61","#abd9e9","#2c7bb6","#d73027","#fee090","#e0f3f8","#4575b4","#f46d43","#74add1","#a50026","#313695","#99d594","#abdda4","#2b83ba","#d53e4f","#fee08b","#e6f598","#3288bd","#66c2a5","#9e0142","#5e4fa2","#91cf60","#a6d96a","#1a9641","#d9ef8b","#1a9850","#66bd63","#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17","#666666","#1b9e77","#d95f02","#7570b3","#66a61e","#e6ab02","#a6761d","#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#b15928","#fbb4ae","#decbe4","#fed9a6","#e5d8bd","#fddaec","#f2f2f2","#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc","#e41a1c","#377eb8","#4daf4a","#984ea3","#ffff33","#a65628","#f781bf","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494","#b3b3b3","#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#bc80bd","#ffed6f","#ff0000","#ffa500","#008000","#0000ff","#800080","#fff1e0","#fff9f1","#333333","#af516c","#74736c","#e9decf","#9e2f50","#d7706c","#91a1c7","#ecafaf","#b07979","#5a9992","#dc143c","#e8aa7d","#7fd8f5","#3d7ab3","#b8b1a9","#d2b48c"],"readme":"","code":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Living with HIV</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js\" charset=\"utf-8\"></script>\n    <script src=\"colorbrewer.js\"></script>\n    <link href=\"https://fonts.googleapis.com/css?family=Raleway:100normal,200normal,300normal,400normal,500normal,600normal,700normal,800normal,900normal|Open+Sans:400normal|Lato:400normal|Roboto:400normal|Oswald:400normal|Droid+Sans:400normal|Droid+Serif:400normal|Lobster:400normal|PT+Sans:400normal|Ubuntu:400normal|Playfair+Display:400normal&amp;subset=all\" rel=\"stylesheet\" type=\"text/css\">\n    <style type=\"text/css\">\n        \n      body {\n        background-color: #fff1e0;\n        font-family: 'Raleway', sans-serif;\n        font-weight: 400;\n        margin-top: 3em;\n      }\n\n      .content-holder {\n        background: #fff9f1;\n        padding: 20px 20px 14px;\n        width: 760px;\n        box-sizing: border-box;\n        margin: 0 auto;\n        box-shadow: 0px 2px 5px 0px rgba(0,0,0,0.3);\n      }\n\n      h1 {\n        font-weight: 300;\n        font-size: 36px;\n        color: #333333;\n        margin-top: 0;\n        margin-bottom: 0;\n        margin-left: -2px;\n      }\n      h6 {\n        font-size: 12px;\n        margin-bottom: 0.2em;\n        margin-top: 6px;\n        font-weight: 800;\n        text-transform: uppercase;\n        color: #af516c;\n      }\n\n      form {\n        margin-left: 40px;\n        font-weight: 400;\n        font-size: 12px;\n        color: #74736c;\n        position: relative;\n        float: right;\n        top: 16px;\n      }\n      p {\n        margin-bottom: 4px;\n        line-height: 1.5em;\n      }\n      .chart-holder {\n        margin-top: 8px;\n      }\n      \n      .y.axis path,\n      .x.axis path {\n        fill: none;\n\n      }\n\n      .axis line {\n        fill: none;\n        stroke: #e9decf;\n        stroke-dasharray:2,1;\n        shape-rendering: crispEdges;\n      }\n\n      .axis text {\n        font-size: 12px;\n        fill: #74736c;\n      }\n\n      .axislabel {\n        font-size: 13px;\n        fill: #74736c;\n      }\n\n      .subtitle {\n        font-size: 15px;\n        color: #74736c;\n        display: inline-block;\n      }\n\n      .source,\n      .note {\n        font-size: 12px;\n      }\n      a {\n          text-decoration: none;\n          color: #9e2f50;\n          transition: color 0.3s;\n        }\n      a:hover {\n        color: #000;\n        transition: color 0s;\n      }\n      .tooltip{\n        padding: 6px;\n        background-color: #fff;\n        border-radius: 4px;\n        position: absolute;\n        font-size: 13px;\n        line-height: 18px;\n        visibility: hidden;\n        box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.3);\n        font-weight: 300;\n      }\n      .country{\n        font-weight: 600;\n        font-size: 14px;\n        /*margin-bottom: -8px;\n        display: block;*/\n      }\n      .dataNum{\n        font-weight: 600;\n        /*font-family: arial;*/\n      }\n      .labelsOn {\n        opacity: 1;\n        transition: opacity 0.3s;\n      }\n      .labelsOff {\n        opacity: 0;\n        transition: opacity 0.3s;\n      }\n      .cLabel {\n        text-anchor: end;\n        fill: white;\n        font-size: 12px;\n      }\n      .cLabelBld {\n        font-weight: 700;\n      }\n      .globalPath {\n        fill: none;\n        stroke: #9e2f50;\n        stroke-width: 2px;\n      }\n    </style>\n  </head>\n  <body>\n      <div class=\"tooltip\"></div>\n      <div class=\"content-holder\">\n        <h6>Living with HIV</h6>\n        <h1>How many people are infected with HIV?</h1>\n        <p>Since HIV became part our consciousness in the 1980s, this graph shows the frightening rate of growth of infections around the globe, most notably in <span class=\"cLabelBld\">South Africa</span>. Another chilling statistic is that in <span class=\"cLabelBld\">Nigeria</span> children under the age of 15 account for over <span class=\"cLabelBld\">11%</span> of the HIV population.</p>\n        <p class=\"subtitle\">Population infected with HIV (m)</p>\n        <div class=\"chart-holder\"></div>\n        <p class=\"source\">Source: <a href=\"http://aidsinfo.unaids.org/\">aidsinfo.unaids.org</a></p>\n      </div>\n      <script type=\"text/javascript\">     \n        var margin = { top: 18, right: 15, bottom: 20, left: 50 },\n            width = 720 - margin.left - margin.right,\n            height = 640 - margin.top - margin.bottom;\n\n        var divisor = 1000000;\n\n        var dataset = [];\n        \n        var years = [];\n\n        var numFormat = d3.format(',');\n\n        var areaColor;\n\n        var color = d3.scale.ordinal()\n                      .range(colorbrewer.RdYlBu[11])\n                      // .range([\"#D7706C\", \"#91A1C7\", \"#ECAFAF\", \"#B07979\", \"#5A9992\", \"#dc143c\", \"#E8AA7D\", \"#AF516C\", \"#7FD8F5\", \"#3D7AB3\", \"#B8B1A9\"]);\n\n        var stack = d3.layout.stack()\n            .values(function(d) {\n              return d.hiv;\n            })\n            .order(\"reverse\");\n\n        var dateFormat = d3.time.format(\"%Y\");\n        \n        var svg = d3.select('.chart-holder').append('svg')\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top + margin.bottom)\n\n        var xScale = d3.time.scale()\n                       .range([0, width]);\n\n        var yScale = d3.scale.linear()\n                       .range([0, height - margin.top - margin.bottom]);\n\n        var xAxis = d3.svg.axis()\n                      .scale(xScale)\n                      .tickSize(-height + margin.bottom)\n                      .ticks(5)\n                      .orient('bottom')\n                      .tickFormat(function(d) {\n                        return dateFormat(d);\n                      });\n\n        var yAxis = d3.svg.axis()\n                      .scale(yScale)\n                      .tickSize(-width)\n                      .ticks(10)\n                      .orient('left');\n\n        var line = d3.svg.line()\n        .defined(function(d) { return d.y != null; })\n        .x(function(d) { return xScale(dateFormat.parse(d.x)); })\n        .y(function(d) { return yScale(d.y); });\n\n        var lineGlobal = d3.svg.line()\n        .defined(function(d) { return d.value != 0; })\n        .x(function(d) { return xScale(dateFormat.parse(d.date)); })\n        .y(function(d) { return yScale(d.value); });\n\n        var area = d3.svg.area()\n            .defined(line.defined())\n            .x(line.x())\n            .y1(function(d) {\n              return yScale(d.y0 + d.y);  //Updated\n            })\n            .y0(function(d) {\n              return yScale(d.y0);  //Updated\n            });\n\n        d3.csv('hiv.csv', function(data) {\n          years = Object.keys( data[0] ).filter(function(d){ return d != 'Country'; }); \n          \n          data.forEach(function(d, i) {\n              dataset[i] = {\n                country: d.Country,\n                hiv: []\n              }\n              years.forEach(function(d, j) {\n                var value = null;\n                if(data[i][years[j]]) {\n                  value = +data[i][years[j]] / divisor;\n                }\n                dataset[i].hiv.push({\n                  x: years[j],\n                  y: value\n                })\n              });\n          })\n          \n          stack(dataset);\n\n          var maxX = d3.max(years, function(d) { return dateFormat.parse(d); })\n          var minX = d3.min(years, function(d) { return dateFormat.parse(d); })\n\n          var yearTotals = [];\n\n          var global = [];\n\n          years.forEach(function(d, i) {\n            yearTotals[i] = 0;\n            dataset.forEach(function(d, j) {\n              yearTotals[i] += dataset[j].hiv[i].y;\n\n            })\n            // create global data array\n            global[i] = {\n              date: years[i],\n              value: yearTotals[i]\n            }\n\n          })\n\n          var maxY = d3.max(yearTotals)\n\n          xScale.domain([minX, maxX]);\n          yScale.domain([maxY, 0]);\n\n          svg.append('g')\n               .attr('transform', 'translate(' + margin.left + ',' + (height - margin.top ) + ')')\n               .attr('class', 'x axis')\n               .call(xAxis)\n               .attr('opacity', 0)\n               .transition().attr('opacity', 1).ease('quad').duration(500);\n\n          svg.append('g')\n               .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n               .attr('class', 'y axis')\n               .call(yAxis)\n               .attr('opacity', 0)\n               .transition().attr('opacity', 1).ease('quad').duration(500);\n          \n          var chart = svg.append('g')\n              .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n          //create path for global total\n          var linePath = chart.append('path')\n              .attr(\"d\", lineGlobal(global))\n              .attr('class', 'globalPath');\n\n          //animate path\n          var totalLength = linePath.node().getTotalLength();\n          \n              linePath.attr(\"stroke-dasharray\", totalLength + \" \" + totalLength)\n                  .attr(\"stroke-dashoffset\", totalLength)\n                  .transition()\n                    .delay(500)\n                    .duration(1500)\n                    .ease(\"quad\")\n                    .attr(\"stroke-dashoffset\", 0);\n\n          var paths = chart.selectAll('path')\n              .data(dataset)\n              .enter()\n              .append('path')\n              .attr('class', 'area')\n              .attr('opacity', 0)\n              .attr('fill', function(d) { if(d.country === 'Nigeria' || d.country === 'South Africa') {return '#9e2f50';}else {return color(d.country); }} )\n              .attr('d', function(d) {\n                return area(d.hiv);\n              });\n              \n              paths.transition()\n                .duration(300)\n                .delay(function(d, i) { return (i * 20) + 2000; })\n                .attr('opacity', function(d) { if(d.country === 'Nigeria' || d.country === 'South Africa') {return 0.8;}else {return 0.4; }});\n\n          chart.append('text')\n                .attr('transform', 'translate(' + (width - margin.right - 20) + ',' + 202 + ')')\n                .attr('class', 'cLabel')\n                .text('Nigeria');\n\n          chart.append('text')\n                .attr('transform', 'translate(' + (width - margin.right - 20) + ',' + 392 + ')')\n                .attr('class', 'cLabel')\n                .text('South Africa');\n        \n\n          var tt = d3.select('.tooltip');\n          var overFlag = false;\n          setTimeout(function() {  \n            d3.select('.globalPath').style('visibility', 'hidden');\n            paths.style('cursor', 'pointer');\n            paths.on('mouseover', function(d) { \n              areaColor = d3.select(this).attr('fill');\n              console.log(d3.select(this));\n              paths\n              .attr('opacity', 0.2)\n              d3.select(this)\n                .classed('hover', true)\n                .attr('opacity', 0.8)\n                .attr('fill', '#9e2f50')\n            });\n\n            paths.on('mousemove', function (d) {\n              if (overFlag === false) {\n                areaColor = d3.select(this).attr('fill');\n              }\n              overFlag = true;\n              var mousex = d3.mouse(this);\n              mousex = mousex[0] + 10;\n              \n              var invertedx = xScale.invert(mousex);\n              invertedx = invertedx.getFullYear();\n              \n              var selected = (d.hiv);\n              mousedate = years.indexOf(String(invertedx));\n              pro = d.hiv[mousedate].y;\n\n              function checkValue(pro) { \n                if (pro < 1) {\n                  var proThousands = pro * 1000000\n                  return numFormat(proThousands);\n                } else {\n                  return pro.toFixed(1) + 'm'\n                }\n              }\n                tt.html('<span class=\"country\">' + d.country + '</span><br/>' + 'HIV population, ' + invertedx + ': <span class=\"dataNum\">' + checkValue(pro) + '</span>')\n                  .style('top', d3.event.pageY - 12 + 'px')\n                  .style('visibility', 'visible')\n            \n              var toolW = d3.select('.tooltip').node().getBoundingClientRect().width;\n              \n              if(d3.event.pageX > (width - toolW)) {\n                tt.style('left', d3.event.pageX - toolW - 30 + 'px')\n              } else {\n                tt.style('left', d3.event.pageX + 30 + 'px')\n              }\n            });\n            \n            paths.on('mouseout', function(d) { \n              d3.select(this)\n                .classed('hover', false)\n                .attr('fill', areaColor);\n              paths\n              .attr('opacity', function(d) { if(d.country === 'Nigeria' || d.country === 'South Africa') {return 0.8;} else {return 0.4; }});\n              tt.style('visibility', 'hidden');\n            });\n          }, 5240)\n          });\n\n      </script>\n\n  </body>\n</html>","filenames":["colorbrewer.js","hiv.csv","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"02bf9bd5b3ff614ccc42","_score":0.34751484,"_source":{"userId":"uafrazier","description":"D3: Scatterplot","created_at":"2015-04-16T02:22:35Z","updated_at":"2015-08-29T14:19:15Z","api":["d3.scale.linear","d3.svg.axis","d3.select","d3.csv","d3.descending","d3.min","d3.max"],"colors":["#36435a","#ffffff","#0dddff","#999999","#3a96b7","#d2b48c"],"readme":"","code":"<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>Issues</title>\n\t\t<script type=\"text/javascript\" src=\"http://d3js.org/d3.v3.js\"></script>\n\t\t<style type=\"text/css\">\n\t\t\t\n\t\tbody {\n\t\t\tfont-family: 'Open Sans',Helvetica,arial,sans-serif;\n\t\t\tline-height: 42px;\n\t\t}\n\t\th1 {\n\t\t\tfont-weight: 600;\n\t\t\ttext-transform: uppercase;\n\t\t}\n\t\theader {\n\t\t\tcolor: #36435A;\n\t\t}\n\t\thr {\n\t\t\tborder: 2px solid #36435A;\n\t\t}\n\t\t.standout {\n\t\t\tcolor: #36435A;\n\t\t\tfont-size: 22px;\n\t\t\tfont-weight: bold;\n\t\t\ttext-decoration: none;\n\t\t}\n\t\t.standout a {\n\t\t\tcolor: #36435A;\n\t\t\tfont-size: 32px;\n\t\t\tfont-weight: 600;\n\t\t\ttext-decoration: none;\n\t\t}\n\t\t.standout a:hover {\n\t\t\ttext-decoration: underline;\n\t\t}\n\t\tsvg {\n\t\t\tbackground: #FFFFFF;\n\t\t}\n\t\tcircle:hover {\n\t\t\tfill: #0DDDFF;\n\t\t}\n\t\t.axis path,\n\t\t.axis line {\n\t\t\tfill: none;\n\t\t\tstroke: #36435A;\n\t\t\tshape-rendering: crispEdges;\n\t\t}\n\t\t.axis text {\n\t\t\tfont-family: sans-serif;\n\t\t\tfont-size: 11px;\n\t\t\tfill: #36435A;\n\t\t}\n\n\t\t.tooltip {\n\t\t\tbackground: #FFFFFF;\n\t\t\tbox-shadow: 0 0 5px #999999;\n\t\t\tcolor: #36435A;\n\t\t\tline-height: normal;\n\t\t\tpadding: 8px;\n\t\t\tposition: absolute;\n\t\t\tvisibility: hidden;\n\t\t\tz-index: 10;\n \t\t}\n \t\t.subhead{\n        fill: #36435A;\n        font-size: 14px;\n      \t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<header>\n\t\t<h1>Stars And Issues</h1>\n\t\t<p>of the top 25 <span class='standout'>data visualization</span> repos on <span class='standout'><a href='http://github.com'>GitHub</a></span> (data accessed March 2015)</p>\n\t\t<hr/>\n\t\t</header>\n\t\n\t\t<script type=\"text/javascript\">\t\t\n\n\t\t\tvar w = 900;\n\t\t\tvar h = 450;\n\t\t\tvar padding = [ 20, 10, 50, 100 ];  //Top, right, bottom, left\n\n\n\t\t\tvar xScale = d3.scale.linear()\n\t\t\t\t\t\t\t\t.range([ padding[3], w - padding[1] - padding[3] ]);\n\t\t\t\n\t\t\tvar yScale = d3.scale.linear()\n\t\t\t\t\t\t\t\t.range([ padding[0], h - padding[2] ]);\n\t\t\t\t\t\t\t\t\n\t\t\tvar xAxis = d3.svg.axis()\n\t\t\t\t\t\t\t.scale(xScale)\n\t\t\t\t\t\t\t.orient(\"bottom\");\n\t\t\t\t\t\t\t\n\t\t\tvar yAxis = d3.svg.axis()\n\t\t\t\t\t\t\t.scale(yScale)\n\t\t\t\t\t\t\t.orient(\"left\");\t\t\t\t\n\n\t\t\tvar svg = d3.select(\"body\")\n\t\t\t\t\t\t.append(\"svg\")\n\t\t\t\t\t\t.attr(\"width\", w)\n\t\t\t\t\t\t.attr(\"height\", h);\n\n\t\t\t\tsvg.append(\"text\")\t\t\t   \n    \t\t\t.attr(\"class\", \"y subhead\")\t   \n    \t\t\t.attr(\"text-anchor\", \"middle\") \n    \t\t\t.attr(\"y\", 45)\t\t\t\t   \n    \t\t\t.attr(\"x\", -(h/2))\t\t\t   \n    \t\t\t.attr(\"transform\", \"rotate(-90)\")\n    \t\t\t.text(\"Number of Stargazers\");\t   \n    \t\t\t\t\n\t\t\t\tsvg.append('text')\n\t\t\t\t.text('Number of Open Issues')\n\t\t\t\t.attr('x', w/2)\n\t\t\t\t.attr('y', h - 5 )\n\t\t\t\t.attr('text-anchor', 'middle')\n\t\t\t\t.attr('class', 'x subhead')\n\t\t\t\t.attr('opacity', 1);\t\t\t\n\t\t\t\t\t\t\n\t\t\tvar tooltip = d3.select('body')\n\t\t\t \t\t\t\t.append('div')\n\t\t\t \t\t\t\t.attr('class', 'tooltip');\n\t\t\t \t\t\t\n\t\t\tvar tooltipOn = function(d, i) {\n\t\t\t \t\t\tvar content = '<div><b>' + d.name + ' </b>has<b> ' +d.open_issues_count+'</b> open issues<br/> and <b>'+d.stargazers_count.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")+' </b>stars</div>';\n\t\t\t \t\t\ttooltip.html(content)\n\t\t\t \t\t\t.style('visibility', 'visible');\n \t\t\t};\n \t\t\t\n \t\t\tvar tooltipMove = function(d, i) {\n \t\t\t\t\ttooltip.style('top', (d3.event.pageY - 55) + 'px')\n \t\t\t\t\t.style('left', (d3.event.pageX + 10) + 'px');\n \t\t\t};\t\t\t\n\t\t\t\n\t\t\t var tooltipOff = function() {\n\t\t\t \t\t\ttooltip.style('visibility', 'hidden');\n \t\t\t};\n \t\t\t\n\t\t\td3.csv(\"github-api-visualization-cleaned.csv\", function(dataLoad) {\n\t\t\t\t\n\t\t\t\tvar dataSorted = dataLoad.sort(function(a,b) {\n\t\t\t\t\treturn d3.descending(+a.open_issues_count,+b.open_issues_count);\n\t\t\t\t})\n\n\t\t\t\tvar data = dataSorted.filter(function(d,i) {\n\t\t\t\t\tif (i<25) {\n\t\t\t\t\t\treturn d;\n\t\t\t\t\t}});\t\t\t\t\n\n\t\t\t\txScale.domain([ \n\t\t\t\t\td3.min(data, function(d) {\n\t\t\t\t\t\treturn +d.open_issues_count;\n\t\t\t\t\t}), \n\t\t\t\t\td3.max(data, function(d) {\n\t\t\t\t\t\treturn +d.open_issues_count;\n\t\t\t\t\t})\n\t\t\t\t]);;\n\n\t\t\t\tyScale.domain([\n\t\t\t\t\td3.max(data, function(d) {\n\t\t\t\t\t\treturn +d.stargazers_count;\n\t\t\t\t\t}),\n\t\t\t\t\td3.min(data, function(d) {\n\t\t\t\t\t\treturn +d.stargazers_count;\n\t\t\t\t\t})\n\t\t\t\t]);\n\t\t\t\t\n\t\t\t\tvar circles = svg.selectAll(\"circle\")\n\t\t\t\t\t\t\t\t.data(data)\n\t\t\t\t\t\t\t\t.enter()\n\t\t\t\t\t\t\t\t.append(\"circle\");\n\t\t\t\t\t\t\t\t\n\t\t\t\tcircles.attr(\"cx\",padding[3])\n\t\t\t\t\t .attr(\"cy\", function(d) {\n\t\t\t\t\t\treturn yScale(d.stargazers_count);\n\t\t\t\t\t })\n\t\t\t\t\t .attr(\"r\",4)\n\t\t\t\t\t .attr(\"fill\",\"#FFFFFF\")\n\t\t\t\t\t .transition()\n\t\t\t\t\t .duration(2000)\n\t\t\t\t\t .attr(\"cx\",function(d) {\n\t\t\t\t\t\treturn xScale(d.open_issues_count);\n\t\t\t\t\t })\n\t\t\t\t\t .attr(\"fill\",\"#3A96B7\");\n\t\t\t\t\t \n\t\t\t\tcircles.on('mouseover', tooltipOn)\n\t\t\t\t\t.on('mousemove', tooltipMove)\n\t\t\t\t\t.on('mouseout', tooltipOff);\n        \n\t\t\t\tsvg.append(\"g\")\n\t\t\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t\t\t.attr(\"transform\", \"translate(0,\" + (h - padding[2] + 10) + \")\")\n\t\t\t\t\t.call(xAxis);\n\n\t\t\t\tsvg.append(\"g\")\n\t\t\t\t.attr(\"class\", \"y axis\")\n\t\t\t\t.attr(\"transform\", \"translate(\" + (padding[3] - 5) + \",0)\") \n\t\t\t\t.call(yAxis);\n\n\t\t\t});\n\n\t\t</script>\n\t\t\n\t</body>\n</html>","filenames":["github-api-visualization-cleaned.csv","index.html","thumbnail.png"],"thumb":"208aa63c591548ec6d58ec72f047c3e7dcce02d6"}},{"_index":"blockbuilder","_type":"blocks","_id":"1571529","_score":0.34749278,"_source":{"userId":"bewest","description":"d3.geo.tiler","created_at":"2012-01-06T17:19:41Z","updated_at":"2015-09-29T08:08:02Z","api":["d3.select","d3.geo.tiler","d3.json","d3.entries","d3.hsl","d3.geo.mercator"],"colors":["#e6e6e6","#a52a2a","#000000"],"readme":"","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"text/javascript\" src=\"https://github.com/mbostock/d3/raw/v1.8.4/d3.js\"></script>\n    <script type=\"text/javascript\" src=\"https://github.com/mbostock/d3/raw/v1.8.4/d3.geo.js\"></script>\n    <script type=\"text/javascript\" src=\"https://github.com/simplegeo/polymaps/raw/v2.4.0/polymaps.js\"></script>\n    <script type=\"text/javascript\" src=\"tiler.js\"></script>\n    <style type=\"text/css\">\n\n@import url(\"http://github.com/simplegeo/polymaps/raw/v2.4.0/examples/example.css\");\n\nhtml, body {\n  height: 100%;\n  background: #E6E6E6;\n  margin: 0;\n  font: 10px sans-serif;\n}\n\nsvg {\n  display: block;\n}\n\ncircle {\n  stroke: black;\n  fill: brown;\n  fill-opacity: .5;\n}\n\n#map {\n  width: 960px;\n  height: 500px;\n}\n\n    </style>\n  </head>\n  <body>\n    <div id=\"map\"></div>\n    <script type=\"text/javascript\">\n\nvar po = org.polymaps;\n\n// Create the map object, add it to #map…\nvar map = po.map()\n    .container(d3.select(\"#map\").append(\"svg:svg\").node())\n    .zoom(8)\n    .add(po.drag())\n    .add(po.wheel().smooth(false))\n    .add(po.dblclick())\n    .add(po.arrow());\n\n// Add the CloudMade image tiles as a base layer…\nmap.add(po.image()\n    .url(po.url(\"http://{S}tile.cloudmade.com\"\n    + \"/1a1b06b230af4efdbb989ea99e9841af\" // http://cloudmade.com/register\n    + \"/998/256/{Z}/{X}/{Y}.png\")\n    .hosts([\"a.\", \"b.\", \"c.\", \"\"])));\n\n// Add the custom stations layer…\nmap.add(stations(\"stations.json\"));\n\n// Add the compass control on top.\nmap.add(po.compass()\n    .pan(\"none\"));\n\n// Custom layer implementation.\nfunction stations(url) {\n\n  // Create the tiler, for organizing our points into tile boundaries.\n  var tiler = d3.geo.tiler()\n      .zoom(11)\n      .location(function(d) { return d.value; });\n\n  // Create the base layer object, using our tile factory.\n  var layer = po.layer(load);\n\n  // Load the station data. When the data comes back, reload.\n  d3.json(url, function(json) {\n    tiler.points(d3.entries(json));\n    layer.reload();\n  });\n\n  // Custom tile implementation.\n  function load(tile, projection) {\n    projection = projection(tile).locationPoint;\n\n    // Add an svg:g for each station.\n    var g = d3.select(tile.element = po.svg(\"g\")).selectAll(\"g\")\n        .data(tiler.tile(tile.column, tile.row, tile.zoom))\n      .enter().append(\"svg:g\")\n        .attr(\"transform\", transform);\n\n    // Add a circle.\n    g.append(\"svg:circle\")\n        .style(\"fill\", d3.hsl(Math.random() * 360, 1, .5))\n        .attr(\"r\", 4.5);\n\n    // Add a label.\n    g.append(\"svg:text\")\n        .attr(\"x\", 7)\n        .attr(\"dy\", \".31em\")\n        .text(function(d) { return d.key; });\n\n    function transform(d) {\n      d = projection({lon: d.value[0], lat: d.value[1]});\n      return \"translate(\" + d.x + \",\" + d.y + \")\";\n    }\n  }\n\n  return layer;\n}\n\n    </script>\n  </body>\n</html>\n","filenames":["index.html","stations.json","tiler.js"]}},{"_index":"blockbuilder","_type":"blocks","_id":"1022589acfbbadb14576","_score":0.3473251,"_source":{"userId":"randomblink","description":"D3 objTimeline","created_at":"2015-12-02T19:04:11Z","updated_at":"2016-02-11T21:25:18Z","api":["d3.time.format","d3.time.scale","d3.select","d3.svg.axis"],"colors":["#000000"],"readme":"Timeline\n========\nThis is an attempt to create a timeline object that can be implemented quickly and easily on a webpage.\n\nCanvas.js\n---------\nThe jsObject manages the canvas that the timeline is rendered on.\n\nSVG.css\n-------\nThis is the style component.\n\n\n\nThe bl.ocks.org is located [here](http://bl.ocks.org/randomblink/1022589acfbbadb14576).\n","code":"<!DOCTYPE html>\n\n<head>\n<meta charset=\"utf-8\">\n<script src=\"//d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"style/svg.css\">\n</head>\n<body>\n</body>\n<script src=\"js/canvas.js\" charset=\"utf-8\"></script>\n<script src=\"js/objTimeline.js\" charset=\"utf-8\"></script>\n<script>\n  var newLine = new objTimeline( \"2014-01-01\", \"2015-12-31\" );\n</script>\n</html>","filenames":["README.md","Thumbnail.png","canvas.js","index.html","objTimeline.js","svg.css"]}},{"_index":"blockbuilder","_type":"blocks","_id":"0c4cf357ab5ed3e90382","_score":0.34709334,"_source":{"userId":"fabid","description":"d3-heatmap","created_at":"2016-03-01T16:18:25Z","updated_at":"2016-03-02T14:50:07Z","api":["d3.random.normal","d3.range","d3.heatmap","d3.scale.linear","d3.max","d3.scale.identity","d3.select"],"colors":["#4682b4","#0000ff","#ffffff"],"readme":"Rectangular binning with [d3-heatmap](https://github.com/fabid/d3-heatmap/blob/master/heatmap.js)\nbased on [d3-hexbin demo](http://bl.ocks.org/xaranke/b956ee7215b7b50bc78a)\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <script src=\"https://cdn.rawgit.com/fabid/d3-heatmap/master/heatmap.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width:100%; height: 100% }\n  </style>\n</head>\n\n<body>\n  <script>\n   var margin = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      width = 960 - margin.left - margin.right,\n      height = 500 - margin.top - margin.bottom;\n\n    var randomX = d3.random.normal(width / 2, 80),\n      randomY = d3.random.normal(height / 2, 80),\n      points = d3.range(1000).map(function() {\n        return [randomX(), randomY()];\n      });\n    console.log(points);\n\t\tvar size = 4;\n    var heatmap = d3.heatmap()\n\t\t\t.std(5)\n    \t.dx(size)\n      .dy(size);\n\n    // the result of the heatmap layout\n    var heatmapData = heatmap(points);\n\n    var color = d3.scale.linear()\n      .domain([0, d3.max(heatmapData, function(d) {\n        return d.v;\n      })])\n      .range([\"white\", \"steelblue\"])\n      .interpolate(d3.interpolateLab);\n\n    var x = d3.scale.identity()\n      .domain([0, width]);\n\n    var y = d3.scale.linear()\n      .domain([0, height])\n      .range([height, 0]);\n    var yinv = d3.scale.linear()\n      .domain([height, 0])\n      .range([height, 0]);\n\n    var svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    svg.append(\"g\")\n      .selectAll(\".square\")\n      .data(heatmapData)\n      .enter().append(\"rect\")\n       .attr(\"class\", \"square\")\n      .attr(\"x\", function(d) { return x(d.x); })\n      .attr(\"y\", function(d) { return y(d.y) - yinv(size); })    \n      .attr(\"width\", x(size))\n      .attr(\"height\", yinv(size))\n      .style(\"fill\", function(d) {\n        return color(d.v)\n      })\n      .style(\"stroke\", \"none\");\n  </script>\n</body>\n","filenames":["README.md","index.html","thumbnail.png"],"thumb":"4f1d98e2ba441083d1a362fcb1296a4cd05a2cb3"}},{"_index":"blockbuilder","_type":"blocks","_id":"8a87b89f3600a7175f27","_score":0.34698674,"_source":{"userId":"wboykinm","description":"D3 Globe","created_at":"2015-08-07T14:57:11Z","updated_at":"2015-08-29T14:26:53Z","api":["d3.quantile","d3.zip.apply","d3.min","d3.bisector","d3.xhr","d3.text","d3.formatPrefix","d3.map","d3.round","d3.event.stopPropagation","d3.event.preventDefault","d3.interpolateNumber","d3.transform","d3.rgb","d3.hsl","d3.interpolate","d3.interpolateArray","d3.interpolateString","d3.interpolateRgb","d3.ns.qualify","d3.requote","d3.dispatch","d3.ease.apply","d3.timer","d3.ease","d3.select","d3.rebind","d3.range.apply","d3.format","d3.bisect","d3.scale.linear","d3.scale.pow","d3.range","d3.scale.ordinal","d3.svg.diagonal","d3.transition","d3.touches","d3.mouse","d3.geom.quadtree","d3.behavior.drag","d3.layout.hierarchy","d3.sum","d3.permute","d3.max","d3.merge","d3.csv.parse","d3.csv.parseRows","d3.geo.albers","d3.geo.albersUsa","d3.geom.polygon","d3.geo.greatArc","d3.time.format","d3.time.dayOfYear","d3.time.sundayOfYear","d3.time.mondayOfYear","d3.time.format.utc","d3.time.year","d3.time.day","d3.geo.azimuthal","d3.geo.path","d3.geo.greatCircle","d3.json"],"colors":["#444444","#000000","#333333","#ddeeff","#c2c2c2","#e2e2e2","#ff8e00","#ffffff","#f0f8ff","#faebd7","#00ffff","#7fffd4","#f0ffff","#f5f5dc","#ffe4c4","#ffebcd","#0000ff","#8a2be2","#a52a2a","#deb887","#5f9ea0","#7fff00","#d2691e","#ff7f50","#6495ed","#fff8dc","#dc143c","#00008b","#008b8b","#b8860b","#a9a9a9","#006400","#bdb76b","#8b008b","#556b2f","#ff8c00","#9932cc","#8b0000","#e9967a","#8fbc8f","#483d8b","#2f4f4f","#00ced1","#9400d3","#ff1493","#00bfff","#696969","#1e90ff","#b22222","#fffaf0","#228b22","#ff00ff","#dcdcdc","#f8f8ff","#ffd700","#daa520","#808080","#008000","#adff2f","#f0fff0","#ff69b4","#cd5c5c","#4b0082","#fffff0","#f0e68c","#e6e6fa","#fff0f5","#7cfc00","#fffacd","#add8e6","#f08080","#e0ffff","#fafad2","#d3d3d3","#90ee90","#ffb6c1","#ffa07a","#20b2aa","#87cefa","#778899","#b0c4de","#ffffe0","#00ff00","#32cd32","#faf0e6","#800000","#66cdaa","#0000cd","#ba55d3","#9370db","#3cb371","#7b68ee","#00fa9a","#48d1cc","#c71585","#191970","#f5fffa","#ffe4e1","#ffe4b5","#ffdead","#000080","#fdf5e6","#808000","#6b8e23","#ffa500","#ff4500","#da70d6","#eee8aa","#98fb98","#afeeee","#db7093","#ffefd5","#ffdab9","#cd853f","#ffc0cb","#dda0dd","#b0e0e6","#800080","#ff0000","#bc8f8f","#4169e1","#8b4513","#fa8072","#f4a460","#2e8b57","#fff5ee","#a0522d","#c0c0c0","#87ceeb","#6a5acd","#708090","#fffafa","#00ff7f","#4682b4","#d2b48c","#008080","#d8bfd8","#ff6347","#40e0d0","#ee82ee","#f5deb3","#f5f5f5","#ffff00","#9acd32","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf","#aec7e8","#ffbb78","#98df8a","#ff9896","#c5b0d5","#c49c94","#f7b6d2","#c7c7c7","#dbdb8d","#9edae5","#393b79","#5254a3","#6b6ecf","#9c9ede","#637939","#8ca252","#b5cf6b","#cedb9c","#8c6d31","#bd9e39","#e7ba52","#e7cb94","#843c39","#ad494a","#d6616b","#e7969c","#7b4173","#a55194","#ce6dbd","#de9ed6","#3182bd","#6baed6","#9ecae1","#c6dbef","#e6550d","#fd8d3c","#fdae6b","#fdd0a2","#31a354","#74c476","#a1d99b","#c7e9c0","#756bb1","#9e9ac8","#bcbddc","#dadaeb","#636363","#969696","#bdbdbd","#d9d9d9","#005c99","#0099ff","#227fbb"],"readme":"# GISDevs Slack Channel Members\n\nA map of [GISDev](http://slackgisdevs.com/) participants, based on [the excellent work of Marc Neuwirth](https://gist.github.com/marcneuwirth/2865882).\n","code":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <svg id=\"defs\">\n        <defs>\n            <linearGradient id=\"gradBlue\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                <stop offset=\"0%\" style=\"stop-color:#005C99;stop-opacity:1\" />\n                <stop offset=\"100%\" style=\"stop-color:#0099FF;stop-opacity:1\" />\n            </linearGradient>\n            <filter id=\"glow\">\n                <feColorMatrix type=\"matrix\"\n                    values=\n                    \"0 0 0 0   0\n                     0 0 0 0.9 0\n                     0 0 0 0.9 0\n                     0 0 0 1   0\"/>\n                <feGaussianBlur stdDeviation=\"5.5\" result=\"coloredBlur\"/>\n                <feMerge>\n                    <feMergeNode in=\"coloredBlur\"/>\n                    <feMergeNode in=\"SourceGraphic\"/>\n                </feMerge>\n            </filter>\n        </defs>\n    </svg>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>\n    <script src=\"d3.custom.js\"></script>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n","filenames":["README.md","d3.custom.js","index.html","script.js","style.css","thumbnail.png","world-countries.json"],"thumb":"50c2a0c9d3136562b90c820a4cee2d609799e4c0"}},{"_index":"blockbuilder","_type":"blocks","_id":"61b00b99e657a68ce6fc","_score":0.34619665,"_source":{"userId":"nitaku","description":"d3-shape","created_at":"2015-12-08T12:37:28Z","updated_at":"2015-12-16T13:11:48Z","api":["d3.select"],"colors":["#ffffff","#d2b48c","#ffa500","#4682b4","#0000ff","#ff0000"],"readme":"A dead simple example of the just released [d3-shape](https://github.com/d3/d3-shape) module of the upcoming fourth version of [d3.js](https://github.com/d3/d3-path). The example shows two SVG paths created using Catmull-Rom interpolation. [d3-path](https://github.com/d3/d3-path) is also loaded as a dependency for generating SVG paths.\n\nNoticed that I skipped the module configuration and building phase of d3 v4 because i) I am not yet accustomed to it, and ii) I just wanted to quickly play with the new API.","code":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>d3-shape</title>\n    <link rel=\"stylesheet\" href=\"index.css\">\n    <script src=\"http://d3js.org/d3.v3.min.js\"></script>\n    <script src=\"d3-path.js\"></script>\n    <script src=\"d3-shape.js\"></script>\n  </head>\n  <body>\n    <svg></svg>\n    <script src=\"index.js\"></script>\n  </body>\n</html>","filenames":["README.md","d3-path.js","d3-shape.js","index.coffee","index.css","index.html","index.js","thumbnail.png"],"thumb":"3367b2019d9bad772061fdced418e38ed598d998"}},{"_index":"blockbuilder","_type":"blocks","_id":"31168147b88a1748bc8b","_score":0.34450388,"_source":{"userId":"enjalot","description":"d3.geo with d3.geo.zoom","created_at":"2014-07-16T06:09:32Z","updated_at":"2016-05-06T04:27:41Z","api":["d3.dispatch","d3.behavior.zoom","d3.mouse","d3.rebind","d3.json","d3.geo.orthographic","d3.geo.albers","d3.geo.mercator","d3.geo.path","d3.select","d3.geo.graticule","d3.geo.zoom","d3.event.sourceEvent.preventDefault","d3.selectAll"],"colors":["#d2b48c","#ff0000","#008000","#0000ff","#ffffff","#808080"],"readme":"","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<html>\n<head>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"http://d3js.org/topojson.v1.min.js\"></script>\n<script src=\"d3.geo.zoom.js\"></script>\n<style>\n.land {\n  fill: green;\n\n}\n.graticule {\n  fill-opacity: 0;\n  stroke: gray;\n  stroke-opacity: 0.5;\n}\n.point {\n  stroke: red;\n  fill-opacity: 0.2;\n  fill: white;\n}\n</style>\n</head>\n\n<body>\n<svg class=\"myworld\"></svg>\n\n<script>\n\nd3.json(\"world110.json\", function(err, world) {\n  var countries = topojson.feature(world, world.objects.land);\n\n  var width = 420\n  var height = 400\n  var projection = d3.geo.orthographic()\n  //var projection = d3.geo.albers()\n  //var projection = d3.geo.mercator()\n    .scale(170)\n    .rotate([100,0,0])\n    .translate([width/2, height/2])\n    .clipAngle(90);\n\n  var path = d3.geo.path()\n  .projection(projection);\n\n  var svg = d3.select(\".myworld\");\n\n  var graticule = d3.geo.graticule()\n  svg.append(\"path\")\n    .datum(graticule)\n    .attr(\"class\", \"graticule\")\n    .attr(\"d\", path);\n\n  svg.append(\"path\")\n    .datum(countries)\n    .attr(\"d\", path)\n    .classed(\"land\", true);\n\n\n  var zoom = d3.geo.zoom()\n    .projection(projection)\n    //.scaleExtent([projection.scale() * .7, projection.scale() * 10])\n    .on(\"zoom.redraw\", function() {\n      d3.event.sourceEvent.preventDefault();\n      svg.selectAll(\"path\").attr(\"d\", path);\n      svg.selectAll(\"circle\")\n      .attr({\n        cx: function(d) { return projection(d)[0] },\n        cy: function(d) { return projection(d)[1] },\n      })\n\n    })\n  d3.selectAll(\"path\").call(zoom);\n\n  var lonlat = [-109, 37.7833];\n\n  var xy = projection(lonlat)\n  svg.append(\"circle\")\n  .datum(lonlat)\n  .classed(\"point\", true)\n  .attr({\n    cx: function(d) { return projection(d)[0] },\n    cy: function(d) { return projection(d)[1] },\n    r: 10\n  })\n\n  navigator.geolocation.getCurrentPosition(function(pos){\n    console.log(pos);\n    var coords = [pos.coords.longitude, pos.coords.latitude]\n    svg.append(\"circle\")\n    .datum(coords)\n    .attr({\n      cx: function(d) { return projection(d)[0] },\n      cy: function(d) { return projection(d)[1] },\n      r: 15,\n    })\n    .classed(\"point\", true)\n    .style(\"stroke\", \"blue\");\n  })\n\n})\n\n</script>\n</body>\n</html>","filenames":["d3.geo.zoom.js","index.html","world110.json"]}},{"_index":"blockbuilder","_type":"blocks","_id":"0601ad01f560d49a5967","_score":0.3417692,"_source":{"userId":"jkutianski","description":"D3 Clock","created_at":"2014-05-05T23:03:11Z","updated_at":"2015-09-17T21:07:34Z","api":["d3.select","d3.scale.linear","d3.timer"],"colors":["#ff0000","#0a0a0a","#1e2423","#0d0d0d","#b7b7b7","#fcfcfc","#ffffff","#c9c9c9","#020202","#000000","#ececec","#9b9b9b","#58595b","#f1f0f0","#050505","#e8e8e8"],"readme":"D3 Clock\n========\n\nDEMO of d3.selection.template\n","code":"<!DOCTYPE html>\n<html>\n<head>\n    <title>D3 World Clock</title>\n    <script src=\"http://d3js.org/d3.v2.min.js\" type=\"text/javascript\"></script>\n    <script src=\"http://cdnjs.cloudflare.com/ajax/libs/mustache.js/0.7.2/mustache.min.js\" type=\"text/javascript\"></script>\n    <script src=\"d3.selection.template.min.js\" type=\"text/javascript\"></script>\n</head>\n<body>\n  <template id=\"clock\" type=\"text/html\" style=\"display: none;\">\n      <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\">\n        <g id=\"_Clock\" transform=\"translate(-0.1 -1.5)\">\n          <g>       \n            <linearGradient id=\"SVGID_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"2349.1309\" y1=\"4306.4551\" x2=\"2442.1309\" y2=\"4306.4551\" gradientTransform=\"matrix(1 0 0 1 -2347.8008 -4255.7031)\">\n              <stop  offset=\"0.0013\" style=\"stop-color:#0A0A0A\"/>\n              <stop  offset=\"0.4909\" style=\"stop-color:#1E2423\"/>\n              <stop  offset=\"1\" style=\"stop-color:#0D0D0D\"/>\n            </linearGradient>\n            <path fill=\"url(#SVGID_1_)\" stroke=\"#B7B7B7\" d=\"M47.829,4.253c25.683,0,46.501,20.814,46.501,46.499\n              c0,25.684-20.818,46.5-46.501,46.5c-25.684,0-46.499-20.816-46.499-46.5C1.33,25.068,22.145,4.253,47.829,4.253z\"/>\n            \n              <linearGradient id=\"SVGID_2_\" gradientUnits=\"userSpaceOnUse\" x1=\"2356.1309\" y1=\"4306.4551\" x2=\"2435.1309\" y2=\"4306.4551\" gradientTransform=\"matrix(1 0 0 1 -2347.8008 -4255.7031)\">\n              <stop  offset=\"0.0013\" style=\"stop-color:#0A0A0A\"/>\n              <stop  offset=\"0.4909\" style=\"stop-color:#1E2423\"/>\n              <stop  offset=\"1\" style=\"stop-color:#0D0D0D\"/>\n            </linearGradient>\n            <path fill=\"url(#SVGID_2_)\" stroke=\"#B7B7B7\" stroke-width=\"0.5\" d=\"M47.829,11.253c21.813,0,39.501,17.684,39.501,39.499\n              c0,21.813-17.688,39.5-39.501,39.5c-21.815,0-39.499-17.688-39.499-39.5C8.33,28.937,26.014,11.253,47.829,11.253z\"/>\n          </g>\n          <g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M43.971,11.905c0.07,0.663,0.14,1.326,0.211,1.99\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M39.913,12.525c0.139,0.65,0.277,1.305,0.416,1.957\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M35.665,13.635c0.203,0.633,0.41,1.269,0.617,1.9\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M32.018,15.072c0.281,0.606,0.559,1.214,0.838,1.818\"/>\n            </g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M24.546,19.478c0.393,0.539,0.784,1.079,1.178,1.618\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M21.439,22.214c0.445,0.494,0.893,0.991,1.339,1.486\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M18.315,25.298c0.492,0.446,0.989,0.894,1.484,1.337\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M15.876,28.367c0.547,0.384,1.091,0.772,1.635,1.156\"/>\n            </g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M12.018,35.092c0.609,0.271,1.219,0.542,1.829,0.813\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M10.695,39.015c0.632,0.205,1.269,0.412,1.902,0.618\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M9.532,43.248c0.65,0.141,1.304,0.279,1.955,0.416\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M8.954,47.125c0.665,0.06,1.331,0.123,1.994,0.184\"/>\n            </g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M9.109,55.129c0.663-0.07,1.327-0.14,1.99-0.211\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M9.925,59.188c0.65-0.139,1.305-0.271,1.957-0.416\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M11.034,63.436c0.633-0.203,1.269-0.41,1.901-0.617\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M12.473,67.082c0.605-0.281,1.214-0.559,1.818-0.838\"/>\n            </g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M16.877,74.382c0.538-0.394,1.079-0.784,1.617-1.178\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M19.613,77.488c0.494-0.445,0.991-0.895,1.486-1.34\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M22.698,80.613c0.446-0.493,0.894-0.99,1.337-1.485\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M25.766,83.051c0.384-0.546,0.771-1.091,1.156-1.634\"/>\n            </g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M32.191,86.434c0.27-0.604,0.542-1.219,0.812-1.828\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M36.113,87.756c0.205-0.633,0.412-1.27,0.618-1.902\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M40.348,88.92c0.14-0.65,0.278-1.305,0.415-1.955\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M44.224,89.496c0.06-0.664,0.123-1.33,0.185-1.992\"/>\n            </g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M52.455,89.494c-0.071-0.663-0.141-1.327-0.211-1.988\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M56.514,88.678c-0.14-0.65-0.277-1.305-0.416-1.955\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M60.764,87.57c-0.205-0.635-0.412-1.271-0.619-1.901\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M64.355,86.042c-0.279-0.604-0.563-1.213-0.836-1.817\"/>\n            </g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M70.818,82.135c-0.396-0.539-0.784-1.08-1.178-1.617\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M77.21,76.589c-0.494-0.446-0.989-0.894-1.485-1.338\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M74.049,79.611c-0.445-0.493-0.893-0.99-1.339-1.484\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M79.559,73.469c-0.545-0.384-1.09-0.771-1.634-1.154\"/>\n            </g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M83.305,66.596c-0.604-0.271-1.219-0.543-1.826-0.813\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M86.068,58.598c-0.651-0.139-1.305-0.277-1.957-0.416\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M84.842,62.797c-0.633-0.205-1.27-0.412-1.902-0.617\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M86.541,54.722c-0.663-0.061-1.328-0.124-1.991-0.185\"/>\n            </g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M86.455,46.475c-0.662,0.07-1.327,0.139-1.988,0.21\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M84.85,38.166c-0.633,0.206-1.269,0.412-1.896,0.618\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M85.887,42.417c-0.65,0.139-1.304,0.278-1.955,0.417\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M83.32,34.574c-0.604,0.279-1.211,0.557-1.815,0.835\"/>\n            </g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M79.41,28.023c-0.539,0.392-1.08,0.784-1.617,1.176\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M73.865,21.63c-0.445,0.495-0.893,0.991-1.338,1.486\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M76.889,24.793c-0.494,0.446-0.99,0.893-1.484,1.339\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M70.746,19.284c-0.385,0.544-0.771,1.088-1.156,1.632\"/>\n            </g>\n            <g>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M64.105,15.486c-0.271,0.609-0.541,1.218-0.813,1.827\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M56.107,12.722c-0.144,0.652-0.276,1.304-0.416,1.956\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M60.309,13.949c-0.205,0.634-0.412,1.27-0.617,1.902\"/>\n              <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M52.093,12.004c-0.062,0.664-0.124,1.328-0.186,1.991\"/>\n              <g id=\"Layer_3_copy_5\">\n                <path fill=\"none\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M86.6,50.753c-0.666-0.001-1.334,0-2,0\"/>\n              </g>\n            </g>\n            <g id=\"Layer_3_copy_3\">\n              <path fill=\"none\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M28,17.134c0.333,0.577,0.667,1.155,1,1.732\"/>\n            </g>\n            <g id=\"Layer_3_copy_11\">\n              <path fill=\"none\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M15.566,32.5c-0.577-0.334-1.155-0.667-1.732-1\"/>\n            </g>\n            <g id=\"Layer_3_copy_10\">\n              <path fill=\"none\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M10.8,50.753c-0.667-0.001-1.334,0-2,0\"/>\n            </g>\n            <g id=\"Layer_3_copy_8\">\n              <path fill=\"none\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M16.27,70c-0.577,0.333-1.155,0.667-1.732,1\"/>\n            </g>\n            <g id=\"Layer_3_copy_9\">\n              <path fill=\"none\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M30,83.232c-0.333,0.578-0.667,1.156-1,1.729\"/>\n            </g>\n            <g id=\"Layer_3_copy\">\n              <path fill=\"none\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M47.83,87.7c0,0.665,0,1.334,0,2\"/>\n            </g>\n            <g id=\"Layer_3_copy_7\">\n              <path fill=\"none\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M68,84.066c-0.333-0.58-0.667-1.157-1-1.732\"/>\n            </g>\n            <g id=\"Layer_3_copy_6\">\n              <path fill=\"none\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M81.506,70.283c-0.578-0.336-1.156-0.668-1.732-1\"/>\n            </g>\n            <g id=\"Layer_3_copy_4\">\n              <path fill=\"none\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M81.506,31.5c-0.578,0.333-1.154,0.667-1.732,1\"/>\n            </g>\n            <g id=\"Layer_3_copy_2\">\n              <path fill=\"none\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M67.5,17.134c-0.334,0.577-0.667,1.155-1,1.732\"/>\n            </g>\n            <path fill=\"#FCFCFC\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" d=\"M47.83,11.7c0,0.667,0,1.333,0,2\"/>\n          </g>\n          <g>\n            <circle fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" cx=\"30.5\" cy=\"21\" r=\"1.75\"/>\n            <circle fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" cx=\"18.1\" cy=\"33.75\" r=\"1.75\"/>\n            <circle fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" cx=\"18.833\" cy=\"68.9\" r=\"1.75\"/>\n            <circle fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" cx=\"31.5\" cy=\"81\" r=\"1.75\"/>\n            <circle fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" cx=\"65.5\" cy=\"80.3\" r=\"1.75\"/>\n            <circle fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" cx=\"77.5\" cy=\"68\" r=\"1.75\"/>\n            <circle fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" cx=\"65\" cy=\"21\" r=\"1.75\"/>\n            <circle fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" cx=\"77.333\" cy=\"33.75\" r=\"1.75\"/>\n            <polygon fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" points=\"47.9,14.745 50.9,14.745 49.4,19 47.9,23.255 46.4,19 \n              44.9,14.745   \"/>\n            <rect x=\"11.833\" y=\"49.717\" fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" width=\"8.75\" height=\"2.166\"/>\n            <rect x=\"74.875\" y=\"49.717\" fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" width=\"8.75\" height=\"2.166\"/>\n            <rect x=\"46.747\" y=\"78.125\" fill=\"#FCFCFC\" stroke=\"#C9C9C9\" stroke-width=\"0.25\" width=\"2.166\" height=\"8.75\"/>\n          </g>\n          <g>\n            <polygon fill=\"#FFFFFF\" stroke=\"#FFFFFF\" stroke-width=\"0.5\" points=\"47.82,6.32 51.318,6.32 49.57,8.26 47.82,10.2 46.07,8.26 \n              44.32,6.32  \"/>\n            <circle fill=\"#FFFFFF\" stroke=\"#020202\" stroke-width=\"0.25\" cx=\"47.9\" cy=\"8.261\" r=\"2\"/>\n          </g>\n          <g>\n            \n              <rect x=\"69.069\" y=\"11.319\" transform=\"matrix(0.8659 0.5001 -0.5001 0.8659 16.2869 -33.072)\" fill=\"#FFFFFF\" stroke=\"#FFFFFF\" stroke-width=\"0.25\" width=\"1.534\" height=\"5.053\"/>\n            <rect x=\"88.273\" y=\"49.987\" fill=\"#FFFFFF\" width=\"5.053\" height=\"1.532\"/>\n            <rect x=\"2.474\" y=\"49.987\" fill=\"#FFFFFF\" width=\"5.052\" height=\"1.532\"/>\n            \n              <rect x=\"26.155\" y=\"85.975\" transform=\"matrix(0.8654 0.5011 -0.5011 0.8654 47.9685 -1.5778)\" fill=\"#FFFFFF\" width=\"1.532\" height=\"5.05\"/>\n            \n              <rect x=\"25.579\" y=\"11.108\" transform=\"matrix(0.8666 -0.4991 0.4991 0.8666 -3.2887 14.9671)\" fill=\"#FFFFFF\" width=\"1.533\" height=\"5.053\"/>\n          </g>\n          <g id=\"Numbers\">\n            <g>\n              <path fill=\"#FFFFFF\" d=\"M10.286,26.803c-0.151,0.262-0.308,0.645-0.224,0.841c0.096,0.22,0.468,0.397,0.715,0.581\n                c0.381,0.284,1.366,0.808,1.764,0.942c0.35,0.119,0.458-0.042,0.692-0.334c0.125-0.156,0.429-0.662,0.501-0.859\n                c0.122-0.333,0.234-0.532-0.028-0.765c-0.213-0.19-0.511-0.391-0.8-0.559l-0.691-0.399c-0.271-0.156-0.76-0.406-0.995-0.442\n                c-0.274-0.043-0.534,0.3-0.711,0.608L10.286,26.803L10.286,26.803z M9.908,26.612l0.258-0.446c0.234-0.406,0.61-0.892,0.951-0.873\n                c0.325,0.016,0.946,0.316,1.338,0.542l0.67,0.387c0.38,0.22,1.003,0.636,1.128,0.907c0.147,0.324-0.022,0.858-0.272,1.292\n                l-0.223,0.386c-0.267,0.463-0.709,0.953-1.113,0.876c-0.442-0.083-1.041-0.414-1.545-0.705c-0.5-0.289-1.05-0.6-1.383-0.96\n                c-0.188-0.203-0.198-0.371-0.134-0.642C9.635,27.159,9.771,26.849,9.908,26.612z\"/>\n              <path fill=\"#FFFFFF\" d=\"M10.225,32.408c0.597,0.345,0.81,0.249,1.152-0.343l0.236-0.409c0.376-0.653,0.269-0.88-0.38-1.254\n                l-0.337-0.195c-0.566-0.327-0.849-0.206-1.174,0.357L9.54,30.88c-0.104,0.18-0.184,0.396-0.211,0.558\n                c-0.013,0.071-0.015,0.18,0,0.25c0.014,0.066,0.111,0.19,0.096,0.216l-0.212,0.368l-1.922-1.11l1.47-2.546l0.368,0.213\n                l-1.223,2.118l1.112,0.67c-0.004-0.075-0.035-0.135-0.041-0.232c-0.005-0.08,0.006-0.16,0.023-0.248\n                c0.032-0.156,0.114-0.373,0.211-0.541l0.177-0.307c0.438-0.758,0.961-0.959,1.719-0.522l0.358,0.207\n                c0.892,0.515,1.039,0.989,0.522,1.883l-0.225,0.389c-0.413,0.716-0.846,1.106-1.57,0.688l-0.245-0.142l0.236-0.409L10.225,32.408z\n                \"/>\n            </g>\n            <g>\n              <path fill=\"#FFFFFF\" d=\"M10.244,75.51l3.283,0.43l-1.004-1.752L10.244,75.51L10.244,75.51z M12.892,73.975l1.219,2.112\n                l-0.513,0.295c-0.014,0.011-1.606-0.206-1.758-0.231c-0.178-0.026-1.729-0.219-1.752-0.258l-0.379-0.656l2.564-1.479l-0.332-0.572\n                l0.369-0.215l0.332,0.573l0.862-0.497l0.248,0.432L12.892,73.975z\"/>\n              <path fill=\"#FFFFFF\" d=\"M8.685,72.771c0.155,0.269,0.416,0.604,0.635,0.631c0.245,0.029,0.594-0.213,0.886-0.338\n                c0.449-0.192,1.423-0.801,1.748-1.086c0.285-0.252,0.197-0.438,0.056-0.791c-0.074-0.189-0.369-0.728-0.506-0.894\n                c-0.236-0.272-0.354-0.479-0.697-0.362c-0.279,0.09-0.61,0.254-0.909,0.426l-0.711,0.41c-0.279,0.162-0.754,0.469-0.907,0.653\n                c-0.18,0.228-0.007,0.638,0.176,0.948L8.685,72.771L8.685,72.771z M8.32,73.01l-0.265-0.459c-0.241-0.418-0.48-1.003-0.289-1.297\n                c0.183-0.281,0.769-0.682,1.172-0.914l0.69-0.398c0.392-0.227,1.084-0.563,1.389-0.537c0.366,0.033,0.754,0.466,1.012,0.908\n                l0.23,0.396c0.274,0.477,0.483,1.121,0.207,1.441c-0.302,0.351-0.904,0.716-1.423,1.016c-0.517,0.297-1.076,0.628-1.568,0.738\n                c-0.277,0.064-0.433-0.014-0.641-0.211C8.666,73.534,8.461,73.254,8.32,73.01z\"/>\n            </g>\n            <g>\n              <path fill=\"#FFFFFF\" d=\"M50.834,92.42c0-0.275-0.038-0.584-0.208-0.688c-0.127-0.078-0.563-0.111-0.786-0.111h-0.528\n                c-0.602,0-0.859,0.141-0.859,0.75v0.295c0,0.52,0.256,0.662,0.773,0.662h0.798v0.453h-0.503c-0.221,0-0.551,0.025-0.717,0.082\n                c-0.189,0.064-0.265,0.285-0.265,0.533v0.293c0,0.623,0.271,0.688,0.883,0.688h0.503c0.815,0,0.849-0.205,0.849-1.007h0.49v0.258\n                c0,0.386-0.089,0.797-0.308,0.958c-0.222,0.163-0.645,0.232-1.031,0.232h-0.528c-0.805,0-1.362-0.17-1.362-0.981v-0.354\n                c0-0.254,0.056-0.521,0.169-0.666c0.094-0.119,0.383-0.238,0.591-0.238c-0.025-0.021-0.292-0.07-0.354-0.092\n                c-0.091-0.024-0.211-0.09-0.281-0.146c-0.135-0.11-0.212-0.409-0.212-0.657V92.33c0-0.904,0.505-1.145,1.399-1.145h0.515\n                c0.458,0,0.919,0.063,1.187,0.265c0.254,0.188,0.299,0.7,0.299,1.147v0.107h-0.516V92.42H50.834z\"/>\n              <path fill=\"#FFFFFF\" d=\"M45.792,95.451c0.329,0,0.776-0.059,0.915-0.247c0.156-0.208,0.12-0.656,0.159-0.988\n                c0.061-0.513,0.018-1.728-0.072-2.177c-0.079-0.393-0.29-0.409-0.691-0.471c-0.215-0.031-0.858-0.043-1.083-0.004\n                c-0.381,0.063-0.631,0.063-0.707,0.438c-0.062,0.308-0.089,0.692-0.089,1.063v0.867c0,0.34,0.032,0.938,0.123,1.178\n                c0.108,0.283,0.575,0.34,0.961,0.34H45.792L45.792,95.451z M45.818,95.912h-0.562c-0.51,0-1.172-0.092-1.34-0.422\n                c-0.162-0.314-0.217-1.063-0.217-1.557V93.09c0-0.479,0.055-1.293,0.243-1.559c0.223-0.316,0.818-0.446,1.365-0.446h0.484\n                c0.583,0,1.284,0.147,1.432,0.571c0.162,0.464,0.177,1.203,0.177,1.841c0,0.629,0.006,1.315-0.151,1.827\n                c-0.089,0.283-0.242,0.389-0.532,0.479C46.482,95.872,46.115,95.912,45.818,95.912z\"/>\n            </g>\n            <g>\n              <path fill=\"#FFFFFF\" d=\"M70.25,88.059c-0.501-0.865-0.135-1.326,0.607-1.852c0.268-0.188,0.764-0.557,0.896-0.766\n                c0.158-0.248-0.135-0.742-0.334-1.086l-2.47,1.424l-0.223-0.385l2.932-1.693l0.429,0.738c0.539,0.937,0.313,1.146-0.426,1.77\n                c-0.304,0.255-0.612,0.452-0.886,0.713c-0.301,0.291-0.282,0.516-0.037,0.941l0.18,0.311c0.307,0.529,0.637,0.561,1.162,0.254\n                l0.396-0.229c0.521-0.303,0.834-0.567,0.521-1.098l-0.254-0.44l0.464-0.269l0.089,0.148c0.262,0.441,0.401,0.824,0.309,1.186\n                c-0.076,0.274-0.524,0.647-0.894,0.857l-0.418,0.241c-0.815,0.479-1.377,0.396-1.854-0.437L70.25,88.059z\"/>\n              <path fill=\"#FFFFFF\" d=\"M68.406,87.041c-0.365-0.635-0.612-0.659-1.243-0.296l-0.435,0.251c-0.694,0.398-0.715,0.667-0.316,1.355\n                l0.206,0.354c0.349,0.604,0.673,0.645,1.271,0.295l0.336-0.189c0.192-0.109,0.383-0.271,0.491-0.4\n                c0.052-0.061,0.11-0.158,0.134-0.229c0.022-0.068,0-0.236,0.026-0.25l0.39-0.228l1.18,2.042l-2.699,1.563l-0.229-0.392\n                l2.248-1.298L69.1,88.411c-0.037,0.069-0.043,0.146-0.086,0.233c-0.039,0.076-0.092,0.146-0.154,0.215\n                c-0.107,0.127-0.303,0.283-0.479,0.388l-0.325,0.188C67.246,89.9,66.657,89.805,66.191,89l-0.219-0.381\n                c-0.552-0.947-0.436-1.461,0.521-2.008l0.411-0.24c0.763-0.438,1.367-0.568,1.813,0.201l0.149,0.262l-0.435,0.251L68.406,87.041z\"\n                />\n            </g>\n            <g>\n              <path fill=\"#FFFFFF\" d=\"M86.13,73.605c0.17-0.293,0.347-0.719,0.251-0.939c-0.107-0.246-0.523-0.443-0.799-0.648\n                c-0.426-0.313-1.527-0.896-1.973-1.053c-0.396-0.133-0.514,0.047-0.771,0.373c-0.141,0.176-0.48,0.742-0.563,0.961\n                c-0.135,0.372-0.262,0.594,0.031,0.854c0.233,0.218,0.565,0.438,0.896,0.625l0.771,0.445c0.303,0.176,0.854,0.452,1.11,0.493\n                c0.308,0.05,0.599-0.336,0.796-0.68L86.13,73.605L86.13,73.605z M86.553,73.82l-0.287,0.496c-0.263,0.455-0.684,0.998-1.063,0.979\n                c-0.364-0.021-1.059-0.354-1.496-0.607l-0.749-0.432c-0.429-0.246-1.122-0.713-1.261-1.016c-0.168-0.361,0.021-0.959,0.304-1.444\n                l0.25-0.431c0.299-0.518,0.793-1.063,1.244-0.979c0.489,0.094,1.163,0.461,1.728,0.781c0.563,0.322,1.174,0.673,1.547,1.072\n                c0.209,0.229,0.225,0.412,0.147,0.718C86.857,73.209,86.704,73.555,86.553,73.82z\"/>\n              <path fill=\"#FFFFFF\" d=\"M86.008,71.186c-0.865-0.5-0.779-1.082-0.398-1.908c0.143-0.297,0.387-0.857,0.396-1.105\n                c0.016-0.292-0.484-0.568-0.832-0.771l-1.426,2.472l-0.391-0.224l1.69-2.938l0.739,0.43c0.938,0.539,0.85,0.84,0.518,1.741\n                c-0.137,0.371-0.305,0.698-0.408,1.063c-0.117,0.398,0.016,0.586,0.438,0.834l0.311,0.18c0.529,0.307,0.83,0.168,1.135-0.359\n                l0.229-0.396c0.305-0.521,0.438-0.905-0.093-1.218l-0.438-0.254l0.271-0.463l0.15,0.088c0.443,0.258,0.764,0.519,0.854,0.871\n                c0.074,0.279-0.128,0.828-0.337,1.192l-0.243,0.417c-0.475,0.82-0.993,1.029-1.815,0.553L86.008,71.186z\"/>\n            </g>\n            <g>\n              <path fill=\"#FFFFFF\" d=\"M87.395,29.772c-0.17-0.292-0.453-0.659-0.688-0.686c-0.268-0.031-0.646,0.231-0.962,0.367\n                c-0.486,0.21-1.544,0.872-1.896,1.181c-0.313,0.273-0.22,0.468-0.063,0.856c0.081,0.208,0.399,0.787,0.551,0.965\n                c0.255,0.303,0.386,0.524,0.756,0.401c0.306-0.101,0.664-0.276,0.988-0.463l0.771-0.445c0.303-0.175,0.817-0.51,0.982-0.716\n                c0.193-0.24,0.008-0.686-0.189-1.029L87.395,29.772L87.395,29.772z M87.79,29.514l0.288,0.499\n                c0.262,0.453,0.521,1.087,0.313,1.408c-0.197,0.306-0.834,0.739-1.271,0.992l-0.748,0.433c-0.429,0.246-1.181,0.615-1.513,0.584\n                c-0.396-0.038-0.815-0.5-1.098-0.986l-0.25-0.431c-0.301-0.518-0.523-1.218-0.228-1.567c0.325-0.38,0.979-0.776,1.545-1.102\n                c0.563-0.323,1.168-0.682,1.702-0.803c0.302-0.068,0.47,0.016,0.693,0.229C87.412,28.945,87.637,29.25,87.79,29.514z\"/>\n              <path fill=\"#FFFFFF\" d=\"M84.094,26.133c0.031-0.018,0.854,0.199,0.969,0.211c0.084,0.009,0.949,0.207,0.963,0.229l0.396,0.679\n                l-4.189,2.418l-0.274-0.475l3.815-2.203l-1.793-0.388C83.98,26.553,84.061,26.152,84.094,26.133z\"/>\n            </g>\n          </g>\n          <g>\n            \n              <rect x=\"72.476\" y=\"15.467\" transform=\"matrix(-0.8112 -0.5848 0.5848 -0.8112 121.8065 73.222)\" fill=\"#FFFFFF\" width=\"0.496\" height=\"2.961\"/>\n            <polygon fill=\"#FFFFFF\" points=\"76.746,18.478 77.119,18.805 75.137,21.005 74.766,20.678   \"/>\n            \n              <rect x=\"78.892\" y=\"21.579\" transform=\"matrix(-0.6707 -0.7417 0.7417 -0.6707 115.1152 97.2259)\" fill=\"#FFFFFF\" width=\"0.495\" height=\"2.962\"/>\n            \n              <rect x=\"81.753\" y=\"25.102\" transform=\"matrix(-0.5879 -0.8089 0.8089 -0.5879 108.7075 108.5429)\" fill=\"#FFFFFF\" width=\"0.495\" height=\"2.962\"/>\n          </g>\n          <g>\n            \n              <rect x=\"52.565\" y=\"7.706\" transform=\"matrix(-0.9946 -0.1036 0.1036 -0.9946 104.3891 23.7943)\" fill=\"#FFFFFF\" width=\"0.495\" height=\"2.961\"/>\n            <polygon fill=\"#FFFFFF\" points=\"57.064,8.503 57.551,8.601 56.934,11.497 56.449,11.399   \"/>\n            \n              <rect x=\"61.178\" y=\"9.794\" transform=\"matrix(-0.9514 -0.3079 0.3079 -0.9514 116.3951 40.9165)\" fill=\"#FFFFFF\" width=\"0.495\" height=\"2.961\"/>\n            \n              <rect x=\"65.424\" y=\"11.419\" transform=\"matrix(-0.914 -0.4057 0.4057 -0.914 120.4627 51.3327)\" fill=\"#FFFFFF\" width=\"0.495\" height=\"2.962\"/>\n          </g>\n        </g>\n      </svg>\n  </template>\n  <template id=\"pointers\" type=\"text/html\" style=\"display: none;\">\n    <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\">\n      <g id=\"hour\" transform=\"rotate({{hour}} 48 49)\">\n        <linearGradient id=\"SVGID_1_hour\" gradientUnits=\"userSpaceOnUse\" x1=\"46.001\" y1=\"41.8438\" x2=\"50.001\" y2=\"41.8438\">\n          <stop  offset=\"0\" style=\"stop-color:#FFFFFF\"/>\n          <stop  offset=\"0.3758\" style=\"stop-color:#000000\"/>\n          <stop  offset=\"1\" style=\"stop-color:#ECECEC\"/>\n        </linearGradient>\n        <path fill=\"url(#SVGID_1_hour)\" stroke=\"#9B9B9B\" stroke-width=\"0.5\" d=\"M50.001,50.688V33h-4v17.557\n          C47.334,50.592,48.668,50.634,50.001,50.688z\"/>\n        <linearGradient id=\"SVGID_2_\" gradientUnits=\"userSpaceOnUse\" x1=\"46.958\" y1=\"41.5737\" x2=\"48.958\" y2=\"41.5737\">\n          <stop  offset=\"0\" style=\"stop-color:#58595B\"/>\n          <stop  offset=\"0.4242\" style=\"stop-color:#FFFFFF\"/>\n          <stop  offset=\"0.6061\" style=\"stop-color:#F1F0F0\"/>\n          <stop  offset=\"1\" style=\"stop-color:#58595B\"/>\n        </linearGradient>\n        <path fill=\"url(#SVGID_2_hour)\" stroke=\"#000000\" stroke-width=\"0.25\" d=\"M48.958,50.647V32.996c0-0.274-0.446-0.496-1-0.496\n          c-0.552,0-1,0.222-1,0.496v17.581C47.625,50.599,48.292,50.621,48.958,50.647z\"/>\n        <g>\n          <path fill=\"#050505\" stroke=\"#9B9B9B\" stroke-width=\"0.5\" d=\"M48.173,26.512c0.293,0,0.552,0.036,0.826,0.06L48,21.403\n            l-1.001,5.193C47.372,26.55,47.755,26.512,48.173,26.512z\"/>\n          <linearGradient id=\"SVGID_3_hour\" gradientUnits=\"userSpaceOnUse\" x1=\"47.5161\" y1=\"23.9995\" x2=\"48.481\" y2=\"23.9995\">\n            <stop  offset=\"0\" style=\"stop-color:#58595B\"/>\n            <stop  offset=\"0.4242\" style=\"stop-color:#FFFFFF\"/>\n            <stop  offset=\"0.6061\" style=\"stop-color:#F1F0F0\"/>\n            <stop  offset=\"1\" style=\"stop-color:#58595B\"/>\n          </linearGradient>\n          <path fill=\"url(#SVGID_3_hour)\" d=\"M48.083,25.212c0.142,0,0.266,0.017,0.398,0.028L48,22.747l-0.484,2.505\n            C47.696,25.23,47.882,25.212,48.083,25.212z\"/>\n        </g>\n        <g>\n          <linearGradient id=\"SVGID_4_hour\" gradientUnits=\"userSpaceOnUse\" x1=\"43\" y1=\"31\" x2=\"53\" y2=\"31\">\n            <stop  offset=\"0\" style=\"stop-color:#58595B\"/>\n            <stop  offset=\"0.4242\" style=\"stop-color:#FFFFFF\"/>\n            <stop  offset=\"0.6061\" style=\"stop-color:#F1F0F0\"/>\n            <stop  offset=\"1\" style=\"stop-color:#58595B\"/>\n          </linearGradient>\n          <circle fill=\"url(#SVGID_4_hour)\" stroke=\"#9B9B9B\" stroke-width=\"0.5\" cx=\"48\" cy=\"31\" r=\"5\"/>\n          <linearGradient id=\"SVGID_5_hour\" gradientUnits=\"userSpaceOnUse\" x1=\"43.5\" y1=\"31\" x2=\"52.5\" y2=\"31\">\n            <stop  offset=\"0\" style=\"stop-color:#58595B\"/>\n            <stop  offset=\"0.4242\" style=\"stop-color:#FFFFFF\"/>\n            <stop  offset=\"0.6061\" style=\"stop-color:#F1F0F0\"/>\n            <stop  offset=\"1\" style=\"stop-color:#58595B\"/>\n          </linearGradient>\n          <circle fill=\"url(#SVGID_5_hour)\" stroke=\"#000000\" stroke-width=\"0.5\" cx=\"48\" cy=\"31\" r=\"4.5\"/>\n          <linearGradient id=\"SVGID_6_hour\" gradientUnits=\"userSpaceOnUse\" x1=\"48\" y1=\"33\" x2=\"48\" y2=\"33\">\n            <stop  offset=\"0\" style=\"stop-color:#58595B\"/>\n            <stop  offset=\"0.4242\" style=\"stop-color:#FFFFFF\"/>\n            <stop  offset=\"0.6061\" style=\"stop-color:#F1F0F0\"/>\n            <stop  offset=\"1\" style=\"stop-color:#58595B\"/>\n          </linearGradient>\n          <line fill=\"url(#SVGID_6_hour)\" stroke=\"#000000\" x1=\"48\" y1=\"30.502\" x2=\"48\" y2=\"35.498\"/>\n          <line fill=\"none\" stroke=\"#000000\" x1=\"44.367\" y1=\"27.701\" x2=\"47.9\" y2=\"31.234\"/>\n          <line fill=\"none\" stroke=\"#000000\" x1=\"51.667\" y1=\"27.701\" x2=\"48.133\" y2=\"31.234\"/>\n        </g>\n      </g>\n      <g id=\"minute\" transform=\"rotate({{minute}} 48 49)\">\n        <linearGradient id=\"SVGID_1_min\" gradientUnits=\"userSpaceOnUse\" x1=\"46.001\" y1=\"35.415\" x2=\"50.001\" y2=\"35.415\">\n          <stop  offset=\"0\" style=\"stop-color:#FFFFFF\"/>\n          <stop  offset=\"0.3879\" style=\"stop-color:#58595B\"/>\n          <stop  offset=\"1\" style=\"stop-color:#E8E8E8\"/>\n        </linearGradient>\n        <path fill=\"url(#SVGID_1_min)\" stroke=\"#9B9B9B\" stroke-width=\"0.5\" d=\"M50.001,51.121V19.709h-4v31.409\n          C47.339,51.116,48.669,51.119,50.001,51.121z\"/>\n        <linearGradient id=\"SVGID_2_\" gradientUnits=\"userSpaceOnUse\" x1=\"45.999\" y1=\"14\" x2=\"49.999\" y2=\"14\">\n          <stop  offset=\"0\" style=\"stop-color:#58595B\"/>\n          <stop  offset=\"0.4242\" style=\"stop-color:#FFFFFF\"/>\n          <stop  offset=\"0.6061\" style=\"stop-color:#F1F0F0\"/>\n          <stop  offset=\"1\" style=\"stop-color:#58595B\"/>\n        </linearGradient>\n        <polygon fill=\"url(#SVGID_2_min)\" stroke=\"#9B9B9B\" stroke-width=\"0.5\" points=\"48,19.358 45.999,19.358 47,13.998 48,8.642 49,13.998 \n          49.999,19.358 \"/>\n        <linearGradient id=\"SVGID_3_min\" gradientUnits=\"userSpaceOnUse\" x1=\"46.957\" y1=\"34\" x2=\"48.957\" y2=\"34\">\n          <stop  offset=\"0\" style=\"stop-color:#58595B\"/>\n          <stop  offset=\"0.4242\" style=\"stop-color:#FFFFFF\"/>\n          <stop  offset=\"0.6061\" style=\"stop-color:#F1F0F0\"/>\n          <stop  offset=\"1\" style=\"stop-color:#58595B\"/>\n        </linearGradient>\n        <path fill=\"url(#SVGID_3_min)\" stroke=\"#000000\" stroke-width=\"0.25\" d=\"M48.957,47.269c0,0.404-0.445,0.731-0.999,0.731l0,0\n          c-0.552,0-1.001-0.327-1.001-0.731V20.731c0-0.403,0.448-0.731,1.001-0.731l0,0c0.554,0,0.999,0.327,0.999,0.731V47.269z\"/>\n        <linearGradient id=\"SVGID_4_min\" gradientUnits=\"userSpaceOnUse\" x1=\"1699.6982\" y1=\"4247.8047\" x2=\"1706.6982\" y2=\"4247.8047\" gradientTransform=\"matrix(1 0 0 1 -1655.1982 -4198.8047)\">\n          <stop  offset=\"0\" style=\"stop-color:#58595B\"/>\n          <stop  offset=\"0.4242\" style=\"stop-color:#FFFFFF\"/>\n          <stop  offset=\"0.6061\" style=\"stop-color:#F1F0F0\"/>\n          <stop  offset=\"1\" style=\"stop-color:#58595B\"/>\n        </linearGradient>\n        <circle fill=\"url(#SVGID_4_min)\" stroke=\"#9B9B9B\" stroke-width=\"0.25\" cx=\"48\" cy=\"49\" r=\"3.5\"/>\n        <radialGradient id=\"SVGID_5_\" cx=\"48\" cy=\"49\" r=\"2\" gradientUnits=\"userSpaceOnUse\">\n          <stop  offset=\"0\" style=\"stop-color:#FFFFFF\"/>\n          <stop  offset=\"1\" style=\"stop-color:#58595B\"/>\n        </radialGradient>\n        <circle fill=\"url(#SVGID_5_min)\" stroke=\"#000000\" stroke-width=\"0.25\" cx=\"48\" cy=\"49\" r=\"2\"/>\n      </g>\n    </svg>\n    </template>\n  <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"500px\" height=\"560px\" viewBox=\"0 0 500 560\" enable-background=\"new 0 0 500 500\" xml:space=\"preserve\">\n  </svg>\n</body>\n<script type=\"text/javascript\">\n  window.onload = function () {\n    var value = {\n      hour2angle: function (d) {\n        var scale = d3.scale.linear()\n                      .domain([0,719])\n                      .range([0,359]);\n        return scale(d);\n      },\n      minute2angle: function (d) {\n        var scale = d3.scale.linear()\n                      .domain([0,60])\n                      .range([1,359]);\n        return scale(d);\n      }\n    };\n\n    var layer1 = d3.select(\"#Layer_1\"),\n        clock1 = layer1.append(\"g\")\n                       .attr(\"transform\",\"scale(2)\"),\n        pointer1 = layer1.append(\"g\")\n                         .attr(\"transform\",\"scale(2)\");\n\n        d3.timer(function () {\n          refreshTime(-3);\n          return false;\n        },500);\n\n    clock1.callTemplate(Mustache.render, \"#clock\");\n    pointer1.callTemplate(Mustache.render, \"#pointers\", function () {\n      return {hour: 0, minute: 0};\n    });\n\n    var pointerHour = pointer1.select(\"#hour\"),\n        pointerMinute = pointer1.select(\"#minute\"),\n        interpolateTime = function () {\n          return;\n        },\n        refreshTime = function (ts) {\n          ts = ts || 0;\n\n          pointerMinute.datum(function(){\n              var date = new Date();\n              return {hour: date.getUTCHours(), minute: date.getUTCMinutes()};\n          });\n\n          pointerHour.datum(function(){\n              return pointerMinute.datum();\n          });\n\n          pointerHour.attr(\"transform\", function (d) {\n            return \"rotate(\" + value.hour2angle((d.hour + ts) * 60 + d.minute) + \" 48 49)\"\n          });\n\n          pointerMinute.attr(\"transform\", function (d) {\n            return \"rotate(\" + value.minute2angle(d.minute) + \" 48 49)\"\n          });\n\n        };\n        \n  };\n\n</script>\n</html>","filenames":["LICENSE","README.md","d3.selection.template.min.js","index.html","thumbnail.png"],"thumb":"1aaa1e4507519e8b0e831c188fa2560d00068e77"}},{"_index":"blockbuilder","_type":"blocks","_id":"fa14dff4959ccb0886a9","_score":0.34151298,"_source":{"userId":"Rico3734","description":"D3 ruler","created_at":"2016-02-18T17:06:35Z","updated_at":"2016-02-18T17:06:36Z","api":["d3.scale.identity","d3.svg.axis","d3.select"],"colors":["#000000"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/Rico3734/'>Rico3734</a>'s block: <a href='http://bl.ocks.org/Rico3734/3a387f8041e1dc31d718'>D3 ruler</a>","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\n.axis text {\n  font: 10px sans-serif;\n}\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n</style>\n<body>\n<script src=\"//d3js.org/d3.v3.min.js\"></script>\n<script>\n    \nvar seq = \"CCTGGGTGGGGGACCCGCTGCGGGAGCGCCGAGCTCCCTCTGAGTTCTTACTTCGAAGGCTGTGCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCTGGGTGGGGGACCCGCTGCGGGAGCGCCGAGCTCCCTCTGAGTTCTTACTTCGAAGGCTGTGCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\";\n\nvar seqlength = seq.length;\nconsole.log(seqlength);\n\n\nvar margin = {top: 100, right: 100, bottom: 100, left: 100},\n    width = 860 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\nvar x = d3.scale.identity()\n    .domain([0, seqlength]);\n\nvar xAxis = d3.svg.axis()\n    .scale(x)\n    .ticks(seqlength%100)\n    .orient(\"bottom\");\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nsvg.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .call(xAxis);\n\nvar myString=\"gene.txt\"  \nvar length=\"myString.length\"  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</script>","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"6daa5503fc60d4a89a11","_score":0.34132618,"_source":{"userId":"zanarmstrong","description":"D3 Bingo!","created_at":"2015-11-19T18:13:11Z","updated_at":"2015-11-20T20:48:10Z","api":["d3.select"],"colors":["#faebc4","#3e3a30","#625d51","#ffffff","#d2b48c"],"readme":"D3 Bingo is meant to be a fun challenge to inspire you to explore parts of D3 (and engaging with the D3 community) that you might not have done yet... and to celebrate what you have done so far!\n\nTo play D3 Bingo, fork [this gist on blockbuilder](http://blockbuilder.org/zanarmstrong/6daa5503fc60d4a89a11).\n\nIn the data.js file, add a URL for any projects that you have that fulfil a challenge. Then save. Your bingo card on bl.ocks will now show your completed squares. If you click on a square, it will open the URL for that project. \n\nYou can see my completed bingo card [here](http://bl.ocks.org/zanarmstrong/raw/b66a37afe6581eb5bc0c/) as an example.","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <link href='https://fonts.googleapis.com/css?family=Smythe' rel='stylesheet' type='text/css'>\n  <link href='https://fonts.googleapis.com/css?family=Rammetto+One' rel='stylesheet' type='text/css'>\n  <link rel=\"stylesheet\" href=\"bingo.css\">\n</head>\n\n<body>\n\t<div class=\"viz\">\n\t\t<div class=\"header-container\"><hr class=\"top\"></div>\n\t\t<div class=\"title\"><span>B</span><span>I</span><span>N</span><span>G</span><span>O</span></div>\n\t</div>\n  \t<script src=\"data.js\"></script>\n  \t<script src=\"bingo.js\"></script>\n</body>\n","filenames":["README.md","bingo.css","bingo.js","data.js","index.html","thumbnail.png"],"thumb":"111e529f70b9a338d7c4f7bad0d71af68d5f22c2"}},{"_index":"blockbuilder","_type":"blocks","_id":"7027894","_score":0.3406334,"_source":{"userId":"kynnjo","description":"noob d3","created_at":"2013-10-17T16:22:23Z","updated_at":"2015-12-25T19:29:10Z","api":["d3.tsv","d3.select","d3.set","d3.keys","d3.max","d3.zip","d3.transpose","d3.extent","d3.merge","d3.hsl","d3.map","d3.range","d3.scale.linear","d3.format","d3.svg.line"],"colors":["#ffffff","#eeeeee"],"readme":"This is just an exercise to implement grouping of curves according to the values of one of several possible \"factors\".  In this example the factors are chosen only because they correspond to well-known *n*-somes, for *n*&nbsp;&isin;&nbsp;{2, 3, 4, 5}.\n\nI've refactored this code many times, trying to make the code readable, but I think I've failed miserably in this regard, especially with the d3.js stuff.  I think I just don't *get* d3.js...  **Comments welcome!**","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>noob d3</title>\n<style>\nbutton{display:inline}\n#grid{background:#fff;border-collapse:collapse;}\n#grid td{border-style:solid;border-color:#eee;}\n#grid svg{display:block;}\n#grid path{fill:none;}\n#caption{margin-bottom: 5px;}\n</style>\n\n    <div id=\"caption\" style=\"visibility: hidden\">\n      <button>Cycle</button>\n      Curves grouped by the value of the \"<span id=\"mode-label\"></span>\" factor;\n      (source: \"<span id=\"input-file\">loremipsum.tsv</span>\")\n    </div>\n\n    <table id=\"grid\"></table>\n\n    <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n    <script src=\"//d3js.org/d3.v3.min.js\"></script>\n\n    <script>\n\nd3.tsv(d3.select('#input-file').node().textContent, function(error, data) {\n\n  var XRANGE = [0, 2*Math.PI],\n      PLOT_RANGE_PADDING = 0.02;\n\n  var params = 'phi A omega'.split(' '),\n      pgetters = params.map(get),\n      params_set = d3.set(params),\n      factors = d3.keys(data[0]).filter(function (d) {\n                  return !params_set.has(d)\n                }),\n      fgetters = factors.map(get),\n      grid = build_grid(d3.max(factors.map(function (f) {\n               return levels(data, f).length;\n             }))),\n      get_class = mk_get_class(),\n      get_xy = mk_get_xy();\n\n  var paths = grid.select('g')\n      .selectAll('path')\n      .data(data)\n      .enter()\n    .append('svg:path')\n      .each(function (d) {\n         var classes = d3.zip(factors, fgetters.map(apply(d)))\n                         .map(function (args) {\n                            return get_class.apply(null, args);\n                          })\n                         .join(' ');\n         d3.select(this).classed(classes, true);\n       })\n      .datum(function (d) {\n         return get_xy(mk_fn.apply(null, pgetters.map(apply(d))), XRANGE);\n       });\n\n  var domains = d3.transpose(paths.data().map(d3.transpose))\n                  .map(function (a) {\n                     return pad_interval(d3.extent(d3.merge(a)),\n                                         PLOT_RANGE_PADDING);\n                   }),\n      svg = grid.select('svg'),\n      text_height = svg.select('text').node().getBBox().height,\n      ranges = [[0, parseInt(svg.attr('width'))],\n                [parseInt(svg.attr('height')), text_height]],\n      line = linedrawer(domains, ranges);\n      \n  paths.attr('d', function(d){ return line(d) });\n\n  var argmax =  factors\n               .map(function (f) {\n                 return [f, levels(data, f)];\n                })\n               .sort(function (a, b) {\n                 return b[1].length - a[1].length;\n                })[0],\n      maxfactor = argmax[0],\n      classes = argmax[1].map(function (lvl) {\n                  return get_class(maxfactor, lvl);\n                }),\n      mult = 360/classes.length,\n      start = 2/3,\n      step = Math.sqrt(5) - 2;\n\n  classes.map(function (c, i) {\n    grid.selectAll('.' + c)\n        .each(function (_, j) {\n           var hsl = d3.hsl(mult*(i + ((start + j * step) % 1)), 0.6, 0.6);\n           d3.select(this).style('stroke', hsl);\n        })\n  });\n\n  // instrument button\n\n  var nfactors = factors.length,\n      pick = -1;\n\n  $('button').click(function() {\n    var factor = factors[pick = (pick + 1) % nfactors],\n        lvls = levels(data, factor),\n        nlevels = lvls.length,\n        sels = lvls.map(function (lvl) { return '.' + get_class(factor, lvl) });\n\n    grid.selectAll('g')\n        .each(function (_, i) {\n           var g = this, label = '';\n           if (i < nlevels) {\n             label = factor + ': \"' + lvls[i] + '\"';\n             grid.selectAll(sels[i])\n                 .each(function(){ g.appendChild(this) });\n           }\n           d3.select(g).select('text').text(label);\n         });\n\n    $('#mode-label').text(factor);\n\n  }).click();\n\n  $(\"#caption\").css('visibility', 'visible');\n});\n\n\nfunction get (key) {\n  return function (d) { return d[key]; }\n}\n\nfunction proj (aoo, key) {\n  return aoo.map(get(key));\n}\n\nfunction levels (data, factor) {\n  return d3.set(proj(data, factor)).values();\n}\n\nfunction build_grid (nvps) {\n  var WIDTH = 950,\n      SHAPE = {width: 250, height: 150},\n      BORDER_WIDTH = 10,\n      PADDING = 20;\n\n  var row,\n      table = d3.select('#grid'),\n      i = 0,\n      available_width = WIDTH - BORDER_WIDTH,\n      width_per_cell = SHAPE.width + 2 * PADDING + BORDER_WIDTH,\n      ncols = Math.floor(available_width/width_per_cell),\n      label,\n      box;\n\n  while (i < nvps) {\n    if (i % ncols == 0) { row = table.append('tr') }\n    label = row.append('td')\n       .style({'border-width': BORDER_WIDTH + 'px',\n               padding: PADDING + 'px'})\n     .append('svg')\n       .attr(SHAPE)\n     .append('g')\n     .append('text').text('placeholder');\n    box = label.node().getBBox();\n    label.attr({x: 0, y: box.height - 5});\n    i += 1;\n  }\n\n  return table;\n}\n\nfunction mk_get_class () {\n  var memo = d3.map(),\n      sep = String.fromCharCode(29),\n      prefix = '_',\n      next = -1;\n  return function (factor, level) {\n    var key = factor + sep + level;\n    return   memo.has(key)\n           ? memo.get(key)\n           : memo.set(key, prefix + (next += 1));\n  }\n}\n\nfunction apply (d) {\n  return function (g) { return g(d); };\n}\n\nfunction mk_fn(phi, A, omega) {\n  return function (x) { return A * Math.sin(omega * (x - phi)); }\n}\n\nfunction mk_get_xy() {\n  var NPTS = 200,\n      mesh = d3.range(NPTS),\n      scale = d3.scale\n                .linear()\n                .domain([0, NPTS - 1]);\n\n  return function (fn, xrange) {\n    var xs = mesh.map(scale.range(xrange));\n    return d3.zip(xs, xs.map(fn));\n  }\n}\n\nfunction pad_interval(interval, padding) {\n  return [interpolate(interval, -padding),\n          interpolate(interval, 1 + padding)];\n}\n\nfunction interpolate(interval, t) {\n  return interval[0] * (1 - t) + interval[1] * t;\n}\n\nfunction linedrawer(srcs, tgts) {\n  var xyfns = [0, 1].map(function (i) {\n    var s = d3.scale.linear().domain(srcs[i]).range(tgts[i]),\n        fmt = d3.format('.1f');\n    return function (d) { return fmt(s(d[i])); }\n  });\n  return d3.svg.line().x(xyfns[0]).y(xyfns[1]);\n}\n\n    </script>\n","filenames":["README.md","index.html","loremipsum.tsv"]}},{"_index":"blockbuilder","_type":"blocks","_id":"bb09af4c39c79cffcde4","_score":0.33953074,"_source":{"userId":"mbostock","description":"D3 Bundler","created_at":"2015-05-29T17:28:47Z","updated_at":"2016-02-09T01:51:06Z","api":["d3.select"],"colors":["#ff0000"],"readme":"This is a demonstration of D3 4.0’s forthcoming adoption of ES6 modules, which will allow you to build a highly-optimized custom build using [d3-bundler](https://github.com/d3/d3-bundler). This example only exposes three fields on the `d3` object: d3.event, d3.select and d3.selectAll.\n\nThis minified and gzipped build of D3 is only 3,610 bytes, a savings of 93% over the default build!\n\nTo build:\n\n```\nnpm install\nnpm run build\n```\n\nYou may also run d3-bundler directly:\n\n```\nd3-bundler -- d3.js | uglifyjs -c -m -o d3.min.js\n```\n\nNote: this depends on a [pending bug fix](https://github.com/rollup/rollup/pull/9) to Rollup.\n","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<body>\n<script src=\"d3.min.js\"></script>\n<script>\n\nd3.select(\"body\").append(\"h1\").text(\"Hello, world!\");\n\n</script>\n","filenames":[".block",".gitignore","README.md","d3.js","d3.min.js","index.html","package.json"]}},{"_index":"blockbuilder","_type":"blocks","_id":"bb447868dab07ebf9717","_score":0.3392385,"_source":{"userId":"eesur","description":"d3 | slider","created_at":"2015-05-29T09:33:31Z","updated_at":"2015-08-29T14:22:07Z","api":["d3.range","d3.select"],"colors":["#130c0e","#7ac143","#fdbb30","#ffffff"],"readme":"# Simple slider using D3\n\nNeeded a simple solution to move a legend back and forth. This example shows the logic and uses javascripts [offsetLeft](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft) to move the item (li in this case)","code":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>d3 | slider</title> \n  <meta name=\"author\" content=\"Sundar Singh | eesur.com\">\n  \n  <link rel=\"stylesheet\" href=\"main.css\">\n  <script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script> \n\n  <style>\n\n  </style>\n</head>\n<body>\n\n<header>\n  <button id=\"legendPrev\">Prev</button> \n  <button id=\"legendNext\">Next</button>\n</header>\n<section id=\"container\"></section>\n\n<script src=\"d3_code_slider.js\" charset=\"utf-8\"></script>\n\n</body>\n</html>\n","filenames":["README.md","d3_code_slider.js","index.html","main.css","thumbnail.png"],"thumb":"bdc446bb69f2f3c5b2ab8eca4dc80321eaf6b48e"}},{"_index":"blockbuilder","_type":"blocks","_id":"424d88139e12d754233733dc78d11ae1","_score":0.3392385,"_source":{"userId":"mnorelli","description":"D3 playing","created_at":"2016-04-13T00:25:04Z","updated_at":"2016-04-13T00:25:04Z","api":["d3.geo.mercator","d3.select","d3.geo.path","d3.json","d3.scale.ordinal","d3.svg.legend","d3.format"],"colors":["#1b9e77","#d95f02","#7570b3","#ffd700","#daa520","#cd853f","#ffffff","#d3d3d3","#ff0000","#ffff00","#00ffff","#7fffd4","#0000ff","#800080"],"readme":"\n\nforked from <a href='http://bl.ocks.org/micahstubbs/'>micahstubbs</a>'s block: <a href='http://bl.ocks.org/micahstubbs/0678910da3463242d7ef'>transpacific partnership talks</a>\n\nforked from <a href='http://bl.ocks.org/mnorelli/'>mnorelli</a>'s block: <a href='http://bl.ocks.org/mnorelli/1d90cac98c9cbf5e27950496bdbb395a'>D3 playing</a>","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\n\npath {\n  stroke: white;\n  stroke-width: 0.25px;\n  fill: lightgrey;\n\n}\n\n/* colors from http://colorbrewer2.org/ */\n\n /* Currently in Negotiations */\n.country.id840 { fill: #1b9e77; }  /* United States */\n.country.id96 { fill: #1b9e77; } /* Brunei */  \n.country.id152 { fill: #1b9e77; } /* Chile */ \n.country.id554 { fill: #1b9e77; } /* New Zealand */ \n.country.id702 { fill: #1b9e77; } /* Singapore */ \n.country.id36 { fill: #1b9e77; } /* Australia */\n.country.id604 { fill: #1b9e77; } /* Peru */\n.country.id704 { fill: #1b9e77; } /* Vietnam */\n.country.id458 { fill: #1b9e77; } /* Malaysia */\n.country.id484 { fill: #1b9e77; } /* Mexico */\n.country.id124 { fill: goldenrod; } /* Canada */\n.country.id392 { fill: #1b9e77; } /* Japan */\n\n/* Announced Interest */\n.country.id158 { fill: #d95f02; } /* Republic of China */ \n.country.id410 { fill: #d95f02; } /* Republic of Korea */ \n.country.id188 { fill: #d95f02; } /* Costa Rica */\n.country.id170 { fill: #d95f02; } /* Colombia */\n.country.id764 { fill: #d95f02; } /* Thailand */\n.country.id418 { fill: #d95f02; } /* Laos */\n.country.id360 { fill: #d95f02; } /* Indonesia */\n.country.id608 { fill: #d95f02; } /* The Phillipines */\n\n/* Potential Future Members */\n.country.id356 { fill: #7570b3; } /* India */\n.country.id156 { fill: #7570b3; } /* China */\n.country.id50 { fill: #7570b3; } /* Bangladesh */\n.country.id116 { fill: #7570b3; } /* Cambodia */\n\n</style>\n<body>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"http://d3js.org/topojson.v0.min.js\"></script>\n<script src=\"http://d3js.org/colorbrewer.v1.min.js\"></script>\n<script src=\"legend.js\"></script>\n<script>\nvar width = 720,\n    height = 530;\n\nvar projection = d3.geo.mercator()\n    .center([-24, 30 ])\n    .scale(150)\n    .rotate([-180,0])\n    .translate([250,250]);\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"id\", \"trans-pacific partnership map\");\n\nvar path = d3.geo.path()\n    .projection(projection);\n\nvar g = svg.append(\"g\")\n\n// load and display the World\nd3.json(\"world-110m2.json\", function(error, topology) {\n    g.selectAll(\"path\")\n      .data(topojson.object(topology, topology.objects.countries)\n          .geometries)\n    .enter()\n      .append(\"path\")\n      .attr(\"class\", function(d) { return \"country id\" + d.id; }) \n      .attr(\"d\", path)\n\n});\n\n// draw the legend\ncategoricalData = [\"Currently in negotiations\",\"Announced interest in joining\", \"Potential future members\"]\n\ncategoricalColors = [\"#1b9e77\", \"#d95f02\", \"#7570b3\"]\n\nordinalScale = d3.scale.ordinal()\n  .domain(categoricalData)\n  .range(categoricalColors)\n\nverticalLegend = d3.svg.legend()\n  .labelFormat(\"none\")\n  .cellPadding(5)\n  .orientation(\"vertical\")\n  .units(\"\")\n  .cellWidth(25).cellHeight(18)\n  .inputScale(ordinalScale)\n  .cellStepping(10);\n\nd3.select(\"svg\").append(\"g\")\n  .attr(\"transform\", \"translate(350,360)\")\n  .attr(\"class\", \"legend\")\n  //.call(verticalLegend);\n\n</script>\n</body>\n</html>","filenames":[".block","README.md","index.html","legend.js","world-110m2.json"]}},{"_index":"blockbuilder","_type":"blocks","_id":"292ef433e312ac69ef14","_score":0.33569956,"_source":{"userId":"WilliamQLiu","description":"D3 Colors","created_at":"2014-11-18T21:30:59Z","updated_at":"2015-08-29T14:09:53Z","api":["d3.rgb","d3.hsl","d3.hcl","d3.lab","d3.select","d3.scale.category10","d3.scale.category20","d3.scale.category20b","d3.scale.category20c","d3.range"],"colors":["#ffffff","#0c43c7","#ff0000","#008000","#4682b4","#0000ff","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf","#aec7e8","#ffbb78","#98df8a","#ff9896","#c5b0d5","#c49c94","#f7b6d2","#c7c7c7","#dbdb8d","#9edae5","#393b79","#5254a3","#6b6ecf","#9c9ede","#637939","#8ca252","#b5cf6b","#cedb9c","#8c6d31","#bd9e39","#e7ba52","#e7cb94","#843c39","#ad494a","#d6616b","#e7969c","#7b4173","#a55194","#ce6dbd","#de9ed6","#3182bd","#6baed6","#9ecae1","#c6dbef","#e6550d","#fd8d3c","#fdae6b","#fdd0a2","#31a354","#74c476","#a1d99b","#c7e9c0","#756bb1","#9e9ac8","#bcbddc","#dadaeb","#636363","#969696","#bdbdbd","#d9d9d9"],"readme":"","code":"<!DOCTYPE html>\n<!-- D3 has a lot of neat ways to manipulate color\n     https://github.com/mbostock/d3/wiki/Colors -->\n<html>\n  <head>\n    <!-- Load D3 from site -->\n    <script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n\n    <!-- CSS (Styling) -->\n    <style type=\"text/css\">\n    </style>\n  </head>\n\n  <body>\n    <!-- Begin Javascript -->\n    <script type=\"text/javascript\">\n\n      //////////  COLORS  //////////\n      // Create a color value\n      mycolor = d3.rgb(\"#ffffff\");  // Pass in Hex\n\n      mycolor = d3.rgb(12, 67, 199);  // Red, Green, Blue\n      mycolor = d3.hsl(0, 100, 50);  //  Hue-Saturation-Lightness  (e.g. red)\n      mycolor = d3.hcl(-97, 32, 52);  // steelblue\n      mycolor = d3.lab(52, -4, -32);  // Lab color space (l, a, b); steelblue\n\n      d3.select(\"body\").style(\"background-color\", mycolor)  // set background color\n\n      // Make brighter and darker - Can be used for hovers\n      darkercolor = mycolor.darker(0.1);\n      lightercolor = mycolor.brighter(0.1);\n\n      //////////  DISPLAY COLORS  //////////\n      var svg = d3.select(\"body\").append(\"svg\")\n          .attr({\n              width: window.innerWidth,\n              height: window.innerHeight\n          });\n\n      //var color = d3.scale.category10();  // d3 has built-in Colors\n      //var color = d3.scale.category20();  // d3 has built-in Colors - Color Set 1\n      //var color = d3.scale.category20b();  // d3 has built-in Colors - Color Set 2\n      var color = d3.scale.category20c();  // d3 has built-in Colors - Color Set 3\n      var dataset = d3.range(20);\n      var barWidth = window.innerWidth / dataset.length;\n\n      // Print out colors\n      svg.selectAll(\"rect\")\n          .data(dataset)\n          .enter()\n          .append(\"rect\")\n          .attr({\n              width: barWidth,\n              height: window.innerHeight,\n              y: 0,\n              x: function (d, i) {\n                  return barWidth * i;\n              },\n              fill: color\n          });\n    </script>\n  </body>\n</html>","filenames":["index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"d162128e10630de5b07a","_score":0.33562952,"_source":{"userId":"juliettepardue","description":"D3 Tutorial","created_at":"2016-01-19T19:46:01Z","updated_at":"2016-01-19T19:48:52Z","api":["d3.select","d3.quantile","d3.variance.apply","d3.min","d3.zip.apply","d3.event.preventDefault","d3.ns.qualify","d3.requote","d3.map","d3.rebind","d3.interpolateZoom","d3.mouse","d3.touches","d3.selectAll","d3.rgb","d3.dispatch","d3.dsv","d3.round","d3.formatPrefix","d3.locale","d3.geo.stream","d3.merge","d3.geo.conicEqualArea","d3.geo.albers","d3.geo.albersUsa","d3.range","d3.geo.distance","d3.geom.voronoi","d3.hcl","d3.hsl","d3.lab","d3.transform","d3.geom.quadtree","d3.behavior.drag","d3.layout.hierarchy","d3.sum","d3.permute","d3.bisect","d3.max","d3.random.normal.apply","d3.random.irwinHall","d3.range.apply","d3.format","d3.scale.linear","d3.scale.pow","d3.scale.ordinal","d3.svg.diagonal","d3.selection","d3.ease.apply","d3.transition"],"colors":["#000000","#ffc0cb","#ffb6c1","#ff69b4","#ff1493","#db7093","#c71585","#ffa07a","#fa8072","#e9967a","#f08080","#cd5c5c","#dc143c","#b22222","#8b0000","#ff0000","#ff4500","#ff6347","#ff7f50","#ff8c00","#ffa500","#ffff00","#ffffe0","#fffacd","#fafad2","#ffefd5","#ffe4b5","#ffdab9","#eee8aa","#f0e68c","#bdb76b","#ffd700","#fff8dc","#ffebcd","#ffe4c4","#ffdead","#f5deb3","#deb887","#d2b48c","#bc8f8f","#f4a460","#daa520","#b8860b","#cd853f","#d2691e","#8b4513","#a0522d","#a52a2a","#800000","#556b2f","#808000","#6b8e23","#9acd32","#32cd32","#00ff00","#7cfc00","#7fff00","#adff2f","#00ff7f","#00fa9a","#90ee90","#98fb98","#8fbc8f","#3cb371","#2e8b57","#228b22","#008000","#006400","#66cdaa","#00ffff","#e0ffff","#afeeee","#7fffd4","#40e0d0","#48d1cc","#00ced1","#20b2aa","#5f9ea0","#008b8b","#008080","#b0c4de","#b0e0e6","#add8e6","#87ceeb","#87cefa","#00bfff","#1e90ff","#6495ed","#4682b4","#4169e1","#0000ff","#0000cd","#00008b","#000080","#191970","#e6e6fa","#d8bfd8","#dda0dd","#ee82ee","#da70d6","#ff00ff","#ba55d3","#9370db","#8a2be2","#9400d3","#9932cc","#8b008b","#800080","#4b0082","#483d8b","#663399","#6a5acd","#7b68ee","#ffffff","#fffafa","#f0fff0","#f5fffa","#f0ffff","#f0f8ff","#f8f8ff","#f5f5f5","#fff5ee","#f5f5dc","#fdf5e6","#fffaf0","#fffff0","#faebd7","#faf0e6","#fff0f5","#ffe4e1","#dcdcdc","#d3d3d3","#c0c0c0","#a9a9a9","#808080","#696969","#778899","#708090","#2f4f4f"],"readme":"","code":"<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>D3 Test</title>\n        <script type=\"text/javascript\" src=\"d3.v3.js\"></script>\n    </head>\n    <body>\n        <script type=\"text/javascript\">\n            d3.select(\"body\").append(\"p\").text(\"New paragraph!\");\n        </script>\n    </body>\n</html> ","filenames":["d3.v3.js","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"34dde25598bff6b6f76c","_score":0.3355386,"_source":{"userId":"1wheel","description":"d3.conventions ","created_at":"2015-03-13T02:34:35Z","updated_at":"2015-08-29T14:17:02Z","api":["d3.ns.qualify","d3.select","d3.scale.category10","d3.scale.linear","d3.scale.sqrt","d3.svg.line","d3.svg.axis","d3.keys","d3.selectAll","d3.tsv","d3.conventions","d3.extent"],"colors":["#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf","#000000","#808080"],"readme":"Succinct graphing with [d3-jetpack](https://github.com/gka/d3-jetpack). \n\nCompare to the [original](http://bl.ocks.org/mbostock/3887118). ","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\n.axis line,\n.axis path {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n\ndiv.tooltip {\n  top: -1000px;\n  position: absolute;\n  padding: 15px;\n  background: rgba(255, 255, 255, .90);\n  border: 1px solid lightgray;\n  pointer-events: none;\n}\n.tooltip-hidden{\n  opacity: 0;\n}\n\n</style>\n\n<body>\n  <div id='graph'></div>\n  <div class='tooltip'></div>\n</body>\n\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src='d3-jetpack.js'></script>\n\n<script>\n\nd3.tsv('data.tsv', function(data){\n  c = d3.conventions({parentSel: d3.select('#graph')})\n\n  c.x.domain(d3.extent(data, ƒ('sepalWidth')) ).nice()\n  c.y.domain(d3.extent(data, ƒ('sepalLength'))).nice()\n  c.drawAxis()\n\n  c.svg.appendData('circle', data)\n      .attr('cx', ƒ(c.x,'sepalWidth'))\n      .attr('cy', ƒ(c.y, 'sepalLength'))\n      .attr('fill', ƒ(c.color, 'species'))\n      .attr({r: 5, stroke: '#000'})\n      .call(d3.attachTooltip)\n\n  var legend = c.svg.appendData('g.legend', c.color.domain())\n      .translate(function(d, i){ return [0, i*20] })\n\n  legend.append('rect')\n      .attr({x: c.width - 18, width: 18, height: 18})\n      .style('fill', c.color)\n\n  legend.append('text')\n      .attr({x: c.width - 24, y: 9, dy: '.33em', 'text-anchor': 'end'})\n      .text(ƒ())\n})\n\n</script>","filenames":["README.md","d3-jetpack.js","data.tsv","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"1367999","_score":0.33534336,"_source":{"userId":"mbostock","description":"D3 PJAX","created_at":"2011-11-15T19:07:58Z","updated_at":"2016-02-09T00:51:00Z","api":["d3.selectAll","d3.event.preventDefault","d3.html","d3.select"],"colors":[],"readme":"","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\nThis page was generated at <script>document.write(new Date)</script>.\n<div id=\"main\">\n  <ul>\n    <li><a href=\"a.html\">Anteater</a></li>\n    <li><a href=\"b.html\">Baobao</a></li>\n    <li><a href=\"c.html\">Cuttlefish</a></li>\n  </ul>\n  Hello, PJAX!\n</div>\n<script src=\"//d3js.org/d3.v3.min.js\"></script>\n<script>\n\npjax(\"ul li a\", \"#main\");\n\nfunction pjax(links, content) {\n  d3.selectAll(links).on(\"click\", function() {\n    history.pushState(this.href, this.textContent, this.href);\n    load(this.href);\n    d3.event.preventDefault();\n  });\n\n  function load(href) {\n    d3.html(href, function(fragment) {\n      var target = d3.select(content).node();\n      target.parentNode.replaceChild(d3.select(fragment).select(content).node(), target);\n      pjax(links, content); // reapply\n    });\n  }\n\n  d3.select(window).on(\"popstate\", function() {\n    if (d3.event.state) load(d3.event.state);\n  });\n}\n\n</script>\n","filenames":[".block","a.html","b.html","c.html","index.html","thumbnail.png"],"thumb":"b5add2bbcd59e1d1c9394b4b9ebc33d2c3eaa0b3"}},{"_index":"blockbuilder","_type":"blocks","_id":"900050","_score":0.33485845,"_source":{"userId":"mbostock","description":"d3.geo.tiler","created_at":"2011-04-03T00:24:50Z","updated_at":"2016-02-08T23:52:15Z","api":["d3.select","d3.geo.tiler","d3.json","d3.entries","d3.hsl","d3.geo.mercator"],"colors":["#e6e6e6","#a52a2a","#000000"],"readme":"","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"text/javascript\" src=\"https://cdn.rawgit.com/mbostock/d3/v1.8.4/d3.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdn.rawgit.com/mbostock/d3/v1.8.4/d3.geo.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdn.rawgit.com/simplegeo/polymaps/v2.4.0/polymaps.js\"></script>\n    <script type=\"text/javascript\" src=\"tiler.js\"></script>\n    <style type=\"text/css\">\n\n@import url(\"https://cdn.rawgit.com/simplegeo/polymaps/v2.4.0/examples/example.css\");\n\nhtml, body {\n  height: 100%;\n  background: #E6E6E6;\n  margin: 0;\n  font: 10px sans-serif;\n}\n\nsvg {\n  display: block;\n}\n\ncircle {\n  stroke: black;\n  fill: brown;\n  fill-opacity: .5;\n}\n\n#map {\n  width: 960px;\n  height: 500px;\n}\n\n    </style>\n  </head>\n  <body>\n    <div id=\"map\"></div>\n    <script type=\"text/javascript\">\n\nvar po = org.polymaps;\n\n// Create the map object, add it to #map…\nvar map = po.map()\n    .container(d3.select(\"#map\").append(\"svg:svg\").node())\n    .zoom(8)\n    .add(po.drag())\n    .add(po.wheel().smooth(false))\n    .add(po.dblclick())\n    .add(po.arrow());\n\n// Add the CloudMade image tiles as a base layer…\nmap.add(po.image()\n    .url(po.url(\"http://{S}tile.cloudmade.com\"\n    + \"/1a1b06b230af4efdbb989ea99e9841af\" // http://cloudmade.com/register\n    + \"/998/256/{Z}/{X}/{Y}.png\")\n    .hosts([\"a.\", \"b.\", \"c.\", \"\"])));\n\n// Add the custom stations layer…\nmap.add(stations(\"stations.json\"));\n\n// Add the compass control on top.\nmap.add(po.compass()\n    .pan(\"none\"));\n\n// Custom layer implementation.\nfunction stations(url) {\n\n  // Create the tiler, for organizing our points into tile boundaries.\n  var tiler = d3.geo.tiler()\n      .zoom(11)\n      .location(function(d) { return d.value; });\n\n  // Create the base layer object, using our tile factory.\n  var layer = po.layer(load);\n\n  // Load the station data. When the data comes back, reload.\n  d3.json(url, function(json) {\n    tiler.points(d3.entries(json));\n    layer.reload();\n  });\n\n  // Custom tile implementation.\n  function load(tile, projection) {\n    projection = projection(tile).locationPoint;\n\n    // Add an svg:g for each station.\n    var g = d3.select(tile.element = po.svg(\"g\")).selectAll(\"g\")\n        .data(tiler.tile(tile.column, tile.row, tile.zoom))\n      .enter().append(\"svg:g\")\n        .attr(\"transform\", transform);\n\n    // Add a circle.\n    g.append(\"svg:circle\")\n        .style(\"fill\", d3.hsl(Math.random() * 360, 1, .5))\n        .attr(\"r\", 4.5);\n\n    // Add a label.\n    g.append(\"svg:text\")\n        .attr(\"x\", 7)\n        .attr(\"dy\", \".31em\")\n        .text(function(d) { return d.key; });\n\n    function transform(d) {\n      d = projection({lon: d.value[0], lat: d.value[1]});\n      return \"translate(\" + d.x + \",\" + d.y + \")\";\n    }\n  }\n\n  return layer;\n}\n\n    </script>\n  </body>\n</html>\n","filenames":[".block","index.html","stations.json","thumbnail.png","tiler.js"],"thumb":"85580e153318488cae6d341efb97146828d24cc0"}},{"_index":"blockbuilder","_type":"blocks","_id":"460aaba1843db30e222b","_score":0.33472675,"_source":{"userId":"harasaki","description":"d3-02","created_at":"2015-10-16T07:59:29Z","updated_at":"2015-10-16T08:26:06Z","api":["d3.select"],"colors":["#ff0000","#ffff00","#008080"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)","code":"<!DOCTYPE html>\n  <head>\n    <meta charset=\"utf-8\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n    <style type=\"text/css\">\n      body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n      svg { width: 100%; height: 100%; }\n        \n      div.bar {\n        display:inline-block;\n        width: 20px;\n        height: 75px;\n        background-color: teal;\n        margin-right:2px;\n        \n     }\n \n      div.bar2 {\n        display:inline-block;\n        width: 20px;\n        height: 75px;\n        background-color: yellow;\n        margin-right:2px;\n        \n     }\n\n    </style>\n  </head>\n\n  <body>\n     <script type=\"text/javascript\">  \n       var dataset = [];\n      for (var i = 0; i < 25; i++) {\n          var newNumber = Math.floor(Math.random()*100);\n          dataset.push(newNumber);\n      }\n       \n       \n     \n     d3.select(\"body\").selectAll(\"div\")\n         .data(dataset)\n         .enter()\n         .append(\"div\")\n         .attr(\"class\",\"bar\")\n         .style(\"height\",function(d){\n            var barHeight = d *5;\n            return barHeight + \"px\";})\n        \n       .style(\"background-color\", function(d){\n              if(d<60){\n                 return\"red\";\n              }});\n         \n       var dataset2= [25,7,5,70,34,20,3,12,34,56];   \n    d3.select(\"body\").selectAll(\"div.bar2\")\n         .data(dataset2)\n         .enter()\n         .append(\"div\")\n         .attr(\"class\",\"bar2\")\n           .style(\"height\",function(d){\n            var barHeight = d *5;\n            return barHeight + \"px\";\n        \n            \n         });\n\n    \n    </script>\n  </body>\n  ","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"1157415","_score":0.3345508,"_source":{"userId":"bewest","description":"Polymaps + D3","created_at":"2011-08-19T17:30:25Z","updated_at":"2015-09-26T20:48:05Z","api":["d3.select","d3.json","d3.entries"],"colors":["#e6e6e6","#a52a2a","#000000"],"readme":"","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"text/javascript\" src=\"https://github.com/mbostock/d3/raw/v1.8.4/d3.js\"></script>\n    <script type=\"text/javascript\" src=\"https://github.com/simplegeo/polymaps/raw/v2.4.0/polymaps.js\"></script>\n    <style type=\"text/css\">\n\n@import url(\"http://github.com/simplegeo/polymaps/raw/v2.4.0/examples/example.css\");\n\nhtml, body {\n  height: 100%;\n  background: #E6E6E6;\n  margin: 0;\n  font: 10px sans-serif;\n}\n\nsvg {\n  display: block;\n}\n\ncircle {\n  stroke: black;\n  fill: brown;\n  fill-opacity: .5;\n}\n\n#map {\n  width: 960px;\n  height: 500px;\n}\n\n    </style>\n  </head>\n  <body>\n    <div id=\"map\"></div>\n    <script type=\"text/javascript\">\n\nvar po = org.polymaps;\n\n// Create the map object, add it to #map…\nvar map = po.map()\n    .container(d3.select(\"#map\").append(\"svg:svg\").node())\n    .zoom(8)\n    .add(po.interact());\n\n// Add the CloudMade image tiles as a base layer…\nmap.add(po.image()\n    .url(po.url(\"http://{S}tile.cloudmade.com\"\n    + \"/1a1b06b230af4efdbb989ea99e9841af\" // http://cloudmade.com/register\n    + \"/998/256/{Z}/{X}/{Y}.png\")\n    .hosts([\"a.\", \"b.\", \"c.\", \"\"])));\n\n// Add the custom stations layer…\nmap.add(stations(\"stations.json\"));\n\n// Add the compass control on top.\nmap.add(po.compass()\n    .pan(\"none\"));\n\n// Custom layer implementation.\nfunction stations(url) {\n  var data;\n\n  // Create the base layer object, using our tile factory.\n  // Note that the layer isn't tiled; only one tile per world.\n  var layer = po.layer(load)\n      .tile(false);\n\n  // Load the station data. When the data comes back, reload.\n  d3.json(url, function(json) {\n    data = json;\n    layer.reload();\n  });\n\n  // Custom tile implementation.\n  function load(tile, projection) {\n    projection = projection(tile).locationPoint;\n\n    // Add an svg:g for each station.\n    var g = d3.select(tile.element = po.svg(\"g\")).selectAll(\"g\")\n        .data(d3.entries(data))\n      .enter().append(\"svg:g\")\n        .attr(\"transform\", transform);\n\n    // Add a circle.\n    g.append(\"svg:circle\")\n        .attr(\"r\", 4.5);\n\n    // Add a label.\n    g.append(\"svg:text\")\n        .attr(\"x\", 7)\n        .attr(\"dy\", \".31em\")\n        .text(function(d) { return d.key; });\n\n    function transform(d) {\n      d = projection({lon: d.value[0], lat: d.value[1]});\n      return \"translate(\" + d.x + \",\" + d.y + \")\";\n    }\n  }\n\n  return layer;\n}\n\n    </script>\n  </body>\n</html>\n","filenames":["index.html","stations.json"]}},{"_index":"blockbuilder","_type":"blocks","_id":"3de02f81f42ec5486a34","_score":0.33453995,"_source":{"userId":"georules","description":"tweet d3","created_at":"2016-02-03T20:05:11Z","updated_at":"2016-02-03T20:05:12Z","api":[],"colors":["#d1d1d1","#222222"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)","code":"<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n\n  <style>\nbody {\n  margin: 0;\n  background: #d1d1d1;\n}\nsvg {\n  display: block;\n}\n\ncircle, ellipse, line, path, polygon, polyline, rect {\n  fill:none;\n  stroke: #222;\n}\n\ntext {\n  text-anchor: middle;\n  dominant-baseline: middle;\n  fill: #222;\n}\n\n.f {\n  fill: #222;\n}\n  </style>\n</head>\n\n<body>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.13/d3.js\"></script>\n  <script src=\"https://t.d3fc.io/base.js\"></script>\n  <script>\n\n    function tweet(t) {\n  \t'use strict';\n\t\n      \n    // insert tweet here\n      \nP(d.geom.voronoi(rn(-w/2,w/2,25).map(d=>[d,99*s(d*t/1e5)]))).a({d:d=>'M'+d.join()}).y({fill:(d,i)=>c2().range()[i]}) \n      \n    // end tweet\n    } \n    \n  </script>\n</body>\n</html>\n","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"41137d930284600d3134","_score":0.33431414,"_source":{"userId":"tmcw","description":"d3 now (d3 without transitions)","created_at":"2015-03-17T01:37:37Z","updated_at":"2015-08-29T14:17:15Z","api":["d3.select"],"colors":[],"readme":"Remove transitions from d3 can make everything much simpler.","code":"<!DOCTYPE html>\n<head>\n<meta charset=\"utf-8\">\n<style>\nbody {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  position: relative;\n  width: 960px;\n}\n</style>\n</head>\n<body>\n\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"d3now.js\"></script>\n<script>\n\nvar randomColors = [], numberOfColors = 20;\nfor (var i = 0; i < 20; i++) {\n  randomColors.push(['rgb(' +\n    ~~(Math.random() * 255),\n    ~~(Math.random() * 255),\n    ~~(Math.random() * 255)].join(',') + ')');\n}\n\nfunction draw() {\n  d3.select(document.body)\n    .now('input', function(element) {\n      element\n        .attr('type', 'range')\n        .attr('min', 0)\n        .attr('max', 20)\n        .on('input', function() {\n            numberOfColors = parseInt(this.value);\n            draw();\n        });\n    })\n    .now('div', randomColors.slice(0, numberOfColors), function(element, color) {\n      return element\n        .style('background', color)\n        .now('div', function(element) {\n            element.text(color);\n        });\n    });\n}\n\ndraw();\n\n</script>\n</body>\n","filenames":["README.md","d3now.js","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"024452c42b94723b401d","_score":0.33295372,"_source":{"userId":"fabid","description":"d3-returntimemap","created_at":"2016-03-01T18:28:35Z","updated_at":"2016-03-02T15:09:41Z","api":["d3.csv","d3.time.format","d3.returntimemap","d3.select","d3.scale.log","d3.extent","d3.svg.axis","d3.heatmap","d3.scale.linear","d3.max"],"colors":["#4682b4","#0000ff","#ffffff","#000000"],"readme":"Timemaps of my latest tweets with [d3-returntimemap](https://github.com/fabid/d3-returntimemap). Plain version and heatmap version with [d3-heatmap](https://github.com/fabid/d3-heatmap).\n\nThe peak around the 8 hour mark is due to my use of Buffer.\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/0c4cf357ab5ed3e90382'>d3-heatmap</a>","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <script src=\"https://cdn.rawgit.com/fabid/d3-heatmap/master/heatmap.js\"></script>\n  <script src=\"https://cdn.rawgit.com/fabid/d3-returntimemap/master/returntimemap.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.2/moment.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width:50%; height: 100% }\n    line {stroke-width: 1px; stroke: black;}\n    path {stroke-width: 1px;}\n  </style>\n</head>\n\n<body>\n  <script>\n\n    d3.csv('tweets.csv', function(error, data){\n      var margin = {\n        top: 20,\n        right: 20,\n        bottom: 80,\n        left: 80\n      };\n      var dim = 480;\n      var width = dim - margin.left - margin.right;\n      var height = dim - margin.top - margin.bottom;\n      var format = d3.time.format(\"%Y-%m-%d %H:%M:%S\");\n      var dateAccessor = function (d) {return format.parse(d.date)};\n\n      var timemap = d3.returntimemap()\n      \t\t\t\t\t\t\t\t.values(dateAccessor);\n      \n      var timemapData = timemap(data);\n \n      var svg = d3.select('body')\n        .append('svg')\n        .attr('width', dim)\n        .attr('height', dim);\n      \n      var scatter = svg.append('g');\n\n  \t\tvar xScale = d3.scale.log();\n  \t\tvar yScale = d3.scale.log();\n  \n      timemapData.map\n  \t\tvar delta = 1000;\n  \t\txScale.domain(d3.extent(timemapData, function(d) { return d.x; }))\n        \t\t.range([margin.left, width + margin.left]);\n      \n  \t\tyScale.domain(d3.extent(timemapData, function(d) { return d.y; }))\n        \t\t.range([height, margin.top]);\n      \n      \n      var day = 1000 * 3600 * 24;\n      var minute = 1000 * 60;\n      var xAxis = d3.svg.axis()\n    \t\t.scale(xScale)\n    \t\t.orient(\"bottom\")\n      \t.innerTickSize([10])\n        .outerTickSize([1])\n      \t.tickValues([4 * minute, 60 * 8 * minute, 14 * day])\n      \t.tickFormat(function(d){return moment.duration(d).humanize()});\n      var yAxis = d3.svg.axis()\n    \t\t.scale(yScale)\n    \t\t.orient(\"left\")\n      \t.innerTickSize([10])\n        .outerTickSize([1])\n      \t.tickValues([4 * minute, 60 * 8 * minute, 14 * day])\n      \t.tickFormat(function(d){return moment.duration(d).humanize()});\n      svg.append(\"g\")\n    \t\t.attr(\"class\", \"x axis\")\n    \t\t.attr(\"transform\", \"translate(0,\" + (height) + \")\")\n    \t\t.call(xAxis);\n      svg.append(\"g\")\n      \t.attr(\"class\", \"y axis\")\n      \t.attr(\"transform\", \"translate(\" + margin.left + \",0)\")\n      \t.call(yAxis);\n      scatter.selectAll('circle').data(timemapData).enter()\n        .append('circle')\n        .attr('r', 3)\n        .style('fill', 'black')\n        .style('fill-opacity', 0.6)\n        .attr('cx', function(d) {return xScale(d.x)})\n        .attr('cy', function(d) {return yScale(d.y)});\n\n\t\t\tsvg.append(\"text\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"transform\", \"translate(\"+ (margin.left/5) +\",\"+(3*height/4)+\")rotate(-90)\")\n      \t\t\t.style('font-family', 'sans-serif')\n            .text(\"Time after event\");\n      svg.append(\"text\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"transform\", \"translate(\"+ (width/2) +\",\"+(height + margin.top + margin.bottom/2)+\")\")\n      \t\t\t.style('font-family', 'sans-serif')\n            .text(\"Time before event\"); \n           \n      var size = 5;\n      var heatmap = d3.heatmap()\n        .std(2)\n      \t.x(function(d) { return xScale(d.x); })\n        .y(function(d) { return yScale(d.y); })\n        .dx(size)\n        .dy(size);\n      \n      // the result of the heatmap layout\n      var heatmapData = heatmap(timemapData);\n\n      var color = d3.scale.linear()\n        .domain([0, d3.max(heatmapData, function(d) {\n          return d.v;\n        })])\n        .range([\"white\", \"steelblue\"])\n        .interpolate(d3.interpolateLab);\n      \n      var svg2 = d3.select('body')\n        .append('svg')\n        .attr('width', size)\n        .attr('height', size);\n\t\t\tsvg2.append(\"g\")\n    \t\t.attr(\"class\", \"x axis\")\n    \t\t.attr(\"transform\", \"translate(0,\" + (height) + \")\")\n    \t\t.call(xAxis);\n      svg2.append(\"g\")\n      \t.attr(\"class\", \"y axis\")\n      \t.attr(\"transform\", \"translate(\" + margin.left + \",0)\")\n      \t.call(yAxis);\n      svg2.append(\"g\")\n        .selectAll(\".square\")\n        .data(heatmapData)\n        .enter().append(\"rect\")\n         .attr(\"class\", \"square\")\n        .attr(\"x\", function(d) { return d.x; })\n        .attr(\"y\", function(d) { return d.y - size; })    \n        .attr(\"width\", size)\n        .attr(\"height\", size)\n        .style(\"fill\", function(d) {\n          return color(d.v)\n        })\n        .style(\"stroke\", \"none\");\n\n      \n      \n    })\n  </script>\n</body>\n","filenames":["README.md","index.html","thumbnail.png","tweets.csv"],"thumb":"97e90b8cc2875fa2070f3e2876edb3fcc59ae2fb"}},{"_index":"blockbuilder","_type":"blocks","_id":"c6a7de5530c624567250","_score":0.33258522,"_source":{"userId":"eesur","description":"d3 | d3xter","created_at":"2014-11-26T14:50:27Z","updated_at":"2015-08-29T14:10:23Z","api":["d3.select","d3.svg.axis","d3.scale.linear","d3.time.scale"],"colors":["#ee3124","#d2b48c","#000000","#4682b4","#0000ff"],"readme":"Testing D3xter [straight forward plotting built on D3](https://github.com/NathanEpstein/D3xter)\n","code":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>D3xter test</title>  \n    <script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/d3/3.4.2/d3.js\"></script>\n    <script src=\"lib.js\" charset=\"utf-8\"></script>\n\n    <style>\n        body {font-family: monospace; line-height: 160%; font-size: 18px; }\n        svg path, svg line {\n          fill: none;\n          stroke: black;\n        }\n        svg text {\n          font-size: 11px;\n        }\n    </style>\n</head>\n<body>\n    <div id='elementID'></div>\n    <script type=\"text/javascript\">\n\n      var x = [-0.8234, 0.0952, 1.9594, -0.2831, -0.4147, 1.5859, 0.5326, 0.0925, 0.3293, 1.3635, 0.3396, 0.0677, -0.6739, 0.4084, -1.4487, -0.1101, -0.7521, -1.2118, 1.7191, 0.2020, -0.1573, -0.2298, -0.8230, 1.7924, 0.4511];\n      var y = [-1.4166, 1.353, -0.6294, 0.0567, 1.4157, 0.32806, 0.2377, -0.2262, -1.0602, -1.8150, 0.1075, -1.3516, 1.0137, 0.0183, -0.5466, 0.6416, -0.6655, 0.6874, -0.4616, -0.2808, 1.3443, -1.0518, -0.1332, -1.0097, 0.3643];\n      var z  = [1.1011, 0.8724, -1.5972, -0.2027, -1.2296, -0.0543, 0.2415, 0.3584, 1.0202, -1.7524, -0.6787, 0.8113, 0.0206, -1.9769, 1.2008, 1.0440, 1.0141, -0.6452, -0.6115, 0.6687, 2.9415, -1.1146, -1.2889, -0.2562, -1.1781];\n\n\n      var config = {\n        xLab: 'random x-values', //x-axis label (defaults to '')\n        yLab: 'random y-values', //y-axis label (defaults to '')\n        selector: '#elementID', //Selector for DOM element to append the plot to (defaults to < body >)\n        width: 900, //pixel width (defaults to 500)\n        height: 500, //pixel height (defaults to 500)\n\n        //size and sizeLab are used in bubble charts like the top-right example.\n        size: z, //array of numeric values which map to sizes of the circles plotted at the corresponding x-y point (defaults to undefined for a standard scatter)\n        sizeLab: 'random size values' //label for size values (defaults to '')\n      }\n\n      var scatter = scatter(x,y,config);\n\n      //modify the color of the circles with D3 syntax\n      scatter.selectAll('circle').style('fill','#EE3124');\n\n    </script>\n</body>\n</html>\n</html>\n","filenames":["README.md","index.html","lib.js","thumbnail.png"],"thumb":"6e1bca1a421e82e66770210c40a00beeed26e23b"}},{"_index":"blockbuilder","_type":"blocks","_id":"4260548","_score":0.33217746,"_source":{"userId":"bewest","description":"d3.geo.tile","created_at":"2012-12-11T17:42:15Z","updated_at":"2015-10-13T21:48:11Z","api":["d3.geo.tile","d3.behavior.zoom","d3.select"],"colors":[],"readme":"# d3 tile plugin demo\n\n[demo](http://bl.ocks.org/4260548)\n[src](https://gist.github.com/4260548)\n\nModified from the\n[original d3 tile demo](http://bl.ocks.org/4132797)\nA demo of the\n[d3.geo.tile](https://github.com/d3/d3-plugins/tree/master/geo/tile)\nplugin, which determines which 256x256 tiles are visible in the viewport based\non a scale and translate. This demo combines the tile plugin with\nd3.behavior.zoom for panning and zooming, resulting in a a simple slippy map.\nBased partly on [an example](http://bl.ocks.org/3943330) by\n[Tom MacWright](http://macwright.org/).\n","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\nbody {\n  margin: 0;\n}\n\n.map {\n  position: relative;\n  overflow: hidden;\n}\n\n.layer {\n  position: absolute;\n}\n\n.tile {\n  position: absolute;\n  width: 256px;\n  height: 256px;\n}\n\n</style>\n<body>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"https://raw.github.com/d3/d3-plugins/master/geo/tile/tile.js\"></script>\n<script>\n\nvar width = window.innerWidth,\n    height = window.innerHeight,\n    prefix = prefixMatch([\"webkit\", \"ms\", \"Moz\", \"O\"]);\n\nvar tile = d3.geo.tile()\n    .size([width, height]);\n\nvar zoom = d3.behavior.zoom()\n    .scale(2 << 11)\n    .scaleExtent([2 << 8, 2 << 22])\n    .translate([width / 2, height / 2])\n    .on(\"zoom\", zoomed);\n\nvar map = d3.select(\"body\").append(\"div\")\n    .attr(\"class\", \"map\")\n    .style(\"width\", width + \"px\")\n    .style(\"height\", height + \"px\")\n    .call(zoom);\n\nvar layer = map.append(\"div\")\n    .attr(\"class\", \"layer\");\n\nzoomed();\n\nfunction zoomed() {\n  var tiles = tile\n      .scale(zoom.scale())\n      .translate(zoom.translate())\n      ();\n\n  var image = layer\n      .style(prefix + \"transform\", matrix3d(tiles.scale, tiles.translate))\n    .selectAll(\".tile\")\n      .data(tiles, function(d) { return d; });\n\n  image.exit()\n      .remove();\n\n  image.enter( ).append('div')\n      .attr(\"class\", \"tile\")\n      .style(\"left\", function(d) { return (d[0] << 8) + \"px\"; })\n      .style(\"top\", function(d) { return (d[1] << 8) + \"px\"; })\n      .text( function (d) {\n        return \"x:\"  + d[0]\n             + \" y:\" + d[1]\n             + \" z:\" + d[2];\n      })\n      ;\n  /*\n  image.enter().append(\"img\")\n      .attr(\"class\", \"tile\")\n      .attr(\"src\", function(d) { return \"http://\" + [\"a\", \"b\", \"c\", \"d\"][Math.random() * 4 | 0] + \".tiles.mapbox.com/v3/mapbox.mapbox-streets/\" + d[2] + \"/\" + d[0] + \"/\" + d[1] + \".png\"; })\n      .style(\"left\", function(d) { return (d[0] << 8) + \"px\"; })\n      .style(\"top\", function(d) { return (d[1] << 8) + \"px\"; });\n  */\n}\n\nfunction matrix3d(scale, translate) {\n  var k = scale / 256, r = scale % 1 ? Number : Math.round;\n  return \"matrix3d(\" + [k, 0, 0, 0, 0, k, 0, 0, 0, 0, k, 0, r(translate[0] * scale), r(translate[1] * scale), 0, 1 ] + \")\";\n}\n\nfunction prefixMatch(p) {\n  var i = -1, n = p.length, s = document.body.style;\n  while (++i < n) if (p[i] + \"Transform\" in s) return \"-\" + p[i].toLowerCase() + \"-\";\n  return \"\";\n}\n\n</script>\n","filenames":["README.md","index.html","thumbnail.png"],"thumb":"f768ac032bac388215bbd0091e6ef3456cb7ea71"}},{"_index":"blockbuilder","_type":"blocks","_id":"8b6a0277075d770f088a","_score":0.33197007,"_source":{"userId":"fabid","description":"d3-returntimemap","created_at":"2016-03-02T14:33:55Z","updated_at":"2016-03-02T14:33:55Z","api":["d3.csv","d3.returntimemap","d3.select","d3.scale.log","d3.extent","d3.svg.axis","d3.heatmap","d3.scale.linear","d3.max"],"colors":["#4682b4","#0000ff","#ffffff","#000000"],"readme":"Rectangular binning with [d3-heatmap](https://github.com/fabid/d3-heatmap/blob/master/heatmap.js)\nbased on [d3-hexbin demo](http://bl.ocks.org/xaranke/b956ee7215b7b50bc78a)\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/320859ff9f2e2576cebf'>Rectangular binning - 2d histogram</a>\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/a1a7d04bdd34c2096eaf'>Rectangular binning - 2d histogram</a>\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/0c4cf357ab5ed3e90382'>d3-heatmap</a>\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/024452c42b94723b401d'>d3-returntimemap</a>","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <script src=\"https://cdn.rawgit.com/fabid/d3-heatmap/master/heatmap.js\"></script>\n  <script src=\"https://cdn.rawgit.com/fabid/d3-returntimemap/master/returntimemap.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.2/moment.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width:50%; height: 100% }\n    line {stroke-width:1px; stroke: black;}\n    path {stroke-width:1px;}\n  </style>\n</head>\n\n<body>\n  <script>\n\n    d3.csv('tweets.csv', function(error, data){\n \n      var margin = {\n        top: 20,\n        right: 20,\n        bottom: 90,\n        left: 90\n      },\n      width = 480 - margin.left - margin.right,\n      height = 480 - margin.top - margin.bottom;\n      \n      var dateAccessor = function (d) {return Date.parse(d.date)};\n\n      var timemap = d3.returntimemap()\n      \t\t\t\t\t\t\t\t.values(dateAccessor);\n      \n      var timemapData = timemap(data);\n \n      var svg = d3.select('body')\n        .append('svg')\n        .attr('width', width)\n        .attr('height', height);\n      \n      var scatter = svg.append('g');\n\n  \t\tvar xScale = d3.scale.log();\n  \t\tvar yScale = d3.scale.log();\n  \n      timemapData.map\n  \t\tvar delta = 1000;\n  \t\txScale.domain(d3.extent(timemapData, function(d) { return d.x; }))\n        \t\t.range([margin.left, width + margin.left]);\n  \t\tyScale.domain(d3.extent(timemapData, function(d) { return d.y; }))\n        \t\t.range([height + margin.top, margin.top]);\n      var day = 1000 * 3600 * 24;\n      var minute = 1000 * 60;\n      var xAxis = d3.svg.axis()\n    \t\t.scale(xScale)\n    \t\t.orient(\"bottom\")\n      \t.innerTickSize([10])\n        .outerTickSize([1])\n      \t.tickValues([4 * minute, 60 * 8 * minute, 14 * day])\n      \t.tickFormat(function(d){return moment.duration(d).humanize()});\n      var yAxis = d3.svg.axis()\n    \t\t.scale(yScale)\n    \t\t.orient(\"left\")\n      \t.innerTickSize([10])\n        .outerTickSize([1])\n      \t.tickValues([4 * minute, 60 * 8 * minute, 14 * day])\n      \t.tickFormat(function(d){return moment.duration(d).humanize()});\n      svg.append(\"g\")\n    \t\t.attr(\"class\", \"x axis\")\n    \t\t.attr(\"transform\", \"translate(0,\" + (height + margin.top) + \")\")\n    \t\t.call(xAxis);\n      svg.append(\"g\")\n      \t.attr(\"class\", \"y axis\")\n      \t.attr(\"transform\", \"translate(\" + margin.left + \",0)\")\n      \t.call(yAxis);\n      scatter.selectAll('circle').data(timemapData).enter()\n        .append('circle')\n        .attr('r', 3)\n        .style('fill', 'black')\n        .style('fill-opacity', 0.6)\n        .attr('cx', function(d) {return xScale(d.x)})\n        .attr('cy', function(d) {return yScale(d.y)});\n\n      \n           \n      var size = 10;\n      var heatmap = d3.heatmap()\n        .std(2)\n      \t.x(function(d) { return xScale(d.x); })\n        .y(function(d) { return yScale(d.y); })\n        .dx(size)\n        .dy(size);\n      \n      // the result of the heatmap layout\n      var heatmapData = heatmap(timemapData);\n\n      var color = d3.scale.linear()\n        .domain([0, d3.max(heatmapData, function(d) {\n          return d.v;\n        })])\n        .range([\"white\", \"steelblue\"])\n        .interpolate(d3.interpolateLab);\n      \n      var svg2 = d3.select('body')\n        .append('svg')\n        .attr('width', width)\n        .attr('height', height);\n\n      svg2.append(\"g\")\n        .selectAll(\".square\")\n        .data(heatmapData)\n        .enter().append(\"rect\")\n         .attr(\"class\", \"square\")\n        .attr(\"x\", function(d) { return d.x; })\n        .attr(\"y\", function(d) { return d.y - size; })    \n        .attr(\"width\", size)\n        .attr(\"height\", size)\n        .style(\"fill\", function(d) {\n          return color(d.v)\n        })\n        .style(\"stroke\", \"none\");\n\n      \n      \n    })\n  </script>\n</body>\n","filenames":["README.md","index.html","tweets.csv"]}},{"_index":"blockbuilder","_type":"blocks","_id":"11f85e7981c7b203768e","_score":0.32901418,"_source":{"userId":"eesur","description":"d3 | hotspots","created_at":"2015-05-28T22:42:38Z","updated_at":"2015-08-29T14:22:06Z","api":["d3.select","d3.scale.linear","d3.svg.axis","d3.selectAll","d3.range"],"colors":["#130c0e","#7ac143","#000000","#ffd700"],"readme":"# Hotspots with D3\n\nJust a play with hotspots to make an image 'interactive' in D3 and an excuse to reminisce.\n\n## Process:\n\n- Find a pic, choose [The Grand Budapest Hotel](http://www.imdb.com/title/tt2278388/), it was an awesome film\n- Made a grid, so I can quickly reference the pixels\n- Made the data (my son helped me here)\n- Draw some transparent rects\n\n## Issues\n\nShould have used a full size image, or one that at least had Zero in it.\nAnd I'm repeating what's on the pic already but hey &hellip;","code":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>d3 | hotspots</title> \n  <meta name=\"author\" content=\"Sundar Singh | eesur.com\">\n  \n  <link rel=\"stylesheet\" href=\"main.css\">\n  <script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script> \n</head>\n<body>\n\n<header>\n  <h1>move over pic</h1>\n  <p></p>\n  <nav><button id=\"grid-bt\">GRID</button></nav>\n</header>\n<section id=\"vis\"></section>\n\n<script src=\"d3_code_grid.js\" charset=\"utf-8\"></script> \n<script src=\"d3_code_hotspots.js\" charset=\"utf-8\"></script>\n\n</body>\n</html>\n","filenames":["README.md","d3_code_grid.js","d3_code_hotspots.js","index.html","main.css","thumbnail.png"],"thumb":"af7dd4c20dc6169372d134ea01ab5e71ef0aa0b7"}},{"_index":"blockbuilder","_type":"blocks","_id":"27969219a945e2bd20dc","_score":0.32748336,"_source":{"userId":"enjalot","description":"d3.geo.weichel","created_at":"2015-09-30T17:02:24Z","updated_at":"2015-09-30T18:14:36Z","api":["d3.geo.wiechel","d3.geo.orthographic","d3.geo.path","d3.timer","d3.select","d3.selectAll","d3.geo.graticule","d3.json","d3.geo.aitoff","d3.geo.boggs","d3.geo.craster","d3.geo.cylindricalEqualArea","d3.geo.eckert1","d3.geo.eckert3","d3.geo.eckert4","d3.geo.eckert5","d3.geo.equirectangular","d3.geo.fahey","d3.geo.foucaut","d3.geo.cylindricalStereographic","d3.geo.ginzburg8","d3.geo.kavrayskiy7","d3.geo.larrivee","d3.geo.mtFlatPolarSinusoidal","d3.geo.mercator","d3.geo.miller","d3.geo.mollweide","d3.geo.naturalEarth","d3.geo.nellHammer","d3.geo.hammer","d3.geo.robinson","d3.geo.sinusoidal","d3.geo.vanDerGrinten","d3.geo.wagner6","d3.geo.wagner7","d3.geo.winkel3","d3.range"],"colors":["#333333","#aaaaaa","#d7c7ad","#a5967e","#cfcece","#d8355e","#d2b48c"],"readme":"Admiring Jason Davies' work on the [Weichel projection](https://www.jasondavies.com/maps/wiechel/)\n\n\n\n\n\n\n\n\n\n\n\n\n\nforked from <a href='http://bl.ocks.org/enjalot/'>enjalot</a>'s block: <a href='http://bl.ocks.org/enjalot/bd552e711b8325c64729'>visualizing map distortion</a>","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3-geo-projection/0.2.15/d3.geo.projection.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/topojson/1.6.19/topojson.min.js\"></script>\n<style>\n  svg {\n    margin: 22px;\n  }\n  select {\n    margin-left: 20px;\n  }\n  path.foreground {\n    fill: none;\n    stroke: #333;\n    stroke-width: 1.5px;\n  }\n  path.graticule {\n    fill: none;\n    stroke: #aaa;\n    stroke-width: .5px;\n  }\n  #left {\n\n  }\n  #left .land {\n    fill: #d7c7ad;\n    stroke: #a5967e;\n  }\n  #right .land {\n    fill: #cfcece;\n    stroke: #a5967e;\n  }\n  \n  #left circle {\n    fill: #d8355e;\n  }\n  #right circle {\n    stroke: #d8355e;\n    fill: none;\n  }\n</style>\n</head>\n\n<body>\n  <svg id=\"left\"></svg>\n  <svg id=\"right\"></svg>\n  \n  <script>\n    var map_width = 400;\n    var map_height = 400;\n    var center = [-90, 37];\n    var scale0 = (map_width - 1) / 2 / Math.PI * 6\n    var scale1 = (map_width - 1) / 2 / Math.PI * 3\n\n    \n    \n    var projectionLeft = d3.geo.wiechel()\n    //.center(center)\n    .translate([map_width/2, map_height/2])\n    .rotate([0, -90])\n    .clipAngle(180 - 1)\n    .precision(.1)\n    .scale(90)\n    .rotate([100, -90])\n    \n    var projectionRight = d3.geo.orthographic()\n    .center(center)\n    .translate([map_width/5, map_height / 5])\n    .scale(scale1)\n    .clipAngle(90)\n\n    var pathLeft = d3.geo.path()\n        .projection(projectionLeft);\n    var pathRight = d3.geo.path()\n        .projection(projectionRight);\n    \n    function zoomed() {\n\n      var newCenter = projectionLeft.invert([map_width/2,map_height/2]);\n      \n      projectionRight\n        .rotate([-newCenter[0], -newCenter[1]])\n\n      update();\n    }\n    \n    var start = Date.now();\n    var duration = 20;\n    var pause = false;\n    var dir = 1;\n    d3.timer(function(elapsed) {\n      var now = Date.now();\n      if(now - start > duration) {\n        start = now;\n      } else {\n        return false;\n      }\n      var dt = elapsed * 0.00005 % 2*Math.PI\n      //var deg = dt * 180/Math.PI * 0.1;\n      //console.log(deg)\n      var deg = 3\n      var rot = projectionLeft.rotate()\n      rot[0] = (rot[0] + deg)// % 360\n      rot[1] = (rot[1] - deg)// % 360\n      var scale = projectionLeft.scale();\n      \n      if(scale > 200 && dir === 1) {\n        dir = -1;\n      } else if(scale < 80 && dir === -1) {\n        dir = 1;\n      }\n      if(dir === -1) {\n        scale -= 5\n      } else {\n      \tscale += 5;\n      }\n      projectionLeft.scale(scale)\n      //console.log(rot)\n\t\t\tprojectionLeft.rotate(rot)\n      zoomed()\n      \n      return pause;\n    })\n    d3.select(\"body\").on(\"click\", function() {\n      pause = true;\n    })\n    \n    function update() {\n      d3.selectAll(\"#left path\")\n          .attr(\"d\", pathLeft);\n      d3.selectAll(\"#right path\")\n          .attr(\"d\", pathRight);\n      \n      d3.selectAll(\"#left circle\")\n      .attr({\n        cx: function(d,i) { return d.x },\n        cy: function(d,i) { return d.y }\n      })\n      \n      d3.selectAll(\"#right circle\")\n      .attr({\n        cx: function(d,i) {\n          var latlon = projectionLeft.invert([d.x, d.y])\n          return projectionRight(latlon)[0] \n        },\n        cy: function(d,i) {\n          var latlon = projectionLeft.invert([d.x, d.y])\n          return projectionRight(latlon)[1]\n        }\n      })\n    }\n    \n    \n\n    var graticule = d3.geo.graticule();\n    var svgLeft = d3.select(\"#left\")\n        .attr(\"width\", map_width)\n        .attr(\"height\", map_height);\n    var svgRight = d3.select(\"#right\")\n        .attr(\"width\", map_width + 40)\n        .attr(\"height\", map_height);\n   \n\n    svgLeft.append(\"path\")\n        .datum(graticule)\n        .attr(\"class\", \"graticule\")\n        .attr(\"d\", pathLeft);\n    \n    svgRight.append(\"path\")\n        .datum(graticule)\n        .attr(\"class\", \"graticule\")\n        .attr(\"d\", pathRight);\n\n    d3.json(\"world-110m.json\", function(error,world) {\n      if (error) throw error;\n\n      svgLeft.insert(\"path\", \".graticule\")\n          .datum(topojson.feature(world, world.objects.land))\n          .attr(\"class\", \"land\")\n          .attr(\"d\", pathLeft);\n      \n      svgRight.insert(\"path\", \".graticule\")\n          .datum(topojson.feature(world, world.objects.land))\n          .attr(\"class\", \"land\")\n          .attr(\"d\", pathRight);\n      \n      var points = generateRect(500, 75, 75, map_width - 150, map_height - 150);\n      \n      svgLeft.selectAll(\"circle\")\n        .data(points)\n        .enter().append(\"circle\")\n        .attr({\n          r: 3\n        })\n      \n      svgRight.selectAll(\"circle\")\n        .data(points)\n        .enter().append(\"circle\")\n        .attr({\n          r: 2\n        })\n      \n      zoomed();\n    });\n    \n    var projections = {\n      \"Aitoff\": d3.geo.aitoff().scale(90),\n      \"Boggs Eumorphic\": d3.geo.boggs().scale(90),\n      \"Craster Parabolic (Putnins P4)\": d3.geo.craster().scale(90),\n      \"Cylindrical Equal-Area\": d3.geo.cylindricalEqualArea().scale(120),\n      \"Eckert I\": d3.geo.eckert1().scale(95),\n      \"Eckert III\": d3.geo.eckert3().scale(105),\n      \"Eckert IV\": d3.geo.eckert4().scale(105),\n      \"Eckert V\": d3.geo.eckert5().scale(100),\n      \"Equidistant Cylindrical (Plate Carrée)\": d3.geo.equirectangular().scale(90),\n      \"Fahey\": d3.geo.fahey().scale(75),\n      \"Foucaut Sinusoidal\": d3.geo.foucaut().scale(80),\n      \"Gall (Gall Stereographic)\": d3.geo.cylindricalStereographic().scale(70),\n      \"Ginzburg VIII (TsNIIGAiK 1944)\": d3.geo.ginzburg8().scale(75),\n      \"Kavraisky VII\": d3.geo.kavrayskiy7().scale(90),\n      \"Larrivée\": d3.geo.larrivee().scale(55),\n      \"McBryde-Thomas Flat-Pole Sine (No. 2)\": d3.geo.mtFlatPolarSinusoidal().scale(95),\n      \"Mercator\": d3.geo.mercator().scale(50),\n      \"Miller Cylindrical I\": d3.geo.miller().scale(60),\n      \"Mollweide\": d3.geo.mollweide().scale(100),\n      \"Natural Earth\": d3.geo.naturalEarth().scale(100),\n      \"Nell-Hammer\": d3.geo.nellHammer().scale(120),\n      \"Quartic Authalic\": d3.geo.hammer().coefficient(Infinity).scale(95),\n      \"Robinson\": d3.geo.robinson().scale(90),\n      \"Sinusoidal\": d3.geo.sinusoidal().scale(90),\n      \"van der Grinten (I)\": d3.geo.vanDerGrinten().scale(50),\n      \"Wagner VI\": d3.geo.wagner6().scale(90),\n      \"Wagner VII\": d3.geo.wagner7().scale(90),\n      \"Winkel Tripel\": d3.geo.winkel3().scale(90),\n      \"Wiechel\": d3.geo.wiechel().scale(90)\n    };\n    \n    \n    \n    function generateRect(num, x, y, width, height) {\n      var points = []\n      var sideNum = Math.floor(num/4) + 1;\n      // top\n      d3.range(sideNum).forEach(function(i) {\n        points.push({ x: x + i * width/sideNum, y: y })\n      })\n      // right\n      d3.range(sideNum).forEach(function(i) {\n        points.push({ x: x + width, y: y + i * height/sideNum })\n      })\n      // bottom\n      d3.range(sideNum).forEach(function(i) {\n        points.push({ x: x + width - i * width/sideNum, y: y + height })\n      })\n      // left\n      d3.range(sideNum).forEach(function(i) {\n        points.push({ x: x, y: y + height - i * height/sideNum })\n      })\n      return points;\n    }\n    \n  </script>\n</body>\n\n\n<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-67666917-1', 'auto');\n  ga('send', 'pageview');\n</script>","filenames":["README.md","index.html","thumbnail.png","world-110m.json"],"thumb":"db939f30f435354487499ccbe7889c3eccb0cd18"}},{"_index":"blockbuilder","_type":"blocks","_id":"5a1e11cb302b66fc0b8b","_score":0.32737523,"_source":{"userId":"harasaki","description":"d3-01","created_at":"2015-10-16T07:48:07Z","updated_at":"2015-10-16T07:48:07Z","api":["d3.select"],"colors":["#ff0000","#000000"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)","code":"<!DOCTYPE html>\n  <head>\n    <meta charset=\"utf-8\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n    <style>\n      body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n      svg { width: 100%; height: 100%; }\n    </style>\n  </head>\n\n  <body>\n    <script>\n      var dataset = [5,21,65,70,25,30,0];\n       \n       d3.select(\"body\").selectAll(\"p\")\n            .data(dataset)\n            .enter()\n            .append(\"p\")\n            .text(function(d){ return d+\"点\";})\n            .style(\"color\", function(d){\n              if(d<60){\n                 return\"red\";\n              }else{\n                return \"black\";\n              }\n              });\n\n       \n       \n       d3.select(\"body\")\n         .append(\"h1\")\n         .text(\"おいしい\");\n         \n       var body =d3.select(\"body\")\n       var p = body.append(\"p\")\n       p.text(\"おいしい2\");\n       \n    </script>\n  </body>\n  ","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"1412be68265ae0315cb5","_score":0.32735652,"_source":{"userId":"balajikvijayan","description":"D3 Intro","created_at":"2015-12-09T01:21:36Z","updated_at":"2015-12-09T01:32:32Z","api":["d3.select","d3.selectAll"],"colors":["#ff0000","#00ff00","#0000ff","#a72d1a","#5db9e3"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width: 100%; height: 100%; }\n  </style>\n</head>\n\n<body>\n  <svg>\n  </svg>\n  <script>\n    var width = 1000;\n    var height = 1000;\n    var i = 4;\n    \n    var svg = d3.select('svg');\n    \n    for(var i = 0; i < 1200; i++) {\n      var colors = [\"#FF0000\", \"#00FF00\",\"#0000FF\"]  \n      \n      var d = {\n        x: Math.random() * 700,\n        y: Math.random() * 1000,\n        r: Math.random() * 10 + 5,\n        fill: colors[Math.floor(Math.random() * \t\t\t\t\t\tcolors.length)]\n      };\n   \n    \tsvg.append(\"circle\")\n      \t.datum(d)\n    }\n    \n    svg.selectAll(\"circle\")\n    \t.attr(\"cx\", function(d) { return d.x; })\n    \t.attr(\"cy\", function(d) { return d.y; })\n    \t.attr(\"r\", function(d) { return d.r; })\n\t    .attr(\"fill\", function(d) { return d.fill; })\n    \n//     var body = d3.select('body');\n//     var header = body.append('h1').text('Hi Mom')\n//                     .attr('id', 'main')\n//     \t\t\t\t\t\t\t\t.attr('class', 'header')\n    \n//     body.append(\"h1\").text(\"1 2 3\")\n//       \t\t\t\t\t\t\t.attr('class', 'header')\n    \n//     d3.selectAll(\".header\").style(\"color\", \"blue\")\n//     d3.select(\"#main\").style(\"color\", \"red\")\n//     d3.selectAll(\".header\")\n//       .style('font-family', 'helvetica')\n\n//     document.querySelector('body').append('h1')\n//     .text('Hi Mom').attr('id', 'main')\n    \n//     d3.selectAll('body')\n    \n//     var svg = d3.select(\"body\").append(\"svg\")\n//       .attr(\"width\", width + margin.left + margin.right)\n//       .attr(\"height\", height + margin.top + margin.bottom)\n//     .append(\"g\")\n//       .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n//     // Feel free to change or delete any of the code you see!\n//     svg.append(\"rect\")\n//       .attr({x: 100, y: 10, width: width - 200, height: height - 20})\n//       .style({ fill: \"#a72d1a\"})\n//       .transition().duration(3000).ease(\"bounce\")\n//       .style({ fill: \"#5db9e3\"})\n    \n//     console.log(\"you are now rocking with d3\", d3);\n  </script>\n</body>\n","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"d703765494271f534fcc","_score":0.327214,"_source":{"userId":"ChristosT","description":"D3 tutorial","created_at":"2016-01-17T03:47:13Z","updated_at":"2016-01-23T05:18:39Z","api":["d3.scale.linear","d3.max","d3.select","d3.format","d3.svg.axis"],"colors":["#ff0000","#000000"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)\nTutorial from [http://alignedleft.com/tutorials](http://alignedleft.com/tutorials)","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n\t<style type=\"text/css\">\n        .axis path,\n        .axis line {\n            fill: none;\n            stroke: black;\n            shape-rendering: crispEdges;\n        }\n        .axis text {\n            font-family: sans-serif;\n            font-size: 11px;\n        }\n\t\t</style>\n</head>\n\n<body>\n  <script>\n      var w =500;\n      var h= 300;\n      var padding = 30;\n//AXES CHAPTER 8\n//http://chimera.labs.oreilly.com/books/1230000000345/ch08.html#_setting_up_an_axis\n//Dynamic, random dataset\nvar dataset = [];\nvar numDataPoints = 50;\nvar xRange = Math.random() * 1000;\nvar yRange = Math.random() * 1000;\nfor (var i = 0; i < numDataPoints; i++) {\n    var newNumber1 = Math.floor(Math.random() * xRange);\n    var newNumber2 = Math.floor(Math.random() * yRange);\n    dataset.push([newNumber1, newNumber2]);\n}\n     \t\t\n\tvar xScale = d3.scale.linear()\n                     .domain([0, d3.max(dataset, function(d) { return d[0]; })])\n                     .range([padding, w-padding]);\n                     \n    var yScale = d3.scale.linear()\n                    .domain([0, d3.max(dataset, function(d) { return d[1]; })])\n                    .range([h- padding, padding]);\n                    \n    var rScale = d3.scale.linear()\n                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])\n                     .range([2, 5]);\n                    //Create SVG element\n    var svg = d3.select(\"body\")\n\t\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"width\", w)\n\t\t\t\t.attr(\"height\", h);\n\n\tsvg.selectAll(\"circle\")\n        .data(dataset)\n\t\t.enter()\n\t\t.append(\"circle\")\n\t\t.attr(\"cx\", function(d) {return xScale(d[0]);})\n        .attr(\"cy\", function(d) {return yScale(d[1]);})\n        .attr(\"r\", function(d) {return rScale(d[1]);});\n\n /*   svg.selectAll(\"text\")\n        .data(dataset)\n        .enter()\n        .append(\"text\")\n        .text(function(d) {\treturn d[0] + \",\" + d[1];  })\n        .attr(\"x\", function(d) {return xScale(d[0]); })\n        .attr(\"y\", function(d) {return yScale(d[1]); })\n        .attr(\"font-family\", \"sans-serif\")\n\t\t.attr(\"font-size\", \"11px\")\n\t\t.attr(\"fill\", \"red\");\n   */\n   var formatAsPercentage = d3.format(\".1%\"); \n    var xAxis = d3.svg.axis()\n                  .scale(xScale)\n                  .orient(\"bottom\")\n                  .ticks(5)\n                  .tickFormat(formatAsPercentage);\n    var yAxis = d3.svg.axis()\n                  .scale(yScale)\n                  .orient(\"left\")\n                  .ticks(5);\n    \n    svg.append(\"g\")\n        .attr(\"class\",\"axis\")\n        .attr(\"transform\",\"translate(0,\" + (h-padding) + \")\")\n        .call(xAxis);\n\t\t\t\n    //Create Y axis\nsvg.append(\"g\")\n    .attr(\"class\", \"axis\")\n    .attr(\"transform\", \"translate(\" + padding + \",0)\")\n    .call(yAxis);\n  </script>\n\n\n</body>\n","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"c7c4a8ef274c40a903d7","_score":0.3271985,"_source":{"userId":"fdaudens","description":"D3-barchart","created_at":"2015-04-06T20:17:08Z","updated_at":"2015-08-29T14:18:34Z","api":["d3.select","d3.csv","d3.descending"],"colors":[],"readme":"","code":"<html>\n \n<head>\n\t<title>Graphique en barres</title>\n \n<script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n</head>\n \n<body>\n \n<script type=\"text/javascript\">\n\t\n\tvar svg = d3.select(\"body\")\n\t\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"width\", 635)\n\t\t\t\t.attr(\"height\", 3100)\n\t\n\td3.csv(\"2011_participation.csv\", function(data) {\n\t\t\n\t\tdata.sort(function(a, b) {\n\t\t\treturn d3.descending(a.tauxParticipation, b.tauxParticipation);\n\t\t\t\n\t\t});\n\t\n\tvar rects = svg.selectAll(\"rect\")\n\t\t\t\t\t.data(data)\n\t\t\t\t\t.enter()\n\t\t\t\t\t.append(\"rect\")\n\t\t\n\trects.attr(\"x\", 0)\n\t\t.attr(\"y\", function(d, i) {\n\t\t\treturn i * 10;\n\t\t})\n\t\t.attr(\"width\", function(d) {\n\t\t\treturn d.tauxParticipation * 5;\n\t\t})\n\t\t.attr(\"height\", 8)\n\t\t.append(\"title\")\n\t\t.text(function(d) {\n\t\t\treturn \"Taux de participation dans \" + d.circonscription + \" : \" + d.tauxParticipation + \" %\"\n\t\t});\n\t\t\n\t});\n\t\n\t\t</script>\n \n\t</body>\n</html>","filenames":["2011_participation.csv","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"6753601","_score":0.3270962,"_source":{"userId":"vicapow","description":"d3 pleasures","created_at":"2013-09-29T15:46:29Z","updated_at":"2015-12-24T05:59:00Z","api":["d3.select","d3.range","d3.svg.line"],"colors":["#ffffff","#000000"],"readme":"","code":"<!DOCTYPE HTML>\n<html>\n  <head>\n    <script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n    <style>\n      body{\n        margin: 0;\n      }\n      path {\n        stroke: white;\n        stroke-width: 2px;\n        fill: black;\n      }\n      svg {\n        background-color: black;\n      }\n    </style>\n  </head>\n  <body>\n    <script>\n      var svg = d3.select('body').append('svg').attr({width: 960, height: 500});\n      var data = d3.range(50, 650, 10).map(function(y_offset){\n        return d3.range(100, 700, 10).map(function(d){\n          var y = d;\n          if(y < 300 || y > 500) y = 50;\n          else y = 500;\n          return [d, y_offset - Math.random() * Math.random() * y / 10];\n        });\n      });\n      var line = d3.svg.line()\n        .x(function(d) { return d[0]; })\n        .y(function(d) { return d[1]; })\n        .interpolate(\"basis\");\n      svg.selectAll('path').data(data)\n        .enter()\n        .append('path').attr('d', line);\n    </script>\n  </body>\n</html>","filenames":["index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"2d06a6aadbb4af3398ba","_score":0.3270962,"_source":{"userId":"Rico3734","description":"D3 ruler","created_at":"2016-02-18T16:39:01Z","updated_at":"2016-02-18T16:39:01Z","api":["d3.tsv","d3.scale.identity","d3.svg.axis","d3.select"],"colors":["#000000"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\n.axis text {\n  font: 10px sans-serif;\n}\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n</style>\n<body>\n<script src=\"//d3js.org/d3.v3.min.js\"></script>\n<script>\n  \nvar seqlength=0;\n\nd3.tsv(\"gene.txt\", function(error, data){\n\tif (error) throw error;\n\tvar line = data;\n\tvar linelength = line.length;\n  seqlength = seqlength + linelength;\n\tconsole.log(linelength);  \n});\n  \n\n\nvar margin = {top: 100, right: 100, bottom: 100, left: 100},\n    width = 860 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\nvar x = d3.scale.identity()\n    .domain([0, width]);\n\nvar xAxis = d3.svg.axis()\n    .scale(x)\n    .tickValues(length)\n    .orient(\"bottom\");\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nsvg.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .call(xAxis);\n\nvar myString=\"gene.txt\"  \nvar length=\"myString.length\"  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</script>","filenames":["README.md","gene.txt","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"3943330","_score":0.3270822,"_source":{"userId":"tmcw","description":"d3 tiles","created_at":"2012-10-24T02:15:20Z","updated_at":"2015-10-12T00:27:58Z","api":["d3.geo.mercator","d3.geo.path","d3.select","d3.behavior.zoom","d3.range"],"colors":["#e5f5f9","#2ca25f","#bdbdbd","#ff0000"],"readme":"","code":"<!DOCTYPE html>\n<style>\n  path {\n    fill: #E5F5F9;\n    opacity:0.4;\n    stroke: #2CA25F;\n    stroke-width: 0.5;\n  }\n  #axes {\n    stroke: #BDBDBD;\n    stroke-width: 0.5;\n  }\n</style>\n<body>\n<script src=\"http://d3js.org/d3.v2.js\"></script>\n<script>\n  var width = 960,\n      height = 500,\n      projection = d3.geo.mercator().scale(1024).translate([512, 256]),\n      path = d3.geo.path().projection(projection);\n\n  var svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .call(d3.behavior.zoom()\n        .translate(projection.translate())\n        .scale(projection.scale())\n        .on(\"zoom\", redraw));\n\n  var axes = svg.append(\"g\").attr(\"id\", \"axes\"),\n      xAxis = axes.append(\"line\").attr(\"y2\", height),\n      yAxis = axes.append(\"line\").attr(\"x2\", width);\n\n  var tileg = svg.append('g').attr('id', 'tiles');\n\n  function tileUrl(d) {\n      return 'http://a.tiles.mapbox.com/v3/tmcw.map-hehqnmda/' + d.join('/') + '.png';\n  }\n\n  function redraw() {\n    if (d3.event) {\n      projection\n          .translate(d3.event.translate)\n          .scale(d3.event.scale);\n    }\n\n    var t = projection.translate(),\n        s = projection.scale(),\n        z = Math.max(Math.log(s) / Math.log(2) - 8, 0);\n        rz = Math.floor(z),\n        ts = 256 * Math.pow(2, z - rz);\n\n    // This is the 0, 0 px of the projection\n    var tile_origin = [s / 2 - t[0], s / 2 - t[1]];\n\n    var tiles = [];\n\n    var cols = d3.range(Math.max(0, Math.floor((tile_origin[0] - width) / ts)),\n        Math.max(0, Math.ceil((tile_origin[0] + width) / ts)));\n\n    var rows = d3.range(Math.max(0, Math.floor((tile_origin[1] - height) / ts)),\n        Math.max(0, Math.ceil((tile_origin[1] + height) / ts)));\n\n    cols.forEach(function(x) {\n        rows.forEach(function(y) {\n            tiles.push([Math.floor(z), x, y]);\n        });\n    });\n\n    var tiles = tileg.selectAll('image.tile')\n        .data(tiles, function(d) { return d.join(',') });\n\n    tiles.exit()\n        .transition()\n        .duration(250)\n        .style(\"opacity\", 0.0)\n        .remove();\n\n    tiles.enter().append('image')\n        .attr('class', 'tile')\n        .attr('xlink:href', tileUrl);\n\n    tiles.attr({ width: ts, height: ts })\n        .attr('transform', function(d) {\n            return 'translate(' + [(d[1] * ts) - tile_origin[0], (d[2] * ts) - tile_origin[1]] + ')';\n        })\n\n    xAxis.attr(\"x1\", t[0]).attr(\"x2\", t[0]);\n    yAxis.attr(\"y1\", t[1]).attr(\"y2\", t[1]);\n  }\n\n  redraw();\n</script>\n","filenames":["index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"3202712","_score":0.32673573,"_source":{"userId":"msqr","description":"d3 gauge","created_at":"2012-07-30T00:03:05Z","updated_at":"2016-05-02T11:23:14Z","api":["d3.format","d3.interpolateHsl","d3.rgb","d3.layout.pie","d3.scale.linear","d3.range","d3.svg.arc","d3.select","d3.svg.line"],"colors":["#e85116","#b64011","#666666","#e8e2ca","#3e6c0a","#ff0000","#d2b48c","#4682b4","#0000ff"],"readme":"","code":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=320\" />\n\t<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n\t<title>Gauge</title>\n\t<script type=\"text/javascript\" src=\"http://d3js.org/d3.v2.min.js\"></script>\n\t<style>\n\tbody {\n\t\tfont-family:  Helvetica, Arial, sans-serif;\n\t\tmargin: 32px;\n\t}\n\n\t#power-gauge g.arc {\n\t\tfill: steelblue;\n\t}\n\n\t#power-gauge g.pointer {\n\t\tfill: #e85116;\n\t\tstroke: #b64011;\n\t}\n\t\n\t#power-gauge g.label text {\n\t\ttext-anchor: middle;\n\t\tfont-size: 14px;\n\t\tfont-weight: bold;\n\t\tfill: #666;\n\t}\n\t</style>\n</head>\n<body>\n<div id=\"power-gauge\"></div>\n\t\n<script>\nvar gauge = function(container, configuration) {\n\tvar that = {};\n\tvar config = {\n\t\tsize\t\t\t\t\t\t: 200,\n\t\tclipWidth\t\t\t\t\t: 200,\n\t\tclipHeight\t\t\t\t\t: 110,\n\t\tringInset\t\t\t\t\t: 20,\n\t\tringWidth\t\t\t\t\t: 20,\n\t\t\n\t\tpointerWidth\t\t\t\t: 10,\n\t\tpointerTailLength\t\t\t: 5,\n\t\tpointerHeadLengthPercent\t: 0.9,\n\t\t\n\t\tminValue\t\t\t\t\t: 0,\n\t\tmaxValue\t\t\t\t\t: 10,\n\t\t\n\t\tminAngle\t\t\t\t\t: -90,\n\t\tmaxAngle\t\t\t\t\t: 90,\n\t\t\n\t\ttransitionMs\t\t\t\t: 750,\n\t\t\n\t\tmajorTicks\t\t\t\t\t: 5,\n\t\tlabelFormat\t\t\t\t\t: d3.format(',g'),\n\t\tlabelInset\t\t\t\t\t: 10,\n\t\t\n\t\tarcColorFn\t\t\t\t\t: d3.interpolateHsl(d3.rgb('#e8e2ca'), d3.rgb('#3e6c0a'))\n\t};\n\tvar range = undefined;\n\tvar r = undefined;\n\tvar pointerHeadLength = undefined;\n\tvar value = 0;\n\t\n\tvar svg = undefined;\n\tvar arc = undefined;\n\tvar scale = undefined;\n\tvar ticks = undefined;\n\tvar tickData = undefined;\n\tvar pointer = undefined;\n\n\tvar donut = d3.layout.pie();\n\t\n\tfunction deg2rad(deg) {\n\t\treturn deg * Math.PI / 180;\n\t}\n\t\n\tfunction newAngle(d) {\n\t\tvar ratio = scale(d);\n\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\treturn newAngle;\n\t}\n\t\n\tfunction configure(configuration) {\n\t\tvar prop = undefined;\n\t\tfor ( prop in configuration ) {\n\t\t\tconfig[prop] = configuration[prop];\n\t\t}\n\t\t\n\t\trange = config.maxAngle - config.minAngle;\n\t\tr = config.size / 2;\n\t\tpointerHeadLength = Math.round(r * config.pointerHeadLengthPercent);\n\n\t\t// a linear scale that maps domain values to a percent from 0..1\n\t\tscale = d3.scale.linear()\n\t\t\t.range([0,1])\n\t\t\t.domain([config.minValue, config.maxValue]);\n\t\t\t\n\t\tticks = scale.ticks(config.majorTicks);\n\t\ttickData = d3.range(config.majorTicks).map(function() {return 1/config.majorTicks;});\n\t\t\n\t\tarc = d3.svg.arc()\n\t\t\t.innerRadius(r - config.ringWidth - config.ringInset)\n\t\t\t.outerRadius(r - config.ringInset)\n\t\t\t.startAngle(function(d, i) {\n\t\t\t\tvar ratio = d * i;\n\t\t\t\treturn deg2rad(config.minAngle + (ratio * range));\n\t\t\t})\n\t\t\t.endAngle(function(d, i) {\n\t\t\t\tvar ratio = d * (i+1);\n\t\t\t\treturn deg2rad(config.minAngle + (ratio * range));\n\t\t\t});\n\t}\n\tthat.configure = configure;\n\t\n\tfunction centerTranslation() {\n\t\treturn 'translate('+r +','+ r +')';\n\t}\n\t\n\tfunction isRendered() {\n\t\treturn (svg !== undefined);\n\t}\n\tthat.isRendered = isRendered;\n\t\n\tfunction render(newValue) {\n\t\tsvg = d3.select(container)\n\t\t\t.append('svg:svg')\n\t\t\t\t.attr('class', 'gauge')\n\t\t\t\t.attr('width', config.clipWidth)\n\t\t\t\t.attr('height', config.clipHeight);\n\t\t\n\t\tvar centerTx = centerTranslation();\n\t\t\n\t\tvar arcs = svg.append('g')\n\t\t\t\t.attr('class', 'arc')\n\t\t\t\t.attr('transform', centerTx);\n\t\t\n\t\tarcs.selectAll('path')\n\t\t\t\t.data(tickData)\n\t\t\t.enter().append('path')\n\t\t\t\t.attr('fill', function(d, i) {\n\t\t\t\t\treturn config.arcColorFn(d * i);\n\t\t\t\t})\n\t\t\t\t.attr('d', arc);\n\t\t\n\t\tvar lg = svg.append('g')\n\t\t\t\t.attr('class', 'label')\n\t\t\t\t.attr('transform', centerTx);\n\t\tlg.selectAll('text')\n\t\t\t\t.data(ticks)\n\t\t\t.enter().append('text')\n\t\t\t\t.attr('transform', function(d) {\n\t\t\t\t\tvar ratio = scale(d);\n\t\t\t\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\t\t\t\treturn 'rotate(' +newAngle +') translate(0,' +(config.labelInset - r) +')';\n\t\t\t\t})\n\t\t\t\t.text(config.labelFormat);\n\n\t\tvar lineData = [ [config.pointerWidth / 2, 0], \n\t\t\t\t\t\t[0, -pointerHeadLength],\n\t\t\t\t\t\t[-(config.pointerWidth / 2), 0],\n\t\t\t\t\t\t[0, config.pointerTailLength],\n\t\t\t\t\t\t[config.pointerWidth / 2, 0] ];\n\t\tvar pointerLine = d3.svg.line().interpolate('monotone');\n\t\tvar pg = svg.append('g').data([lineData])\n\t\t\t\t.attr('class', 'pointer')\n\t\t\t\t.attr('transform', centerTx);\n\t\t\t\t\n\t\tpointer = pg.append('path')\n\t\t\t.attr('d', pointerLine/*function(d) { return pointerLine(d) +'Z';}*/ )\n\t\t\t.attr('transform', 'rotate(' +config.minAngle +')');\n\t\t\t\n\t\tupdate(newValue === undefined ? 0 : newValue);\n\t}\n\tthat.render = render;\n\t\n\tfunction update(newValue, newConfiguration) {\n\t\tif ( newConfiguration  !== undefined) {\n\t\t\tconfigure(newConfiguration);\n\t\t}\n\t\tvar ratio = scale(newValue);\n\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\tpointer.transition()\n\t\t\t.duration(config.transitionMs)\n\t\t\t.ease('elastic')\n\t\t\t.attr('transform', 'rotate(' +newAngle +')');\n\t}\n\tthat.update = update;\n\n\tconfigure(configuration);\n\t\n\treturn that;\n};\n</script>\n\n<script>\nfunction onDocumentReady() {\n\tvar powerGauge = gauge('#power-gauge', {\n\t\tsize: 300,\n\t\tclipWidth: 300,\n\t\tclipHeight: 300,\n\t\tringWidth: 60,\n\t\tmaxValue: 10,\n\t\ttransitionMs: 4000,\n\t});\n\tpowerGauge.render();\n\t\n\tfunction updateReadings() {\n\t\t// just pump in random data here...\n\t\tpowerGauge.update(Math.random() * 10);\n\t}\n\t\n\t// every few seconds update reading values\n\tupdateReadings();\n\tsetInterval(function() {\n\t\tupdateReadings();\n\t}, 5 * 1000);\n}\n\nif ( !window.isLoaded ) {\n\twindow.addEventListener(\"load\", function() {\n\t\tonDocumentReady();\n\t}, false);\n} else {\n\tonDocumentReady();\n}\n</script>\n</body>\n</html>\n","filenames":["LICENSE","README","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"faaac1a0ecbc124171cf","_score":0.32673007,"_source":{"userId":"WilliamQLiu","description":"D3 Transitions","created_at":"2014-11-17T20:27:13Z","updated_at":"2015-08-29T14:09:45Z","api":["d3.select","d3.scale.linear","d3.max","d3.svg.axis","d3.mouse"],"colors":["#ffa500","#008000","#000000"],"readme":"","code":"<!DOCTYPE html>\n<html>\n\n  <head>\n    <!-- Load D3 from site -->\n    <script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n\n    <!-- CSS (Styling) -->\n    <style type=\"text/css\">\n\n      body {\n        margin: 0;\n        font-family: sans-serif;\n        font-size: 11px;\n      }\n\n      .axis path, .axis line {\n        fill: none;\n        stroke: black;\n        shape-rendering: crispEdges;  /* Round any decimal pixels so it'll render nicely */\n      }\n\n      /*\n      //Can use CSS3 Transitions, but not for everything (e.g. change radius size)\n      circle:hover{\n        fill: green;\n      }\n      */\n\n    </style>\n  </head>\n\n  <body>\n    <!-- Begin Javascript -->\n    <script type=\"text/javascript\">\n      var w = window.innerWidth,\n          h = window.innerHeight,\n          margin = { top: 40, right: 20, bottom: 20, left: 40 },\n          radius = 6;\n\n      var svg = d3.select(\"body\").append(\"svg\").attr({\n        width: w,\n        height: h\n      });\n\n      var dataset = [\n        { x: 100, y: 110 },\n        { x: 83, y: 43 },\n        { x: 92, y: 28 },\n        { x: 49, y: 74 },\n        { x: 51, y: 10 },\n        { x: 25, y: 98 },\n        { x: 77, y: 30 },\n        { x: 20, y: 83 },\n        { x: 11, y: 63 },\n        { x:  4, y: 55 },\n        { x:  0, y:  0 },\n        { x: 85, y: 100 },\n        { x: 60, y: 40 },\n        { x: 70, y: 80 },\n        { x: 10, y: 20 },\n        { x: 40, y: 50 },\n        { x: 25, y: 31 }\n      ];\n\n      // We're passing in a function in d3.max to tell it what we're maxing (x value)\n      var xScale = d3.scale.linear()\n          .domain([0, d3.max(dataset, function (d) { return d.x + 10; })])\n          .range([margin.left, w - margin.right]);  // Set margins for x specific\n\n      // We're passing in a function in d3.max to tell it what we're maxing (y value)\n      var yScale = d3.scale.linear()\n          .domain([0, d3.max(dataset, function (d) { return d.y + 10; })])\n          .range([margin.top, h - margin.bottom]);  // Set margins for y specific\n\n      // Add a X and Y Axis (Note: orient means the direction that ticks go, not position)\n      var xAxis = d3.svg.axis().scale(xScale).orient(\"top\");\n      var yAxis = d3.svg.axis().scale(yScale).orient(\"left\");\n\n      // New circles will start at 0,0\n      var circleInitialAttrs = {\n          cx: xScale(0),\n          cy: yScale(0),\n          r: 1\n      };\n\n      // Sets circles attributes\n      var circleAttrs = {\n          cx: function(d) { return xScale(d.x); },\n          cy: function(d) { return yScale(d.y); },\n          r: radius\n      };\n\n      // Adds X-Axis as a 'g' element\n      svg.append(\"g\").attr({\n        \"class\": \"axis\",  // Give class so we can style it\n        transform: \"translate(\" + [0, margin.top] + \")\"  // Translate just moves it down into position (or will be on top)\n      }).call(xAxis);  // Call the xAxis function on the group\n\n      // Adds Y-Axis as a 'g' element\n      svg.append(\"g\").attr({\n        \"class\": \"axis\",\n        transform: \"translate(\" + [margin.left, 0] + \")\"\n      }).call(yAxis);  // Call the yAxis function on the group\n\n      var circles = svg.selectAll(\"circle\")\n          .data(dataset)\n          .enter()\n          .append(\"circle\")\n          .attr(circleInitialAttrs)  // Get attributes from circleInitialAttrs var\n          .on(\"mouseover\", handleMouseOver)\n          .on(\"mouseout\", handleMouseOut);\n\n      circles.transition()  // Gives the fly out from the center effect\n          .delay(function (d, i){\n              return i * 100;  // Gives a slight delay with 100 ms spacing\n          })\n          .duration(1000)\n          .ease(\"elastic\")\n          .attr(circleAttrs);\n\n      // On Click, we want to add data to the array and chart\n      svg.on(\"click\", function() {\n          var coords = d3.mouse(this);\n\n          // Normally we go from data to pixels, but here we're doing pixels to data\n          var newData= {\n            x: Math.round( xScale.invert(coords[0])),  // Takes the pixel number to convert to number\n            y: Math.round( yScale.invert(coords[1]))\n          };\n\n          dataset.push(newData);   // Push data to our array\n\n          // When adding new items, goes from 0,0 and transition to place\n          var c = svg.selectAll(\"circle\")  // For new circle, go through the update process\n            .data(dataset)\n            .enter()\n            .append(\"circle\")\n            .attr(circleInitialAttrs)\n            .on(\"mouseover\", handleMouseOver)\n            .on(\"mouseout\", handleMouseOut);\n\n          c.transition()\n              .duration(1000)  // Set how long it takes\n              .ease(\"elastic\")  // Bounces a bit\n              .attr(circleAttrs);\n      })\n\n      // Create Event Handlers for mouse\n      function handleMouseOver(d, i) {  // Add interactivity\n\n            // Use D3 to select element, change color and size\n            d3.select(this).attr({\n              fill: \"orange\",\n              r: radius * 2\n            });\n\n            // Specify where to put label of text\n            svg.append(\"text\").attr({\n               id: \"t\" + d.x + \"-\" + d.y + \"-\" + i,  // Create an id for text so we can select it later for removing on mouseout\n                x: function() { return xScale(d.x) - 30; },\n                y: function() { return yScale(d.y) - 15; }\n            })\n            .text(function() {\n              return [d.x, d.y];  // Value of the text\n            });\n          }\n\n      function handleMouseOut(d, i) {\n            // Use D3 to select element, change color back to normal\n            d3.select(this).attr({\n              fill: \"black\",\n              r: radius\n            });\n\n            // Select text by id and then remove\n            d3.select(\"#t\" + d.x + \"-\" + d.y + \"-\" + i).remove();  // Remove text location\n          }\n\n    </script>\n  </body>\n</html>","filenames":["index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"2d4e84460d5f5df9c0ff","_score":0.32651696,"_source":{"userId":"jdarling","description":"D3 MindMap","created_at":"2014-05-22T15:37:22Z","updated_at":"2015-08-29T14:01:43Z","api":["d3.selectAll","d3.select","d3.layout.tree","d3.svg.diagonal","d3.json","d3.xml"],"colors":["#ff0000","#d2b48c","#000000","#ff3399","#0000cc","#777777","#336699","#1181b8","#666666","#999999","#ffffff","#cccccc","#008000","#b0c4de","#4682b4","#0000ff"],"readme":"    * Displays a mindmap type layout.\n    * Loads basic information from FreeMind Mind Map format (*.mm).\n    * Shows moving nodes from one side to another, adding nodes, and switching out data.\n    * The basics are all in place, needs cleanup and a way to edit node text.\n      * Need a way to select a node to edit, maybe change click from toggle to select?\n      * Need a way to update the node text, once selected start typing and you get an edit to change the text?\n    * You can expand and collapse the nodes by clcking on them.\n","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"style.css\"/>\n    <script type=\"text/javascript\" src=\"http://d3js.org/d3.v3.min.js\"></script>\n    <script type=\"text/javascript\" src=\"mousetrap.js\"></script>\n    <style type=\"text/css\">\n      .node circle {\n        cursor: pointer;\n        fill: #fff;\n        stroke: steelblue;\n        stroke-width: 1.5px;\n      }\n\n      .node text {\n        font-size: 11px;\n      }\n\n      path.link {\n        fill: none;\n        stroke: #ccc;\n        stroke-width: 1.5px;\n      }\n      \n      .node.selected circle {\n        fill: green;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"body\">\n      <div id=\"toolbar\">\n        <button onclick=\"createNew(); return false;\">New</button>\n        <button onclick=\"loadFreeMind('test.mm'); return false;\">FreeMind (test.mm)</button>\n        <button onclick=\"loadJSON('flare.json'); return false;\">Flare (flare.json)</button>\n        <button onclick=\"loadJSON('data.json'); return false;\">JSON (test.json)</button>\n        <button onclick=\"addNodes('right'); return false;\">Add nodes right</button>\n        <button onclick=\"addNodes('left'); return false;\">Add nodes left</button>\n        <button onclick=\"moveNodes('right', 'left'); return false;\">Move right to left</button>\n        <button onclick=\"moveNodes('left', 'right'); return false;\">Move left to right</button>\n        <button onclick=\"setConnector('diagonal'); return false;\">Diagonal connector</button>\n        <button onclick=\"setConnector('elbow'); return false;\">Elbow connector</button>\n      </div>\n      <div id=\"footer\">[Enter] Change name, [Left] Move select left, [Right] Move selection right, [Up] Move selection up, [Down] Move selection down, [Ins] Add new node,  [Del] Delete selected node</div>\n    </div>\n    <script type=\"text/javascript\">\n/*\n// Add a new item\nroot.right.push({name: 'bar'}, {name: 'none'}, {name: 'some'}, {name: 'value'});\nupdate(root);\n\n// Move from the first to the last\nroot.right.push(root.right.shift());\nupdate(root);\n\n// Move from right to left\nvar tmp = root.right.shift();\ntmp.position = 'left';\nroot.left.push(tmp);\nupdate(root);\n\n// Move from left to right\nvar tmp = root.left.shift();\ntmp.position = 'right';\nroot.right.push(tmp);\nupdate(root);\n\n// Switch connector type\nconnector = diagonal;\nupdate(root);\n\n*/\n\n      var m = [20, 120, 20, 120],\n          //w = 1280 - m[1] - m[3],\n          w = 900 - m[1] - m[3],\n          h = 500 - m[0] - m[2],\n          i = 0,\n          root;\n      \n      var getDirection = function(data){\n        if(!data){\n          return 'root';\n        }\n        if(data.position){\n          return data.position;\n        }\n        return getDirection(data.parent);\n      };\n      \n      var selectNode = function(target){\n        if(target){\n          var sel = d3.selectAll('#body svg .node').filter(function(d){return d.id==target.id})[0][0];\n          if(sel){\n            select(sel);\n          }\n        }\n      };\n      \n      Mousetrap.bind('left', function(){\n        // left key pressed\n        var selection = d3.select(\".node.selected\")[0][0];\n        if(selection){\n          var data = selection.__data__;\n          var dir = getDirection(data);\n          switch(dir){\n            case('right'):\n            case('root'):\n              selectNode(data.parent || data.left[0]);\n              break;\n            case('left'):\n              selectNode((data.children||[])[0]);\n              break;\n            default:\n              break;\n          }\n        }\n      });\n      Mousetrap.bind('right', function(){\n        // right key pressed\n        var selection = d3.select(\".node.selected\")[0][0];\n        if(selection){\n          var data = selection.__data__;\n          var dir = getDirection(data);\n          switch(dir){\n            case('left'):\n            case('root'):\n              selectNode(data.parent || data.right[0]);\n              break;\n            case('right'):\n              selectNode((data.children||[])[0]);\n              break;\n            default:\n              break;\n          }\n        }\n      });\n      Mousetrap.bind('up', function(){\n        // up key pressed\n        var selection = d3.select(\".node.selected\")[0][0];\n        if(selection){\n          var data = selection.__data__;\n          var dir = getDirection(data);\n          switch(dir){\n            case('root'):\n              break;\n            case('left'):\n            case('right'):\n              var p = data.parent, nl = p.children || [], i=1;\n              if(p[dir]){\n                nl = p[dir];\n              }\n              l = nl.length;\n              for(; i<l; i++){\n                if(nl[i].id === data.id){\n                  selectNode(nl[i-1]);\n                  break;\n                }\n              }\n              break;\n          }\n        }\n        return false;\n      });\n      Mousetrap.bind('down', function(){\n        // down key pressed\n        // up key pressed\n        var selection = d3.select(\".node.selected\")[0][0];\n        if(selection){\n          var data = selection.__data__;\n          var dir = getDirection(data);\n          switch(dir){\n            case('root'):\n              break;\n            case('left'):\n            case('right'):\n              var p = data.parent, nl = p.children || [], i=0;\n              if(p[dir]){\n                nl = p[dir];\n              }\n              l = nl.length;\n              for(; i<l-1; i++){\n                if(nl[i].id === data.id){\n                  selectNode(nl[i+1]);\n                  break;\n                }\n              }\n              break;\n          }\n        }\n        return false;\n      });\n      \n      Mousetrap.bind('ins', function(){\n        var selection = d3.select(\".node.selected\")[0][0];\n        if(selection){\n          var data = selection.__data__;\n          var dir = getDirection(data);\n          var name = prompt('New name');\n          if(name){\n            if(dir==='root'){\n              dir = data.right.length>data.left.length?'left':'right';\n            }\n            var cl = data[dir] || data.children || data._children;\n            if(!cl){\n              cl = data.children = [];\n            }\n            cl.push({name: name, position: dir});\n            update(root);\n          }\n        }\n      });\n      \n      Mousetrap.bind('del', function(){\n        var selection = d3.select(\".node.selected\")[0][0];\n        if(selection){\n          var data = selection.__data__;\n          var dir = getDirection(data);\n          if(dir==='root'){\n            alert('Can\\'t delete root');\n            return;\n          }\n          var cl = data.parent[dir] || data.parent.children;\n          if(!cl){\n            alert('Could not locate children');\n            return;\n          }\n          var i = 0, l = cl.length;\n          for(; i<l; i++){\n            if(cl[i].id === data.id){\n              if(confirm('Sure you want to delete '+data.name+'?') === true){\n                cl.splice(i, 1);\n              }\n              break;\n            }\n          }\n          selectNode(root);\n          update(root);\n        }\n      });\n      \n      Mousetrap.bind('enter', function(){\n        var selection = d3.select(\".node.selected\")[0][0];\n        if(selection){\n          var data = selection.__data__;\n          data.name = prompt('New text:', data.name) || data.name;\n          update(root);\n        }\n      });\n      \n      var addNodes = function(dir){\n        root[dir].push({name: 'bar', position: dir}, {name: 'none', position: dir}, {name: 'some', position: dir}, {name: 'value', position: dir});\n        update(root);\n      };\n      \n      var moveNodes = function(from, to){\n        var tmp = root[from].shift();\n        tmp.position = to;\n        root[to].push(tmp);\n        update(root);\n      };\n      \n      var setConnector = function(type){\n        connector = window[type];\n        update(root);\n      };\n      \n      var select = function(node){\n        // Find previously selected, unselect\n        d3.select(\".selected\").classed(\"selected\", false);\n        // Select current item\n        d3.select(node).classed(\"selected\", true);\n      };\n      \n      var createNew = function(){\n        root = {name: 'Root', children: [], left: [], right: []};\n        update(root, true);\n        selectNode(root);\n      };\n      \n      var handleClick = function(d, index){\n        select(this);\n        update(d);\n      };\n      \n      var tree = d3.layout.tree()\n          .size([h, w]);\n\n      var calcLeft = function(d){\n        var l = d.y;\n        if(d.position==='left'){\n          l = (d.y)-w/2;\n          l = (w/2) + l;\n        }\n        return {x : d.x, y : l};\n      };\n\n      var diagonal = d3.svg.diagonal()\n          .projection(function(d) { return [d.y, d.x]; });\n      var elbow = function (d, i){\n            var source = calcLeft(d.source);\n            var target = calcLeft(d.target);\n            var hy = (target.y-source.y)/2;\n            return \"M\" + source.y + \",\" + source.x\n                   + \"H\" + (source.y+hy)\n                   + \"V\" + target.x + \"H\" + target.y;\n          };\n      var connector = elbow;\n\n      var vis = d3.select(\"#body\")\n        .append(\"svg:svg\")\n          .attr(\"width\", w\n          + m[1] + m[3])\n          .attr(\"height\", h + m[0] + m[2])\n        .append(\"svg:g\")\n          //.attr(\"transform\", \"translate(\" + m[3] + \",\" + m[0] + \")\")\n          .attr(\"transform\", \"translate(\" + (w/2+m[3]) + \",\" + m[0] + \")\")\n          ;\n\n//*\n      var loadJSON = function(fileName){\n        //d3.json(\"/data/data.json\", function(json) {\n        d3.json(fileName, function(json) {\n          var i=0, l=json.children.length;\n          window.data = root = json;\n          root.x0 = h / 2;\n          root.y0 = 0;\n          \n          json.left = [];\n          json.right = [];\n          for(; i<l; i++){\n            if(i%2){\n              json.left.push(json.children[i]);\n              json.children[i].position = 'left';\n            }else{\n              json.right.push(json.children[i]);\n              json.children[i].position = 'right';\n            }\n          }\n\n          update(root, true);\n          selectNode(root);\n        });\n      };\n//*/\n\n//*\n      var loadFreeMind = function(fileName){\n        d3.xml(fileName, 'application/xml', function(err, xml){\n          // Changes XML to JSON\n          function xmlToJson(xml) {\n            \n            // Create the return object\n            var obj = {};\n\n            if (xml.nodeType == 1) { // element\n              // do attributes\n              if (xml.attributes.length > 0) {\n              obj[\"@attributes\"] = {};\n                for (var j = 0; j < xml.attributes.length; j++) {\n                  var attribute = xml.attributes.item(j);\n                  obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\n                }\n              }\n            } else if (xml.nodeType == 3) { // text\n              obj = xml.nodeValue;\n            }\n\n            // do children\n            if (xml.hasChildNodes()) {\n              for(var i = 0; i < xml.childNodes.length; i++) {\n                var item = xml.childNodes.item(i);\n                var nodeName = item.nodeName;\n                if (typeof(obj[nodeName]) == \"undefined\") {\n                  obj[nodeName] = xmlToJson(item);\n                } else {\n                  if (typeof(obj[nodeName].push) == \"undefined\") {\n                    var old = obj[nodeName];\n                    obj[nodeName] = [];\n                    obj[nodeName].push(old);\n                  }\n                  obj[nodeName].push(xmlToJson(item));\n                }\n              }\n            }\n            return obj;\n          };\n          var js = xmlToJson(xml);\n          var data = js.map.node;\n          var parseData = function(data, direction){\n            var key, i, l, dir = direction, node = {}, child;\n            for(key in data['@attributes']){\n              node[key.toLowerCase()] = data['@attributes'][key];\n            }\n            node.direction = node.direction || dir;\n            l = (data.node || []).length;\n            if(l){\n              node.children = [];\n              for(i=0; i<l; i++){\n                dir = data.node[i]['@attributes'].POSITION || dir;\n                child = parseData(data.node[i], {}, dir);\n                (node[dir] = node[dir] || []).push(child);\n                node.children.push(child);\n              }\n            }\n            return node;\n          };\n          root = parseData(data, 'right');\n          root.x0 = h / 2;\n          root.y0 = w / 2;\n          update(root, true);\n          selectNode(root);\n        });\n      };\n//*/\n\n      var toArray = function(item, arr, d){\n        arr = arr || [];\n        var dr = d || 1;\n        var i = 0, l = item.children?item.children.length:0;\n        arr.push(item);\n        if(item.position && item.position==='left'){\n          dr = -1;\n        }\n        item.y = dr * item.y;\n        for(; i < l; i++){\n          toArray(item.children[i], arr, dr);\n        }\n        return arr;\n      };\n\n      function update(source, slow) {\n        var duration = (d3.event && d3.event.altKey) || slow ? 1000 : 100;\n\n        // Compute the new tree layout.\n        var nodesLeft = tree\n          .size([h, (w/2)-20])\n          .children(function(d){\n            return (d.depth===0)?d.left:d.children;\n          })\n          .nodes(root)\n          .reverse();\n        var nodesRight = tree\n          .size([h, w/2])\n          .children(function(d){\n            return (d.depth===0)?d.right:d.children;\n          })\n          .nodes(root)\n          .reverse();\n        root.children = root.left.concat(root.right);\n        root._children = null;\n        var nodes = toArray(root);\n\n        // Normalize for fixed-depth.\n        //nodes.forEach(function(d) { d.y = d.depth * 180; });\n\n        // Update the nodes…\n        var node = vis.selectAll(\"g.node\")\n            .data(nodes, function(d) { return d.id || (d.id = ++i); });\n\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node.enter().append(\"svg:g\")\n            .attr(\"class\", function(d){ return d.selected?\"node selected\":\"node\"; })\n            .attr(\"transform\", function(d) { return \"translate(\" + source.y0 + \",\" + source.x0 + \")\"; })\n            .on(\"click\", handleClick);\n\n        nodeEnter.append(\"svg:circle\")\n            .attr(\"r\", 1e-6);\n            //.style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n        nodeEnter.append(\"svg:text\")\n            .attr(\"x\", function(d) { return d.children || d._children ? -10 : 10; })\n//            .attr(\"dy\", \".35em\")\n//            .attr(\"text-anchor\", function(d) { return d.children || d._children ? \"end\" : \"start\"; })\n            .attr(\"dy\", 14)\n            .attr(\"text-anchor\", \"middle\")\n            .text(function(d) { return (d.name || d.text); })\n            .style(\"fill-opacity\", 1);\n\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition()\n            //.attr(\"class\", function(d){ return d.selected?\"node selected\":\"node\"; })\n            .duration(duration)\n            .attr(\"transform\", function(d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; });\n\n        nodeUpdate.select(\"text\")\n          .text(function(d) { return (d.name || d.text); });\n            \n        nodeUpdate.select(\"circle\")\n            .attr(\"r\", 4.5);\n            //.style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n/*\n        nodeUpdate.select(\"text\")\n            .attr(\"dy\", 14)\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"fill-opacity\", 1);\n*/\n\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit = node.exit().transition()\n            .duration(duration)\n            .attr(\"transform\", function(d) { return \"translate(\" + source.y + \",\" + source.x + \")\"; })\n            .remove();\n\n        nodeExit.select(\"circle\")\n            .attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\")\n            .style(\"fill-opacity\", 1e-6);\n\n        // Update the links…\n        var link = vis.selectAll(\"path.link\")\n            .data(tree.links(nodes), function(d) { return d.target.id; });\n\n        // Enter any new links at the parent's previous position.\n        link.enter().insert(\"svg:path\", \"g\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", function(d) {\n              var o = {x: source.x0, y: source.y0};\n              return connector({source: o, target: o});\n            })\n          .transition()\n            .duration(duration)\n            .attr(\"d\", connector);\n\n        // Transition links to their new position.\n        link.transition()\n            .duration(duration)\n            .attr(\"d\", connector);\n\n        // Transition exiting nodes to the parent's new position.\n        link.exit().transition()\n            .duration(duration)\n            .attr(\"d\", function(d) {\n              var o = {x: source.x, y: source.y};\n              return connector({source: o, target: o});\n            })\n            .remove();\n\n        // Stash the old positions for transition.\n        nodes.forEach(function(d) {\n          d.x0 = d.x;\n          d.y0 = d.y;\n        });\n      }\n\n      // Toggle children.\n      function toggle(d) {\n        if (d.children) {\n          d._children = d.children;\n          d.children = null;\n        } else {\n          d.children = d._children;\n          d._children = null;\n        }\n      }\n      \n      loadJSON('data.json');\n    </script>\n  </body>\n</html>\n","filenames":["data.json","flare.json","index.html","mousetrap.js","readme.md","style.css","test.mm"]}},{"_index":"blockbuilder","_type":"blocks","_id":"5408146","_score":0.32640696,"_source":{"userId":"ericcitaire","description":"D3 JezzBall","created_at":"2013-04-17T22:03:57Z","updated_at":"2016-01-13T01:27:02Z","api":["d3.selectAll","d3.select","d3.range","d3.mouse","d3.event.preventDefault","d3.layout.force"],"colors":["#540814","#000000","#dddddd","#999999","#ff0000","#333333","#0000ff","#ffffff","#d2b48c"],"readme":"A clone of [JezzBall](http://en.wikipedia.org/wiki/JezzBall).\n\nThe goal is to fill at least 75% of the room. Click on any corner button or use mouse wheel to change the orientation of the wall builder. For more detailed instructions, see [JezzBall Walkthrough/FAQ page on IGN](http://uk.ign.com/faqs/2001/jezzball-walkthroughfaq-223013).\n\nEnjoy ! :)\n","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>D3 JezzBall</title>\n<style>\n\nbody {\n  padding: 0px;\n  margin: 0px;\n}\n\nrect {\n  fill: none;\n  pointer-events: all;\n}\n\n.smallTextStroke {\n  font-family: sans-serif;\n  font-size: 12px;\n  fill: none;\n  stroke: black;\n  stroke-width: 1px;\n}\n.smallText {\n  font-family: sans-serif;\n  font-size: 12px;\n  fill: white;\n}\n\n.bigTextStroke {\n  font-family: sans-serif;\n  font-size: 24px;\n  font-weight: bold;\n  fill: none;\n  stroke: black;\n  stroke-width: 4px;\n}\n\n.bigText {\n  font-family: sans-serif;\n  font-size: 24px;\n  font-weight: bold;\n  fill: white;\n}\n\n.cell {\n}\n\n.cell.wall {\n  fill: #000;\n  stroke: #000;\n}\n\n.cell.air {\n  fill: #ddd;\n  stroke: #999;\n}\n\n.cell.blue {\n  stroke: blue;\n  stroke-opacity: .8;\n}\n\n.cell.red {\n  stroke: red;\n  stroke-opacity: .8;\n}\n\n.ball {\n  fill: #f00;\n  fill-opacity: 1;\n  stroke: #333;\n  stroke-opacity: .5;\n}\n\n.builder.head {\n  stroke: #333;\n  stroke-opacity: .5;\n}\n\n.builder.blue {\n  fill: blue;\n}\n\n.builder.red {\n  fill: red;\n}\n\n.builder.tail {\n  fill-opacity: .4;\n}\n\n.switch {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  padding: 0px;\n  width: 20px;\n  height: 20px;\n}\n\n#nextLevelButton, #playAgainButton {\n  position: absolute;\n  width: 100px;\n  visibility: hidden;\n}\n\n</style>\n<body>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<form>\n  <input id=\"switchOrientationButton1\" class=\"switch\" type=\"button\" value=\"V\" />\n  <input id=\"switchOrientationButton2\" class=\"switch\" type=\"button\" value=\"V\" />\n  <input id=\"switchOrientationButton3\" class=\"switch\" type=\"button\" value=\"V\" />\n  <input id=\"switchOrientationButton4\" class=\"switch\" type=\"button\" value=\"V\" />\n  <input id=\"nextLevelButton\" type=\"button\" value=\"Next level\" />\n  <input id=\"playAgainButton\" type=\"button\" value=\"Play again\" />\n</form>\n<script type=\"text/javascript\" src=\"jezzball.js\"></script>\n","filenames":[".gitignore","README.md","block.html","index.html","jezzball.js","thumbnail.png"],"thumb":"21fb3891cb269396dfb03c3a844a7a8126bc91ed"}},{"_index":"blockbuilder","_type":"blocks","_id":"1300016","_score":0.32529566,"_source":{"userId":"mbostock","description":"Hello, D3!","created_at":"2011-10-19T23:49:21Z","updated_at":"2016-03-13T07:19:52Z","api":["d3.select"],"colors":[],"readme":"","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<body>\n<script src=\"//d3js.org/d3.v3.min.js\"></script>\n<script>\n\nd3.select(\"body\").append(\"span\")\n    .text(\"Hello, world!\");\n\n</script>\n","filenames":[".block","index.html","thumbnail.png"],"thumb":"b148dfbed9c1fb87330ab20b7082c33e05b777bd"}},{"_index":"blockbuilder","_type":"blocks","_id":"4f4683093e415cb60176","_score":0.32493883,"_source":{"userId":"hironow","description":"D3 Test","created_at":"2015-08-25T14:18:38Z","updated_at":"2015-08-29T14:28:06Z","api":["d3.select"],"colors":["#333333"],"readme":"","code":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <style>\n    rect {\n        fill: #333;\n    }\n    </style>\n</head>\n<body>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js\"></script>\n    <script>\n    var svg = d3.select('body').append('svg')\n        .attr('width', 500)\n        .attr('height', 500);\n\n    var svg.select(this).selctAll('rect')\n        .data([1, 2, 3])\n        .enter().append('rect');\n    </script>\n</body>\n</html>\n","filenames":["index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"3a387f8041e1dc31d718","_score":0.32488844,"_source":{"userId":"Rico3734","description":"D3 ruler","created_at":"2016-02-18T16:39:17Z","updated_at":"2016-02-18T16:39:17Z","api":["d3.select"],"colors":["#a72d1a","#5db9e3"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width:100%; height: 100% }\n  </style>\n</head>\n\n<body>\n  <script>\n    // Feel free to change or delete any of the code you see!\n    var svg = d3.select(\"body\").append(\"svg\")\n    svg.append(\"rect\")\n      .attr({x: 100, y: 10, width: 700, height: 480})\n      .style({ fill: \"#a72d1a\"})\n      .transition().duration(3000).ease(\"bounce\")\n      .style({ fill: \"#5db9e3\"})\n\n    console.log(\"you are now rocking with d3\", d3);\n  </script>\n</body>\n","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"bc208f5266e4ffd5484a","_score":0.32488844,"_source":{"userId":"diskmanti","description":"D3 - AmaTest","created_at":"2016-03-03T13:52:52Z","updated_at":"2016-03-03T13:52:52Z","api":["d3.range","d3.select"],"colors":["#a72d1a","#5db9e3"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width:100%; height: 100% }\n  </style>\n</head>\n\n<body>\n  <script>\n    // Feel free to change or delete any of the code you see!\n    var svg = d3.select(\"body\").append(\"svg\")\n    svg.append(\"rect\")\n      .attr({x: 100, y: 10, width: 700, height: 480})\n      .style({ fill: \"#a72d1a\"})\n      .transition().duration(3000).ease(\"bounce\")\n      .style({ fill: \"#5db9e3\"})\n\n    console.log(\"you are now rocking with d3\", d3);\n  </script>\n</body>\n","filenames":["README.md","d3.geo.tile.min.js","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"a36a5c86ea905ac72229","_score":0.32472613,"_source":{"userId":"abhishekpolavarapu","description":"D3 test","created_at":"2016-01-27T00:47:18Z","updated_at":"2016-01-27T00:47:51Z","api":["d3.select"],"colors":["#008080"],"readme":"","code":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>D3 test</title>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style type=\"text/css\">\n\t\tdiv.bar{\n\t\tdisplay: inline-block;\n            width: 20px;\n            height: 75px;\n\t\t\tmargin-right: 2px;\n            background-color: teal;\"></div>\n\t\t\t}\n\t\t\t</style>\n    </head>\n    <body>\n      <h1> Abhishek Polavarapu </h1>\n        <script type=\"text/javascript\">\n\tvar dataset = [ 25, 7, 5, 26, 11, 8, 25, 14, 23, 19,\n                14, 11, 22, 29, 11, 13, 12, 17, 18, 10,\n                24, 18, 25, 9, 35 ];\n\nd3.select(\"body\").selectAll(\"div\")\n    .data(dataset)\n    .enter()\n    .append(\"div\")\n    .attr(\"class\", \"bar\")\n\t.style(\"height\", function(d) {\n    var barHeight = d * 5;\n    return barHeight + \"px\"\n\t;\n});\n        </script>\n    </body>\n</html>   \n","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"180d6a4c34b800cd2f27","_score":0.3246475,"_source":{"userId":"nikhilkumar80","description":"d3-chap01","created_at":"2016-01-26T08:59:07Z","updated_at":"2016-04-15T23:35:17Z","api":["d3.selectAll"],"colors":["#ff0000"],"readme":"# Hello World","code":"<html>\n  <head>\n    <script src=\"//d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n  </head>\n  <body>\n    <ul>\n      <li>Item 01</li>\n      <li>Item 02</li>\n      <li>Item 03</li>\n      <li>Item 04</li>\n      <li>Item 05</li>\n    </ul>\n    <script>\n      d3.selectAll('li').style('border', \"red\");\n    </script>\n  </body>\n</html>","filenames":[".block","README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"25fa3e51da9a1ac22e02","_score":0.32463223,"_source":{"userId":"anatolyg","description":"d3 mapping","created_at":"2015-10-26T22:53:55Z","updated_at":"2015-10-26T22:53:55Z","api":["d3.select"],"colors":["#a72d1a","#5db9e3"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width: 100%; height: 100%; }\n  </style>\n</head>\n\n<body>\n  <script>\n    var margin = {top: 20, right: 10, bottom: 20, left: 10};\n    var width = 960 - margin.left - margin.right;\n    var height = 500 - margin.top - margin.bottom;\n    var svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // Feel free to change or delete any of the code you see!\n    svg.append(\"rect\")\n      .attr({x: 100, y: 100, width: width-200, height: height-200})\n      .style({ fill: \"#a72d1a\"})\n      .transition().duration(3000).ease(\"bounce\")\n      .style({ fill: \"#5db9e3\"})\n    \n    console.log(\"you are now rocking with d3\", d3);\n  </script>\n</body>\n","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"6110163","_score":0.32455426,"_source":{"userId":"tomkelly000","description":"d3-dropdownmenu","created_at":"2013-07-30T04:09:15Z","updated_at":"2015-12-20T09:48:52Z","api":["d3.select","d3.selectAll","d3.element.dropdownmenu"],"colors":["#ffffff","#dddddd","#eeeeee","#eeee33","#cccccc","#cccc33","#0000ff"],"readme":"","code":"<!doctype html>\n<html>\n  <head>\n\t\t<title>\n\t\t\td3-dropdownmenu\n\t\t</title>\n\t\t<!-- dependencies -->\n\t\t<script src='http://d3js.org/d3.v3.min.js'></script>\n\t\t<script src='d3-dropdownmenu.js'></script>\n\n\t\t<script>\n\t\tfunction applyStyling(root) {\n\t\t\troot.nodes() \n\t\t\t\t.style('border', '1px solid #ddd')\n\t\t\t\t.style('padding', '4px 8px')\n\t\t\t\t.style('background', '#eee')\n\t\t\t\t.style('width', '100px')\n\t\t\t\t.on('mouseenter', function() {\n\t\t\t\t\td3.select(this).transition() // 'this' is a DOM element\n\t\t\t\t\t\t.style('background', '#ee3')\n\t\t\t\t})\n\t\t\t\t.on('mouseleave', function() {\n\t\t\t\t\td3.select(this).transition()\n\t\t\t\t\t\t.style('background', '#eee')\n\t\t\t\t})\n\n\t\t\troot.childNodes() // make top level a little different\n\t\t\t\t.style('background', '#ccc')\n\t\t\t\t.style('width', '75px')\n\t\t\t\t.on('mouseenter', function() {\n\t\t\t\t\td3.select(this).transition()\n\t\t\t\t\t\t.style('background', '#cc3')\n\t\t\t\t})\n\t\t\t\t.on('mouseleave', function() {\n\t\t\t\t\td3.select(this).transition()\n\t\t\t\t\t\t.style('background', '#ccc')\n\t\t\t\t})\n\t\t}\n\t\t</script>\n\t</head>\n\t<body>\n\t\t<div id='demo'></div>\n\t\t<script>\n\t\t\td3.element.dropdownmenu('#demo')\n\t\t\t\t.add({\n\t\t\t\t\t'Option 1' : {\n\t\t\t\t\t\t'0' : {\n\t\t\t\t\t\t\t'a' : {\n\t\t\t\t\t\t\t\t'i' : null,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t'Option 2' : {\n\t\t\t\t\t\t'0' : null,\n\t\t\t\t\t\t'1' : null,\n\t\t\t\t\t},\n\t\t\t\t\t'Option 3' : {\n\t\t\t\t\t\t'0' : null,\n\t\t\t\t\t\t'1' : null,\n\t\t\t\t\t\t'<span id=\"option3-2\">2</span>' : null,\n\t\t\t\t\t},\n\t\t\t\t\t'Option 4' : {\n\t\t\t\t\t\t'0' : {\n\t\t\t\t\t\t\t'a' : null,\n\t\t\t\t\t\t\t'b' : null,\n\t\t\t\t\t\t\t'c' : null,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t'1' : null,\n\t\t\t\t\t\t'2' : null,\n\t\t\t\t\t\t'3' : null,\n\t\t\t\t\t},\n\t\t\t\t\t'<a href=\"#\">Test Link</a>' : {\n\t\t\t\t\t\t'<a href=\"#\">Child Link</a>' : null,\n\t\t\t\t\t},\n\t\t\t\t\t'Images' : {\n\t\t\t\t\t\t'<img src=\"img1.jpg\" width=\"100px\" height=\"100px\"/>' : null,\n\t\t\t\t\t\t'<img src=\"img2.jpg\" width=\"100px\" height=\"100px\"/>' : null,\n\t\t\t\t\t\t'<img src=\"img3.jpg\" width=\"100px\" height=\"100px\"/>' : null,\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.show() // basic menu has been created\n\t\t\t\t// example of tree traversal\n\t\t\t\t.firstChildNode() // Option 1\n\t\t\t\t.nextSiblingNode() // Option 2\n\t\t\t\t.lastChildNode() // 1\n\t\t\t\t.add({\n\t\t\t\t\t'New Option 1' : null,\n\t\t\t\t\t'New Option 2' : null,\n\t\t\t\t})\n\t\t\t\t.add({\n\t\t\t\t\t'New Option 3' : null,\n\t\t\t\t})\n\t\t\t\t.lastChildNode()\n\t\t\t\t.add({\n\t\t\t\t\t'Option 2.1.3.A' : null,\n\t\t\t\t\t'Option 2.1.3.B' : null,\n\t\t\t\t})\n\t\t\t\t.root() // get back to the root\n\t\t\t\t// and use d3 methods as well\n\t\t\t\t.call(function(root) {\n\t\t\t\t\troot.select('#option3-2').style('color', 'blue')\n\t\t\t\t})\n\t\t\t\t.call(applyStyling) // defined in header\n\t\t\t\t.call(function(root) {\n\t\t\t\t\troot.childLink().horizontal() // make top level horizontal\n\t\t\t\t})\n\t\t\t\t.call(function(root) {\n\t\t\t\t\tvar option = root.firstChildNode();\n\t\t\t\t\tfor (var i = 0; option != null; option = option.firstChildNode()) {\n\t\t\t\t\t\toption.style('color', '#0' + (i%10) + (i%10));\n\t\t\t\t\t\ti+=3;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t// center it\n\t\t\t\t.call(function(root) {\n\t\t\t\t\troot.style('position', 'relative')\n\t\t\t\t\t\t.style('left', '50%')\n\t\t\t    \t\t.style('margin-left', -parseInt(root.childLink().style('width'))/2 + 'px');\n\t\t\t\t})\n\t\t</script>\n\t</body>\n</html>","filenames":["d3-dropdownmenu.js","img1.jpg","img2.jpg","img3.jpg","index.html","thumbnail.png"],"thumb":"1c3c367959c04c17e86b46cc31d841d4dfa52840"}},{"_index":"blockbuilder","_type":"blocks","_id":"fdbca6ea6f4416e6b328","_score":0.32449698,"_source":{"userId":"yassineAlouini","description":"d3-introduction","created_at":"2015-11-17T11:21:04Z","updated_at":"2015-11-17T20:43:15Z","api":["d3.random.normal","d3.select"],"colors":["#196496","#d2b48c"],"readme":"Built with [blockbuilder.org](http://blockbuilder.org)","code":"<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width: 100%; height: 100%; }\n  </style>\n</head>\n\n<body>\n  <script>\n    var gaussianDataGenerator = d3.random.normal();\n    var margin = {top: 20, right: 10, bottom: 20, left: 10};\n    var width = 960 - margin.left - margin.right;\n    var height = 500 - margin.top - margin.bottom;\n    \n    // Create the svg container\n    var svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n    \t.append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\t\t// Create some rectangles inside the svg container\n    var rectangles = svg.selectAll(\"rect\")\n    \t\t\t\t\t\t\t\t\t\t.data([1,2,3,4,5])\n       \t\t\t\t\t\t\t\t\t.enter()\n    \t\t\t\t\t\t\t\t\t\t.append(\"rect\")\n       \t\t\t\t\t\t\t\t\t.attr('x', function(d){\n                          return d + 1\n                        }) \n       \t\t\t\t\t\t\t\t\t.attr('y', function(d){\n                        \treturn d + 2\n                        })\n    \t \t\t\t\t\t\t\t\t\t.attr(\"width\", width)\n    \t \t\t\t\t\t\t\t\t\t.attr(\"height\", height)\n       \t\t\t\t\t\t\t\t\t.style({ fill: \"#196496\"})\n  </script>\n</body>\n","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"4444952","_score":0.32437602,"_source":{"userId":"tmcw","description":"d3.keybinding","created_at":"2013-01-03T17:05:56Z","updated_at":"2016-03-14T18:21:47Z","api":["d3.select","d3.keybinding","d3.timer","d3.entries","d3.dispatch.apply","d3.keys","d3.rebind"],"colors":[],"readme":"","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n    body {\n        font:12px/20px 'Helvetica';\n    }\n    textarea, input {\n        width:100%;\n        height:20px;\n        margin:0;\n        padding:0;\n    }\n</style>\n<body>\n    <textarea>typing in a textarea does not trigger bindings</textarea>\n    <input value='typing in an input does not trigger bindings' />\n    <p>use arrow keys to navigate the circle</p>\n    <pre>\n    </pre>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"keybinding.js\"></script>\n<script>\nvar width = 950, height = 300;\nvar svg = d3.select(\"body\").append(\"svg\")\n  .attr(\"width\", width)\n  .attr(\"height\", height)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(0,0)\");\n\nvar point = [width/2, height/2];\nvar momentum = [0, 0];\n\nvar circle = svg.append(\"circle\")\n    .datum(point)\n    .attr(\"r\", 10);\n\nfunction move(x, y) {\n    return function(event) {\n        event.preventDefault();\n        momentum = [momentum[0] + x, momentum[1] + y];\n    };\n}\n\nd3.select('body').call(d3.keybinding()\n    .on('←', move(-2, 0))\n    .on('↑', move(0, -2))\n    .on('→', move(2, 0))\n    .on('↓', move(0, 2)));\n\nd3.timer(function() {\n    point[0] = Math.min(width,  Math.max(0, momentum[0] + point[0]));\n    point[1] = Math.min(height, Math.max(0, momentum[1] + point[1]));\n    circle\n        .datum(point)\n        .attr('transform', function(d) { return 'translate(' + d + ')'; });\n    momentum[0] *= 0.9;\n    momentum[1] *= 0.9;\n});\n\n</script>\n","filenames":["index.html","keybinding.js"]}},{"_index":"blockbuilder","_type":"blocks","_id":"9870108","_score":0.32434347,"_source":{"userId":"jm3","description":"d3.audio.waveforms","created_at":"2014-03-30T09:20:35Z","updated_at":"2016-01-13T14:24:16Z","api":["d3.json","d3.scale.linear","d3.max","d3.select","d3.svg.axis"],"colors":["#000000","#bbbbbb","#dddddd","#ff0000"],"readme":"","code":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"jm3\">\n    <title>d3 audio waveforms</title>\n    <!-- build:css stylesheets/app.min.css-->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://fonts.googleapis.com/css?family=Roboto:400,100|Raleway:400,200|Amatic+SC\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"waveform.css\">\n    <!-- endbuild-->\n  </head>\n  <body>\n    <div class=\"page\">\n      <h1>d3 audio waveforms &middot;<a href=\"http://www.jm3.net/\">john manoogian III</a></h1>\n      <div class=\"waveform\">\n        <h2>divs:</h2>\n        <div></div>\n        <h2>SVG:</h2>\n        <div class=\"svg\">\n          <!-- h2 Audio:-->\n        </div>\n      </div>\n      <iframe width=\"100%\" height=\"166\" scrolling=\"no\" frameborder=\"no\" src=\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/141102884&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_artwork=true\" class=\"soundcloud_embed\"></iframe>\n    </div>\n    <script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n    <script src=\"waveform.js\"></script>\n    <!-- endbuild-->\n  </body>\n</html>\n\n","filenames":[" d3 audio waveforms block","index.html","thumbnail.png","waveform.css","waveform.js"],"thumb":"7d42ab844febd86ba2e647b0eb6f77f6eca2399c"}},{"_index":"blockbuilder","_type":"blocks","_id":"9218980","_score":0.3243012,"_source":{"userId":"wiinci","description":"D3 Clock","created_at":"2014-02-25T22:11:44Z","updated_at":"2015-08-29T13:56:46Z","api":["d3.scale.linear","d3.select","d3.svg.arc","d3.interpolate"],"colors":["#b7b7b7","#febe12","#ffffff","#d2b48c"],"readme":"A simple animated clock icon made to delight MailChimp users (and folks like [Adam](https://twitter.com/thedigiguru/status/434316427340697600)). On load and refresh, the clock adjusts to the current time.\n\n### Thanks to all involved:\n- [Thierry’s tweet](https://twitter.com/blancpain/statuses/394931135353851904) started it all\n- [Eric](https://twitter.com/muntzen) and [Federico](https://twitter.com/fholgado) got the ball rolling\n- [Guan](https://twitter.com/gliao) gave a quick Dojo widget walk-through for use across MailChimp\n- [Alvaro](https://twitter.com/alvasavi) noticed that the hour-hand wasn’t right and `scaleBetweenHours` helped solve that\n- [Caleb](https://twitter.com/calebbritton) designed the previously static clock icon\n\n---\nLive on [bl.ocks](http://bl.ocks.org/wiinci/9218980) and [Codepen](http://codepen.io/wiinci/pen/flqmJ).\n","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n    .clock { margin: 7% auto; display: block; }\n</style>\n\n<div class=\"d3clock\"></div>\n\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script>\n    (function() {\n\n        // Clock look-n-feel: customize at will!\n        var width = 360,\n            height = 360,\n            strokeWidth = 6,\n            clockFillColor = \"none\",\n            clockBorderColor = \"#B7B7B7\",\n            clockHandColor = \"#FEBE12\",\n            clockCenterColor = \"#FEBE12\",\n            transitionEnabled = 1,\n            radius = width / 2,\n            vis, clock, hourPosition, minutePosition, clockhand, hourPositionOffset;\n    \n        // Set up time\n        var now = new Date();\n        var data = [{\n            'unit': 'minutes',\n            'value': now.getMinutes()\n        }, {\n            'unit': 'hours',\n            'value': now.getHours()\n        }];    \n\n        // Set up Scales        \n        // Map 60 minutes onto a radial 360 degree range.\n        var scaleMins = d3.scale.linear()\n            .domain([0, 59 + 59 / 60])\n            .range([0, 2 * Math.PI]);\n    \n        // Map 12 hours onto a radial 360 degree range.\n        var scaleHours = d3.scale.linear()\n            .domain([0, 11 + 59 / 60])\n            .range([0, 2 * Math.PI]);\n    \n        // Every hour, the minute hand rotates 360 degrees and the hour hand rotates 30 degrees.\n        // To get the final, accurate hour hand position, the linear movement of the minute hand\n        // is mapped to a 30 degree radial angle and the resulting angular offset\n        // is added to the hour hand position (in scaleHours above).\n        var scaleBetweenHours = d3.scale.linear()\n            .domain([0, 59 + 59 / 60])\n            .range([0, Math.PI / 6]);\n    \n        // Set up SVG\n        vis = d3.select(\"div.d3clock\")\n            .append(\"svg:svg\")\n            .attr(\"class\", \"clock\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n    \n        clock = vis.append(\"svg:g\")\n            .attr(\"transform\", \"translate(\" + radius + \",\" + radius + \")\");\n    \n        // Clock face\n        clock.append(\"svg:circle\")\n            .attr(\"class\", \"clockface\")\n            .attr(\"r\", radius - strokeWidth)\n            .attr(\"fill\", clockFillColor)\n            .attr(\"stroke\", clockBorderColor)\n            .attr(\"stroke-width\", strokeWidth * 2);\n    \n        // When animating, set 12 o’clock as the clockhand animation start position\n        minutePosition = d3.svg.arc()\n            .innerRadius(0)\n            .outerRadius((3 / 4) * radius)\n            .startAngle(0)\n            .endAngle(0);\n    \n        hourPosition = d3.svg.arc()\n            .innerRadius(0)\n            .outerRadius((1 / 2) * radius)\n            .startAngle(0)\n            .endAngle(0);\n    \n        // When not animating, set the clockhand positions based on time\n        minutePositionFinal = d3.svg.arc()\n            .innerRadius(0)\n            .outerRadius((2 / 3) * radius)\n            .startAngle(function (d) {\n                return scaleMins(+d.value);\n            })\n            .endAngle(function (d) {\n                return scaleMins(+d.value);\n            });\n    \n        hourPositionFinal = d3.svg.arc()\n            .innerRadius(0)\n            .outerRadius((1 / 2) * radius)\n            .startAngle(function (d) {\n                return (scaleHours(+d.value % 12) + scaleBetweenHours(hourPositionOffset));\n            })\n            .endAngle(function (d) {\n                return (scaleHours(+d.value % 12) + scaleBetweenHours(hourPositionOffset));\n            });\n    \n        // Add clockhands to the clockface\n        clockhand = clock.selectAll(\".clockhand\")\n            .data(data)\n            .enter()\n                .append(\"svg:path\")\n                .attr(\"class\", \"clockhand\")\n                .attr(\"stroke\", clockHandColor)\n                .attr(\"stroke-width\", strokeWidth + 4)\n                .attr(\"stroke-linecap\", \"round\")\n                .attr(\"stroke-linejoin\", \"round\")\n                .attr(\"fill\", \"none\");\n        \n        // Animate clockhands!    \n        if (transitionEnabled) {\n            clockhand.attr(\"d\", function (d) {\n                if (d.unit === \"minutes\") {\n                    hourPositionOffset = +d.value;\n                    return minutePosition();\n                } else if (d.unit === \"hours\") {\n                    return hourPosition();\n                }\n            })\n            .transition()\n                .delay(333)\n                .duration(555)\n                .ease(\"elastic\", 1, 4)\n                .attrTween(\"transform\", tween);\n        } else {\n            clockhand.attr(\"d\", function (d) {\n                if (d.unit === \"minutes\") {\n                    hourPositionOffset = +d.value;\n                    return minutePositionFinal(d);\n                } else if (d.unit === \"hours\") {\n                    return hourPositionFinal(d);\n                }\n            });\n        }\n    \n        function tween(d, i, a) {\n            if (d.unit === \"minutes\") {\n                return d3.interpolate(\"rotate(0)\", \"rotate(\" + (scaleMins(+d.value) * (180 / Math.PI)) + \")\");\n            } else if (d.unit === \"hours\") {\n                return d3.interpolate(\"rotate(0)\", \"rotate(\" + ((scaleHours(+d.value % 12) + scaleBetweenHours(hourPositionOffset)) * (180 / Math.PI)) + \")\");\n            }\n        }\n        \n        // Add center dial\n        return clock.append(\"svg:circle\")\n            .attr(\"class\", \"centerdot\")\n            .attr(\"r\", strokeWidth + 2)\n            .attr(\"fill\", \"#fff\")\n            .attr(\"stroke\", clockCenterColor)\n            .attr(\"stroke-width\", strokeWidth + 2);\n            \n    }());\n</script>\n","filenames":["README.md","index.html"]}},{"_index":"blockbuilder","_type":"blocks","_id":"37d16cd71dd52bd655b4","_score":0.31177342,"_source":{"userId":"cool-Blue","description":"self sorting nodes in d3 fdg IV","created_at":"2015-09-02T20:20:23Z","updated_at":"2015-09-05T09:33:11Z","api":["d3.select","d3.format","d3.scale.linear","d3.layout.force","d3.max","d3.svg.axis","d3.scale.ordinal","d3.range","d3.layout.histogram","d3.geom.quadtree","d3.scale.category10"],"colors":["#cccccc","#ffa500","#d2b48c","#0000ff","#000000","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf"],"readme":"## Force Directed Graph with self sorting nodes  \n  The nodes arrange themselves by size, with the larger nodes migrating toward the center.\n### Features  \n  - **_<a id=\"metrics\">Metrics display and inputs</a>_**  \n  The _metrics panel_ across the top of the svg element gives a live display of the layout state.  The inputs on the left allow for the number of nodes and the force gravity and the friction to be adjusted live.  The current `alpha` value for the layout is displayed along with instantaneous and averaged tick time and the average calculation rate of the layout.  Changing any of the inputs re-starts the layout. \n  - _**<a id=\"gravity\">Accelerated annealing</a>**_  \n  The annealing calc is done every tick but, until alpha drops below 0.05, the viz is only updated every nth tick (n is currently 4).  This delivers significant reductions in the time to reach equilibrium (roughly a factor of 2). \n  - **_<a id=\"force\">Force dynamics</a>_**  \n  The force dynamics are a function of alpha, with two phases.  The initial phase has zero charge, low gravity and low damping.  This is designed to maximise mixing and sorting.  The second phase has a higher gravity and a large, negative charge and much higher damping, this is designed to clean up and stabilise the presentation of the nodes. \n  - **_<a id=\"collisions\">Controlling shape</a>_**  \nIf the nodes are all created on [0,0], then a circular shape results but it tends to be asymmetrical, with most of the smaller nodes thrown to one side.  This is due to extreme sensitivity to the distance from the center of the gravity field.  \n\n   ![](https://rawgit.com/cool-Blue/37d16cd71dd52bd655b4/raw/827ca53c2af0ccb7f66dc9a00d3aa8c998c38ed6/asymsort.png)\n\n    By creating the nodes on two points (randomly biased between the two) not only is the shape controlled but the efficiency of the sorting is markedly improved.  \n\n   ![](https://rawgit.com/cool-Blue/37d16cd71dd52bd655b4/raw/08e12d8eaf879165656e7d67f4716840d161a067/controlledshape.png)  \n    \n\n  - **_<a id=\"collisions\">Collisions between nodes</a>_**  \n  Based on [this](http://bl.ocks.org/mbostock/3231298) example but enhanced to sort the radial position of the nodes based on size, with larger nodes closer to the center.  Every collision is used as an opportunity to correct the relative positions. If they are out of position then the radial ordinates of the colliding nodes (in polar coordinates) are swapped.  The sorting efficiency is therefore reliant on good mixing in the collisions.  In order to maximise the mixing, the nodes are all created at the same point in the center of the graph.  When the nodes are swapped, the velocity of the bigger node is preserved while the smaller node is accelerated.  Thus, the sorting efficiency is enhanced because the smaller nodes are flung out from the collision point.  The mass is calculated assuming the nodes are spheres, using  r<sup>3</sup>, and the rebounds calculated according to relative \"mass\".  \n\n### d3 features  used\n  1.  [d3.layout.force](https://github.com/mbostock/d3/wiki/API-Reference#force)\n  2.  [Ordinal Scales](https://github.com/mbostock/d3/wiki/Ordinal-Scales)\n  1.  [d3.format](https://github.com/mbostock/d3/wiki/Formatting#d3_format)\n  1.  [d3.range](https://github.com/mbostock/d3/wiki/Arrays#d3_range)\n  1.  [d3.geom.quadtree](https://github.com/mbostock/d3/wiki/Quadtree-Geom)  \n  ","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n    body {\n        /*margin: 200px 500px 100px 500px;*/\n        /*font-size: 10px;*/\n    }\n    #inputs {\n        display: inline-block;\n        margin: 0 0 0 0.5em;\n    }\n\n    #panel {\n        display: inline-block;\n        margin: 0 0 0 100px;\n        border: none;\n        box-sizing: border-box;\n        background-color: black;\n    }\n\n    #metrics {\n        display: inline-block;\n    }\n\n    label, input {\n        /*font-size: 10px;*/\n        text-align: left;\n        width: 3.5em;\n        color: orange;\n        /*padding-left: 1em;*/\n        background-color: black;\n        outline: none;\n        border: none;\n    }\n\n    circle {\n        stroke: black;\n        /*stroke: #ccc;*/\n        /*stroke-opacity: 0.5;*/\n        /*stroke-width: 6;*/\n    }\n\n    svg {\n        display: inline-block;\n        overflow: visible;\n        border: none;\n        background: black;\n        margin: 0 0 0 100px;\n    }\n\n    text {\n        text-anchor: middle;\n    }\n\n    .axis path, .axis line {\n        fill: none;\n        stroke: orange;\n    }\n\n</style>\n<body>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n<!--<script src=\"d3 CB.js\"></script>-->\n<script\n    src=\"https://cdnjs.cloudflare.com/ajax/libs/tinycolor/1.1.2/tinycolor.min.js\"></script>\n<script src=\"https://gitcdn.xyz/repo/cool-Blue/d3-lib/master/filters/shadow.js\"></script>\n<script\n    src=\"https://gitcdn.xyz/repo/cool-Blue/d3-lib/master/elapsedTime/elapsed-time-2.0.js\"></script>\n<script>\n    !(function() {\n        var inputs    = d3.select(\"body\").append(\"div\")\n                .attr(\"id\", \"metrics\")\n                .append(\"div\").attr({id: \"panel\"})\n                .append(\"div\").attr({id: \"inputs\"}),\n            nodeCount = inputs.append(\"label\")\n                .attr(\"for\", \"nodeCount\")\n                .text(\"nodes: \")\n                .append(\"input\")\n                .attr({\n                    id       : \"nodeCount\",\n                    class    : \"numIn\",\n                    type     : \"number\",\n                    min      : \"100\",\n                    max      : \"5,000\",\n                    step     : \"100\",\n                    inputmode: \"numeric\"\n                });\n\n        var elapsedTime = outputs.ElapsedTime(\"#panel\", {\n                border : 0, margin: 0, \"box-sizing\": \"border-box\",\n                padding: \"0 0 0 3px\", background: \"black\", \"color\": \"orange\"\n            })\n                .message(function(value) {\n                    var this_lap = this.lap().lastLap, aveLap = this.aveLap(this_lap)\n                    return 'q:' + d3.format(\" >4,.0f\")(force.charge())\n                        + '\\talpha:' + d3.format(\" >7,.3f\")(value)\n                        + '\\ttick time:' + d3.format(\" >8,.4f\")(this_lap)\n                        + ' (' + d3.format(\" >4,.3f\")(this.aveLap(this_lap)) + ')'\n                        + '\\tframe rate:' + d3.format(\" >5,.1f\")(1 / aveLap) + \" fps\"\n                        + '\\ttime:' + d3.format(\" >4,.1f\")(this.t()) + \" sec\"\n                }),\n\n            width       = 960 - 200,\n            height      = 500 - elapsedTime.selection.node().clientHeight,\n            padding     = 0, // separation between nodes\n            maxRadius   = 7;\n\n        elapsedTime.consoleOn = false;\n\n        var n0 = 500,\n            m  = 1,\n            c  = 10,\n            g  = 0.005, g2 = 0.04,\n            f1 = 0.5, f2 = 0.001,\n            q2 = -2000;\n\n        var x = d3.scale.linear()\n                .domain([-width / 2, width / 2])\n                .range([0, width]),\n            y = d3.scale.linear()\n                .domain([-height / 2, height / 2])\n                .range([height, 0]);\n\n        var tick  = (function() {\n                var phase = -1, stage1 = true;\n                function tick(e) {\n                    updateHist(viz.circle);\n                    viz.circle.each(viz.collide(e.alpha));\n                    if(e.alpha < 0.02 || !(phase = ++phase % (force.nodes().length >2000 ? 4 : 2))) {\n                        elapsedTime.mark(e.alpha);\n                        viz.circle.attr({\n                            cx: function(d) {\n                                return d.x;\n                            },\n                            cy: function(d) {\n                                return d.y;\n                            }\n                        });\n                    }\n                    if(stage1 && e.alpha < 0.07) {\n                        elapsedTime.timestamp(\"stage2\")\n                        force.friction(f2)\n                            .charge(q2)\n                            .gravity(g2)\n                            .start().alpha(e.alpha);\n                        stage1 = false;\n                    }\n                    force.alpha(e.alpha / 0.99 * 0.999)\n                }\n\n                tick.reset = function() {\n                    stage1 = true;\n                };\n                return tick;\n            })(),\n            force = d3.layout.force()\n                .size([width, height])\n                .gravity(g)\n                .charge(0)\n                .friction(f1)\n                .on(\"tick\", tick)\n                .on(\"start\", function() {\n                    elapsedTime.start(1000);\n                    tick.reset();\n                    elapsedTime.timestamp(\"force start\")\n                });\n\n        var svg    = d3.select(\"body\").append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n                .append(\"g\"),\n            bubble = Bubble(svg);\n\n        nodeCount\n            .property(\"value\", n0)\n            .on(\"change\", function() {\n                viz = update(force, this.value, padding);\n                this.blur();\n            });\n\n        elapsedTime.selection.style({\n            width: (width\n            - parseFloat(window.getComputedStyle(d3.select(\"#inputs\").node()).getPropertyValue(\"width\"))\n            - parseFloat(window.getComputedStyle(d3.select(\"#inputs\").node()).getPropertyValue(\"margin-left\")))\n            + \"px\"\n        });\n\n        var hh = height/2, hw = 50,\n            hist  = d3.select(\"body\").append(\"div\")\n                .attr(\"id\", \"speed\")\n                .style({\"display\": \"inline-block\", \"vertical-align\": \"top\"})\n                .attr(\"transform\", \"translate(0,\" + -height *.1 + \")\")\n                .append(\"svg\")\n                .attr(\"width\", hw)\n                .attr(\"height\", hh)\n                .style({\"margin\": 0})\n                .append(\"g\"),\n            histX = hist.append(\"g\")\n                .attr(\"class\", \"x axis\")\n                .style({fill: \"orange\", \"text-size\": \"6px\"});\n\n\n        function updateHist(objects){\n            var x = d3.scale.linear()\n                    .domain([\n                        0,\n                        d3.max(objects.data(), function(o) {\n                            return Math.sqrt(o.v.x * o.v.x + o.v.y + o.v.y)\n                        })\n                    ])\n                    .range([0,hh-10]),\n                s = speeds(objects.data()),\n                xAxis = d3.svg.axis()\n                    .scale(x)\n                    .orient(\"left\"),\n                y = d3.scale.linear()\n                    .domain([0,d3.max(s, function(d){return d.y})])\n                    .range([0,hw]),\n                bars = hist.selectAll(\".bar\").data(s);\n\n            histX.call(xAxis);\n\n            bars.enter().append(\"rect\")\n                    .attr(\"class\", \"bar\")\n                    .style({fill: \"orange\"});\n\n            bars.exit().remove();\n\n            bars.attr(\"height\", function(d) {\n                return x(d.dx)\n            })\n                .attr(\"width\", function(d) {\n                    return y(d.y)\n                })\n                .attr(\"y\", function(d){\n                    return x(d.x)\n                });\n\n            function speeds(data){\n                var bins = d3.scale.ordinal()\n                    .domain(d3.range(100))\n                    .rangeBands(x.domain())\n                    .range();\n                console.log(x.domain());\n                return d3.layout.histogram()\n                    .bins(bins)\n                    .value(function(d){\n                        return Math.sqrt(d.v.x*d.v.x + d.v.y*d.v.y)\n                    })(data)\n            }\n        }\n\n        var viz = update(force, n0, padding);\n\n        function Collide(nodes, padding) {\n            // Resolve collisions between nodes.\n            var maxRadius = d3.max(nodes, function(d) {\n                return d.radius\n            });\n            return function collide(alpha) {\n                var quadtree = d3.geom.quadtree(nodes),\n                    hit = false;\n                return function c(d) {\n                    var r   = d.radius + maxRadius + padding,\n                        nx1 = d.x - r,\n                        nx2 = d.x + r,\n                        ny1 = d.y - r,\n                        ny2 = d.y + r;\n                    quadtree.visit(function v(quad, x1, y1, x2, y2) {\n                        var possible = !(x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1);\n                        if(quad.point && (quad.point !== d) && possible) {\n                            var x  = d.x - quad.point.x,\n                                y  = d.y - quad.point.y,\n                                l  = (Math.sqrt(x * x + y * y)),\n                                r  = (d.radius + quad.point.radius + padding),\n                                mq = Math.pow(quad.point.radius, 3),\n                                m  = Math.pow(d.radius, 3);\n                            if(hit = (l < r)) {\n                                if(l == 0) {\n                                    for(var j = 3; l == 0; j--) {\n                                        x = (Math.random() - 0.5);\n                                        y = (Math.random() - 0.5);\n                                        l = Math.sqrt(x * x + y * y);\n                                    }\n                                    d.x += x/2;\n                                    d.y -= y/2;\n                                    quad.point.x -= x/2;\n                                    quad.point.y += y/2;\n                                }\n                                //move the nodes away from each other along the radial (normal) vector\n                                //taking relative size into consideration, the sign is already established\n                                //in calculating x and y\n                                l = (r - l) / l * (1 + alpha);\n\n                                // if the nodes are in the wrong radial order for there size, swap radius ordinate\n                                var rel = m / mq, bigger = rel > 1,\n                                    rad = d.r / quad.point.r, farther = rad > 1;\n                                if(bigger && farther || !bigger && !farther) {\n                                    var d_r = d.r;\n                                    d.r = quad.point.r;\n                                    quad.point.r = d_r;\n                                    d_r = d.pr;\n                                    d.pr = quad.point.pr;\n                                    quad.point.pr = d_r;\n                                }\n                                // move nodes apart but preserve the velocity of the biggest one\n                                // and accelerate the smaller one\n                                d.x += (x *= l);\n                                d.y += (y *= l);\n                                d.px += x * bigger || -alpha;\n                                d.py += y * bigger || -alpha;\n                                quad.point.x -= x;\n                                quad.point.y -= y;\n                                quad.point.px -= x * !bigger || -alpha;\n                                quad.point.py -= y * !bigger || -alpha;\n                            }\n                        }\n                        return !possible;\n                    });\n                };\n            }\n        }\n\n        function initNodes(force, n, padding, custom) {\n            var rMax = Math.pow(n0 / n, 0.25) * maxRadius;\n            force.stop()\n                .nodes(d3.range(n).map(function() {\n                var layer = Math.floor(Math.random() * m),\n                    u = Math.random(),\n                    v     = -Math.log(u);\n                return {\n                    radius: Math.pow(v,.8) * rMax,\n                    color : Math.floor(u * c),\n//                    x     : x((Math.random() - 0.5)* width/4),\n                    x     : x(0),//x((Math.random() > 0.5)? width/4:-width/4),\n                    y     : y((Math.random() > 0.5)? height/4:-height/4),\n                    get v() {\n                        var d = this;\n                        return {\n                            x: x.invert(d.x) - x.invert(d.px) || 0,\n                            y: y.invert(d.y) - y.invert(d.py) || 0\n                        }\n                    },\n                    get polar() {\n                        var xx = x.invert(this.x), yy = y.invert(this.y);\n                        return [Math.sqrt(xx * xx + yy * yy), Math.atan2(yy, xx)]\n                    },\n                    set polar(p) {\n                        var r = p[0], theta = p[1];\n                        return [this.x = x(r * Math.cos(theta)), this.y = y(r\n                            * Math.sin(theta))]\n                    },\n                    get r() {\n                        var xx = x.invert(this.x), yy = y.invert(this.y);\n                        return Math.sqrt(xx * xx + yy * yy);\n                    },\n                    get theta() {\n                        var xx = x.invert(this.x), yy = y.invert(this.y);\n                        return Math.atan2(yy, xx)\n                    },\n                    set r(_) {\n                        var theta = this.theta;\n                        return [this.x = x(_ * Math.cos(theta)), this.y = y(_\n                            * Math.sin(theta))]\n                    },\n                    set theta(_) {\n                        var r = this.r;\n                        return [this.x = x(r * Math.cos(_)), this.y = y(r * Math.sin(_))]\n                    },\n\n                    get pr() {\n                        var xx = x.invert(this.px), yy = y.invert(this.py);\n                        return Math.sqrt(xx * xx + yy * yy);\n                    },\n                    get ptheta() {\n                        var xx = x.invert(this.px), yy = y.invert(this.py);\n                        return Math.atan2(yy, xx)\n                    },\n                    set pr(_) {\n                        var theta = this.ptheta;\n                        return [this.px = x(_ * Math.cos(theta)), this.py = y(_\n                            * Math.sin(theta))]\n                    },\n                    set ptheta(_) {\n                        var r = this.pr;\n                        return [this.px = x(r * Math.cos(_)), this.py = y(r\n                            * Math.sin(_))]\n                    },\n                };\n            }))\n                .gravity(custom.g || Math.pow(n0 / n, 1.2) * g)\n                .friction(custom.f || f1)\n                .charge(0);\n//            window.setTimeout(function(){\n                force.start()\n//            }, 20)\n\n            return Collide(force.nodes(), padding);\n        }\n\n        function update(force, n, padding, custom) {\n            elapsedTime.start(1000);\n\n            return {\n                collide: initNodes(force, n, padding, custom || {}),\n                circle : (function() {\n                    var update = svg.selectAll(\"circle\")\n                        .data(force.nodes());\n                    update.enter().append(\"circle\");\n                    update.exit().remove();\n                    update.attr(\"r\", function(d) {\n                        return d.radius;\n                    })\n                        .call(bubble.call)\n                        .call(force.drag);\n                    return update;\n                })()\n            };\n        }\n\n        function Bubble(svg) {\n            var colors = d3.range(20).map(d3.scale.category10()).map(function(d) {\n                return filters.sphere(svg, d, 1)\n            });\n            return {\n                call: function(selection) {\n                    selection.style(\"fill\", function(d) {\n                        return colors[d.color]\n                    })\n                },\n                map : function(d, i, data) {\n                    d.fill = colors[~~(Math.random() * 20)];\n                },\n                fill: function(d) {\n                    return d.fill\n                }\n            }\n        };\n        function myName(args) {\n            return /function\\s+(\\w*)\\(/.exec(args.callee)[1];\n        }\n    })()\n</script>\n</body>\n\n","filenames":["2015-08-31_22-31-57.png","asymsort.png","controlledshape.png","index.html","readme.md","thumbnail.png"],"thumb":"05158bda1988adddbc55e256c23d5021f2358f44"}},{"_index":"blockbuilder","_type":"blocks","_id":"fe656fdbb04fd723efd4","_score":0.29162002,"_source":{"userId":"mbostock","description":"D3 Outline Logo","created_at":"2015-12-11T20:10:54Z","updated_at":"2016-02-09T01:48:23Z","api":[],"colors":["#fcfcfa","#ddeeee","#ffffff","#000000"],"readme":"A new version of the [D3 logo](https://github.com/d3/d3-logo) with a high-contrast outline. This was designed for the [official D3 sticker](https://www.stickermule.com/marketplace/9699-d3-outline), which is available for only $4.\n","code":"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\nbody {\n  background: #fcfcfa;\n}\n\n</style>\n<svg width=\"960\" height=\"500\" viewBox=\"-20 -20 136 131\">\n  <defs>\n    <path id=\"deethree\" d=\"M0,0h7.75a45.5,45.5 0 1 1 0,91h-7.75v-20h7.75a25.5,25.5 0 1 0 0,-51h-7.75zM36.2510,0h32a27.75,27.75 0 0 1 21.331,45.5a27.75,27.75 0 0 1 -21.331,45.5h-32a53.6895,53.6895 0 0 0 18.7464,-20h13.2526a7.75,7.75 0 1 0 0,-15.5h-7.75a53.6895,53.6895 0 0 0 0,-20h7.75a7.75,7.75 0 1 0 0,-15.5h-13.2526a53.6895,53.6895 0 0 0 -18.7464,-20z\"/>\n  </defs>\n  <use xlink:href=\"#deethree\" stroke=\"black\" stroke-width=\"20\"/>\n  <use xlink:href=\"#deethree\" fill=\"white\"/>\n</svg>\n","filenames":[".block","README.md","index.html","thumbnail.png"],"thumb":"071e23fe1eadb3202571dd47be2e0170d7889051"}}]}}