[{"readme": "", "created_at": "2015-02-11T17:45:45Z", "api": ["d3.random.normal", "d3.select", "d3.range", "d3.layout.force", "d3.timer", "d3.behavior.drag", "d3.mouse"], "updated_at": "2015-08-29T14:15:15Z", "description": "WebGL + d3.layout.force"}, {"readme": "This is the code for Chapter 6, Figure 8 from [D3.js in Action](http://manning.com/meeks/) showing how to create a force-directed network using **d3.layout.force()** as well as SVG markers for arrowheads.", "created_at": "2014-11-18T04:09:45Z", "api": ["d3.select", "d3.scale.linear", "d3.extent", "d3.layout.force", "d3.selectAll"], "updated_at": "2016-03-18T03:31:26Z", "description": "Ch. 6, Fig. 8 - D3.js in Action"}, {"readme": "Using [voronoi tessellation](http://bl.ocks.org/mbostock/4060366) on random points as a surface for images. From here you could distribute the points in a more meaningfull way e.g. using t-SNE or d3.layout.force()", "created_at": "2016-01-04T10:40:36Z", "api": ["d3.range", "d3.geom.voronoi", "d3.select", "d3.json"], "updated_at": "2016-01-04T10:41:36Z", "description": "Voronoi Images"}, {"readme": "Circle-bound nodes in [d3.layout.force()](https://github.com/mbostock/d3/wiki/Force-Layout), using a variation of Mike Bostock's rectangular [Bounded Force Layout](http://bl.ocks.org/mbostock/1129492). Here we calculate the maximum and minimum `x` for a given `y` in the circle, and vice versa.", "created_at": "2013-07-14T05:51:40Z", "api": ["d3.select", "d3.range", "d3.layout.force"], "updated_at": "2015-12-19T17:39:18Z", "description": "Circle-bound D3 force layout"}, {"readme": "Circle-bound nodes in [d3.layout.force()](https://github.com/mbostock/d3/wiki/Force-Layout), using a variation of Mike Bostock's rectangular [Bounded Force Layout](http://bl.ocks.org/mbostock/1129492). Here we calculate the maximum and minimum `x` for a given `y` in the circle, and vice versa.\n\nforked from <a href='http://bl.ocks.org/nsonnad/'>nsonnad</a>'s block: <a href='http://bl.ocks.org/nsonnad/5993342'>Circle-bound D3 force layout</a>", "created_at": "2016-04-08T21:14:22Z", "api": ["d3.range", "d3.scale.category10", "d3.select", "d3.layout.force", "d3.geom.quadtree"], "updated_at": "2016-04-11T19:06:02Z", "description": "Bound d3 with repulsion"}, {"readme": "Particle edges from [d3_glyphEdges](https://github.com/emeeks/d3-glyphEdges) are the most difficult edge type to implement. Here's an example using a dendrogram and the connecting paths from the dendrogram. Remember that `d3_glyphEdge.mutate.particle` mutates the edge data object, spawning new particles, updating the position of existing particles and deleting particles that have reached the end of the path, and it's this array that you use to represent the particles (either with SVG as in this example or, if you're dealing with a lot of particles, probably canvas). As such, an edge object needs to have, along with `.source` and `.target`, `.frequency` (a positive number) to indicate the number of particles created per tick and `.particles` (an array) to hold the created particles.\n\n`d3_glyphEdge.mutate.particle` does not include its own tick function so you need to create your own. This example uses `d3.timer` whereas [this network example](http://bl.ocks.org/emeeks/aaa995cde6621745e906) uses the built-in tick function in `d3.layout.force`.", "created_at": "2015-12-03T18:39:37Z", "api": ["d3.json", "d3.scale.category20c", "d3.layout.tree", "d3.svg.diagonal", "d3.select", "d3.timer", "d3.selectAll"], "updated_at": "2016-03-08T01:40:38Z", "description": "Particle Edges Dendrogram"}, {"readme": "forceInABox\n===========\n\nForce in a box is A d3.js force extension that implements the Group-in-a-box layout algorithm to distribute nodes in a network according to their clusters. The algorithm uses a treemap to compute focis that are later used to distribute each cluster into it's own box.\n\nTo use it you need to include the library, and use the forceInABox instead of the normal d3.layout.force\n\n```html\n\t<script type=\"text/javascript\" src=\"forceInABox.js\">   </script>\n```\n```js\n\t//create the force and specify the grouping parameter\n\tvar force = d3.layout.forceInABox()\n\t\t\t\t\t.groupBy(\"group\");\n\n\t//Add nodes and edges\n\tforce.nodes(nodes)\n\t\t.edges(edges)\n\t\t.start();\n\n\t//Add the onTick method to the tick event\n\tforce.on(\"tick\", function(e) {\n      force.onTick(e);\n    };\n```\n\n\n[forceInABox repo](https://github.com/john-guerra/forceInABox)\n\n", "created_at": "2014-11-07T01:56:19Z", "api": ["d3.select", "d3.scale.category20", "d3.layout.forceInABox", "d3.json"], "updated_at": "2016-03-05T19:22:18Z", "description": "Force in a Box algorithm"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/0bff3139b4ff3fa3eb3f96dfb126ac4e'>d3</a>", "created_at": "2016-04-15T09:19:07Z", "api": ["d3.select"], "updated_at": "2016-04-15T09:19:07Z", "description": "d3"}, {"readme": "Intro Example 2 for [How to Create Effective Network Data Visualization](http://elijahmeeks/networkviz/)\n\nHere's the same network dataset from the last example laid out as a network. The force-directed layout that D3 uses (d3.layout.force) expects arrays of nodes and arrays of edges. In order to create those necessary arrays, we walk through the edgelist in firm.csv and create the referenced nodes from the source and target id values in the edge list.\n\nThe resulting ball of spaghetti is all too common in finished network data visualization. Compared to the earlier bar charts, this is a horrible data visualization product and says nothing, other than perhaps \"this is complex\" but mostly, \"the person who created this is more interested in technology than they are in communication.\"", "created_at": "2015-07-25T23:50:11Z", "api": ["d3.csv", "d3.layout.force", "d3.select"], "updated_at": "2016-03-17T02:07:45Z", "description": "Networks - Intro 2"}, {"readme": "Intro Example 2 for [How to Create Effective Network Data Visualization](http://elijahmeeks/networkviz/)\n\nHere's the same network dataset from the last example laid out as a network. The force-directed layout that D3 uses (d3.layout.force) expects arrays of nodes and arrays of edges. In order to create those necessary arrays, we walk through the edgelist in firm.csv and create the referenced nodes from the source and target id values in the edge list.\n\nThe resulting ball of spaghetti is all too common in finished network data visualization. Compared to the earlier bar charts, this is a horrible data visualization product and says nothing, other than perhaps \"this is complex\" but mostly, \"the person who created this is more interested in technology than they are in communication.\"", "created_at": "2015-11-08T22:11:50Z", "api": ["d3.csv", "d3.layout.force", "d3.select"], "updated_at": "2015-11-08T22:14:58Z", "description": "Networks - Intro 2"}, {"readme": "## Force Directed Graph with self sorting nodes - Inertial winnowing\n### Features  \n  - **_<a id=\"collisions\">Collisions between nodes</a>_**  \n  Based on [this](http://bl.ocks.org/mbostock/3231298) example but enhanced to simulate inertia.  The distance each node is moved away from the collision is proportional to their relative mass.  Since [gravity](https://github.com/mbostock/d3/wiki/Force-Layout#gravity) is switched on and [friction](https://github.com/mbostock/d3/wiki/Force-Layout#friction) is set for low damping, the heavier nodes will move towards the center of the graph and the smaller nodes pushed out of the way.  The mass is calculated assuming the nodes are spheres, using  r<sup>3</sup>, and the rebounds calculated according to relative \"mass\".  \n  \n```javascript\n  force.alpha(a/0.99*(1 - x))\n```  \n### d3 features  used\n  1.  [d3.layout.force](https://github.com/mbostock/d3/wiki/API-Reference#force)\n  2.  [Ordinal Scales](https://github.com/mbostock/d3/wiki/Ordinal-Scales)\n  1.  [d3.format](https://github.com/mbostock/d3/wiki/Formatting#d3_format)\n  1.  [d3.range](https://github.com/mbostock/d3/wiki/Arrays#d3_range)\n  1.  [d3.geom.quadtree](https://github.com/mbostock/d3/wiki/Quadtree-Geom)  \n  ", "created_at": "2015-08-28T19:37:54Z", "api": ["d3.select", "d3.format", "d3.layout.force", "d3.max", "d3.geom.quadtree", "d3.range", "d3.scale.category10"], "updated_at": "2015-08-31T16:51:43Z", "description": "self-sorting nodes in d3 fdg"}, {"readme": "\ufeff**Click to drag nodes.** \n\nThis is a [Fishbone or Ishikawa][ish] diagram, which shows contributions of\ndifferent levels of a hierarchy to a main concept.\n\nIt is implemented in [d3.js][d3], nominally using the\n_[Towards Reusable Charts][trc]_ pattern. Positioning is done by\n[`d3.layout.force`][force], though a fair amount of pre-processing along the\nlines of [`d3.layout.tree`][tree] is done.\n\nThis work could be significantly enhanced to improve the customizability of\nthe code, as well as interactivity of the diagram:\n\n- collapsible nodes\n- better layout of overlapping branches, twigs\n- more customizable marks (currently just text and lines, though sub-selection\n  should work just fine)\n- interactive creation\n  - drag and drop\n  - [Markdown-based][editor]\n\nIf you have insights, or make modifications, share them on\n[the thread on the d3-js discussion group][gg] that spurred this work!\n\n[ish]: http://en.wikipedia.org/wiki/Ishikawa_diagram\n[d3]: http://d3js.org\n[trc]: http://bost.ocks.org/mike/chart\n[gg]: https://groups.google.com/forum/#!topic/d3-js/4IaKPfeZDt8\n[force]: https://github.com/mbostock/d3/wiki/Force-Layout\n[tree]: https://github.com/mbostock/d3/wiki/Tree-Layout\n[editor]: http://bl.ocks.org/bollwyvl/9265219", "created_at": "2014-02-26T21:40:43Z", "api": ["d3.scale.log", "d3.layout.force", "d3.select", "d3.fishbone", "d3.event.stopPropagation", "d3.json"], "updated_at": "2015-12-04T13:17:14Z", "description": "d3 fishbone"}, {"readme": "## Force Directed Graph with self sorting nodes - Position swapping\n### Features  \n  - _**<a id=\"gravity\">Accelerated annealing</a>**_  \n  The annealing calc is done every tick but, until alpha drops below 0.05, the viz is only updated every nth tick (n is currently 4).  This delivers significant reductions in the time to reach equilibrium (roughly a factor of 2). \n  - **_<a id=\"force\">Force dynamics</a>_**  \n  The force dynamics are a function of alpha, with two phases.  The initial phase has zero charge, low gravity and low damping.  This is designed to maximise mixing and sorting.  The second phase has a higher gravity and a large, negative charge and much higher damping, this is designed to clean up and stabilise the presentation of the nodes. \n  - **_<a id=\"collisions\">Collisions between nodes</a>_**  \n  Based on [this](http://bl.ocks.org/mbostock/3231298) example but enhanced to sort the radial position of the nodes based on size, with larger nodes closer to the center.  Every collision is used as an opportunity to correct the relative positions. If they are out of position then the radial ordinates of the colliding nodes (in polar coordinates) are swapped.  The sorting efficiency is therefore reliant on good mixing in the collisions.  In order to maximise the mixing, the nodes are all created at the same point in the center of the graph.  When the nodes are swapped, their velocities are preserved. This is done by also changing the previous points (`p.px` and `p.py`).  The mass is calculated assuming the nodes are spheres, using  r<sup>3</sup>, and the rebounds calculated according to relative \"mass\".  \n  \n```javascript\n  force.alpha(a/0.99*(1 - x))\n```  \n### d3 features  used\n  1.  [d3.layout.force](https://github.com/mbostock/d3/wiki/API-Reference#force)\n  2.  [Ordinal Scales](https://github.com/mbostock/d3/wiki/Ordinal-Scales)\n  1.  [d3.format](https://github.com/mbostock/d3/wiki/Formatting#d3_format)\n  1.  [d3.range](https://github.com/mbostock/d3/wiki/Arrays#d3_range)\n  1.  [d3.geom.quadtree](https://github.com/mbostock/d3/wiki/Quadtree-Geom)  \n  ", "created_at": "2015-08-29T15:40:41Z", "api": ["d3.select", "d3.format", "d3.scale.linear", "d3.layout.force", "d3.max", "d3.geom.quadtree", "d3.range", "d3.scale.category10"], "updated_at": "2015-08-31T18:59:34Z", "description": "self sorting nodes in d3 fdg II"}, {"readme": "Using d3.carto.layer with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nEach d3.carto.layer is defined and then added to the map using map.addCartoLayer. You can access the added layers using map.layers(). Each layer fires a \"load\" event once successfully added to the map.\n\nThis example uses d3.carto.layer.layerType() aliases like d3.carto.layer.tile() and d3.carto.layer.topojson().", "created_at": "2014-07-15T23:13:03Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.carto.layer.topojson", "d3.carto.layer.csv", "d3.carto.layer.featureArray"], "updated_at": "2015-08-29T14:04:00Z", "description": "d3.carto.layer.alias - d3.carto.map"}, {"readme": "Using d3.carto.minimap with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nDrag the main map around and zoom in and zoom out to see the bounds change in the minimap.\n\nThe minimap creates its own d3.carto.map and, with minimap.tandem() will take the layers from the main map and recreate them in the minimap.", "created_at": "2014-07-17T01:42:49Z", "api": ["d3.carto.map", "d3.select", "d3.carto.minimap", "d3.carto.minimap.map", "d3.carto.layer"], "updated_at": "2015-08-29T14:04:05Z", "description": "d3.carto.minimap - d3.carto.map"}, {"readme": "Using d3.carto.layer with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nEach d3.carto.layer is defined and then added to the map using map.addCartoLayer. You can access the added layers using map.layers(). Each layer fires a \"load\" event once successfully added to the map.\n", "created_at": "2014-07-14T04:42:59Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer"], "updated_at": "2015-08-29T14:03:57Z", "description": "d3.carto.layer - d3.carto.map"}, {"readme": "## Force Directed Graph with self sorting nodes  \n  The nodes arrange themselves by size, with the larger nodes migrating toward the center.\n### Features  \n  - **_<a id=\"metrics\">Metrics display and inputs</a>_**  \n  The _metrics panel_ across the top of the svg element gives a live display of the layout state.  The inputs on the left allow for the number of nodes and the force gravity and the friction to be adjusted live.  The current `alpha` value for the layout is displayed along with instantaneous and averaged tick time and the average calculation rate of the layout.  Changing any of the inputs re-starts the layout. \n  - _**<a id=\"gravity\">Accelerated annealing</a>**_  \n  The annealing calc is done every tick but, until alpha drops below 0.05, the viz is only updated every nth tick (n is currently 4).  This delivers significant reductions in the time to reach equilibrium (roughly a factor of 2). \n  - **_<a id=\"force\">Force dynamics</a>_**  \n  The force dynamics are a function of alpha, with two phases.  The initial phase has zero charge, low gravity and low damping.  This is designed to maximise mixing and sorting.  The second phase has a higher gravity and a large, negative charge and much higher damping, this is designed to clean up and stabilise the presentation of the nodes. \n  - **_<a id=\"collisions\">Collisions between nodes</a>_**  \n  Based on [this](http://bl.ocks.org/mbostock/3231298) example but enhanced to sort the radial position of the nodes based on size, with larger nodes closer to the center.  Every collision is used as an opportunity to correct the relative positions. If they are out of position then the radial ordinates of the colliding nodes (in polar coordinates) are swapped.  The sorting efficiency is therefore reliant on good mixing in the collisions.  In order to maximise the mixing, the nodes are all created at the same point in the center of the graph.  When the nodes are swapped, the velocity of the bigger node is preserved while the smaller node is accelerated.  Thus, the sorting efficiency is enhanced because the smaller nodes are flung out from the collision point.  The mass is calculated assuming the nodes are spheres, using  r<sup>3</sup>, and the rebounds calculated according to relative \"mass\".  \n\n### d3 features  used\n  1.  [d3.layout.force](https://github.com/mbostock/d3/wiki/API-Reference#force)\n  2.  [Ordinal Scales](https://github.com/mbostock/d3/wiki/Ordinal-Scales)\n  1.  [d3.format](https://github.com/mbostock/d3/wiki/Formatting#d3_format)\n  1.  [d3.range](https://github.com/mbostock/d3/wiki/Arrays#d3_range)\n  1.  [d3.geom.quadtree](https://github.com/mbostock/d3/wiki/Quadtree-Geom)  \n  ", "created_at": "2015-08-30T18:26:22Z", "api": ["d3.select", "d3.format", "d3.scale.linear", "d3.layout.force", "d3.max", "d3.geom.quadtree", "d3.range", "d3.scale.category10"], "updated_at": "2015-09-01T19:16:11Z", "description": "self sorting nodes in d3 fdg III"}, {"readme": "D3 2.10 adds support for [tab-separated values](http://en.wikipedia.org/wiki/Tab-separated_values) via d3.tsv. Similar to the previous d3.csv method, this makes it easy to load and parse TSV files.\n\n```javascript\nd3.tsv(\"data.tsv\", function(data) {\n  console.log(data[0].x);\n});\n```\n", "created_at": "2012-08-09T17:06:48Z", "api": ["d3.scale.linear", "d3.select", "d3.tsv", "d3.extent", "d3.svg.axis"], "updated_at": "2016-03-29T01:11:27Z", "description": "d3.tsv"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nSimple D3 graph.", "created_at": "2015-10-23T23:48:33Z", "api": ["d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.select", "d3.time.format", "d3.extent", "d3.max", "d3.svg.line"], "updated_at": "2015-10-24T07:33:28Z", "description": "D3 graphs"}, {"readme": "d3 gauge\n\nforked from <a href='http://bl.ocks.org/ImSraone/'>ImSraone</a>'s block: <a href='http://bl.ocks.org/ImSraone/a6f4f74a628d844e6afb'>d3 gauge</a>", "created_at": "2016-03-04T05:05:37Z", "api": ["d3.format", "d3.interpolateHsl", "d3.rgb", "d3.layout.pie", "d3.scale.linear", "d3.range", "d3.svg.arc", "d3.select", "d3.svg.line"], "updated_at": "2016-03-04T05:05:37Z", "description": "d3 gauge"}, {"readme": "D3 Scales\n---------\nPlaying with D3 scale options, using transition\n\nA [Pen](http://codepen.io/madebyafox/pen/zrawWb) by [Made By A Fox](http://codepen.io/madebyafox) on [CodePen](http://codepen.io/).\n\n[License](http://codepen.io/madebyafox/pen/zrawWb/license).", "created_at": "2016-01-30T07:59:36Z", "api": ["d3.select", "d3.scale.linear", "d3.svg.axis", "d3.scale.pow", "d3.scale.sqrt", "d3.scale.log"], "updated_at": "2016-01-30T08:17:58Z", "description": "D3 Scales"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/tmcw/'>tmcw</a>'s block: <a href='http://bl.ocks.org/tmcw/3426132'>MapBox + d3</a>", "created_at": "2016-03-23T05:06:30Z", "api": ["d3.select", "d3.geo.path", "d3.geo.bounds", "d3.json"], "updated_at": "2016-03-23T05:06:32Z", "description": "MapBox + d3"}, {"readme": "This example shows how to make a simple slider using D3.\n\n<!-- Start of SimpleHitCounter Code -->\n<div align=\"center\"><a href=\"http://www.simplehitcounter.com\" target=\"_blank\"><img src=\"http://simplehitcounter.com/hit.php?uid=1953440&f=16777215&b=0\" border=\"0\" height=\"18\" width=\"83\" alt=\"web counter\"></a></div>\n<!-- End of SimpleHitCounter Code -->\n", "created_at": "2015-09-10T01:34:46Z", "api": ["d3.behavior.drag", "d3.select"], "updated_at": "2015-09-27T22:18:00Z", "description": "D3 Slider"}, {"readme": "", "created_at": "2013-09-20T18:39:12Z", "api": ["d3.dispatch", "d3.extent", "d3.time.scale", "d3.svg.brush", "d3.svg.axis", "d3.time.format", "d3.rebind", "d3.layout.histogram", "d3.max", "d3.scale.linear", "d3.scale.ordinal", "d3.range", "d3.scale.category20", "d3.select", "d3.json", "d3.chart.table", "d3.chart.scatter", "d3.chart.histogram", "d3.chart.brush", "d3.min"], "updated_at": "2016-03-05T06:37:45Z", "description": "d3 workshop"}, {"readme": "", "created_at": "2012-08-22T14:31:03Z", "api": ["d3.select", "d3.geo.path", "d3.geo.bounds", "d3.json"], "updated_at": "2016-01-05T17:12:07Z", "description": "MapBox + d3"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-11T01:33:50Z", "api": ["d3.select", "d3.max", "d3.extent", "d3.scale.linear", "d3.svg.axis", "d3.selectAll", "d3.csv"], "updated_at": "2015-12-11T01:33:50Z", "description": "AirBnB D3"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-11-08T23:33:11Z", "api": ["d3.select", "d3.scale.linear", "d3.range"], "updated_at": "2015-11-08T23:38:52Z", "description": "x3dom + d3"}, {"readme": "", "created_at": "2012-10-24T02:12:57Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.select", "d3.behavior.zoom", "d3.json", "d3.range"], "updated_at": "2015-10-12T00:28:09Z", "description": "d3 tiles"}, {"readme": "", "created_at": "2012-11-25T01:48:18Z", "api": ["d3.select", "d3.geo.path", "d3.geo.bounds", "d3.json"], "updated_at": "2015-10-13T04:48:05Z", "description": "MapBox + d3"}, {"readme": "Timeline\n========\nThis is an attempt to create a timeline object that can be implemented quickly and easily on a webpage.\n\nCanvas.js\n---------\nThe jsObject manages the canvas that the timeline is rendered on.\n\nSVG.css\n-------\nThis is the style component.\n\n\n\nThe bl.ocks.org is located [here](http://bl.ocks.org/randomblink/1022589acfbbadb14576).\n", "created_at": "2015-12-02T19:04:11Z", "api": ["d3.time.format", "d3.time.scale", "d3.select", "d3.svg.axis"], "updated_at": "2016-02-11T21:25:18Z", "description": "D3 objTimeline"}, {"readme": "Rectangular binning with [d3-heatmap](https://github.com/fabid/d3-heatmap/blob/master/heatmap.js)\nbased on [d3-hexbin demo](http://bl.ocks.org/xaranke/b956ee7215b7b50bc78a)\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n", "created_at": "2016-03-01T16:18:25Z", "api": ["d3.random.normal", "d3.range", "d3.heatmap", "d3.scale.linear", "d3.max", "d3.scale.identity", "d3.select"], "updated_at": "2016-03-02T14:50:07Z", "description": "d3-heatmap"}, {"readme": "", "created_at": "2014-07-16T06:09:32Z", "api": ["d3.dispatch", "d3.behavior.zoom", "d3.mouse", "d3.rebind", "d3.json", "d3.geo.orthographic", "d3.geo.albers", "d3.geo.mercator", "d3.geo.path", "d3.select", "d3.geo.graticule", "d3.geo.zoom", "d3.event.sourceEvent.preventDefault", "d3.selectAll"], "updated_at": "2016-05-06T04:27:41Z", "description": "d3.geo with d3.geo.zoom"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/Rico3734/'>Rico3734</a>'s block: <a href='http://bl.ocks.org/Rico3734/3a387f8041e1dc31d718'>D3 ruler</a>", "created_at": "2016-02-18T17:06:35Z", "api": ["d3.scale.identity", "d3.svg.axis", "d3.select"], "updated_at": "2016-02-18T17:06:36Z", "description": "D3 ruler"}, {"readme": "This is just an exercise to implement grouping of curves according to the values of one of several possible \"factors\".  In this example the factors are chosen only because they correspond to well-known *n*-somes, for *n*&nbsp;&isin;&nbsp;{2, 3, 4, 5}.\n\nI've refactored this code many times, trying to make the code readable, but I think I've failed miserably in this regard, especially with the d3.js stuff.  I think I just don't *get* d3.js...  **Comments welcome!**", "created_at": "2013-10-17T16:22:23Z", "api": ["d3.tsv", "d3.select", "d3.set", "d3.keys", "d3.max", "d3.zip", "d3.transpose", "d3.extent", "d3.merge", "d3.hsl", "d3.map", "d3.range", "d3.scale.linear", "d3.format", "d3.svg.line"], "updated_at": "2015-12-25T19:29:10Z", "description": "noob d3"}, {"readme": "This is a demonstration of D3 4.0\u2019s forthcoming adoption of ES6 modules, which will allow you to build a highly-optimized custom build using [d3-bundler](https://github.com/d3/d3-bundler). This example only exposes three fields on the `d3` object: d3.event, d3.select and d3.selectAll.\n\nThis minified and gzipped build of D3 is only 3,610 bytes, a savings of 93% over the default build!\n\nTo build:\n\n```\nnpm install\nnpm run build\n```\n\nYou may also run d3-bundler directly:\n\n```\nd3-bundler -- d3.js | uglifyjs -c -m -o d3.min.js\n```\n\nNote: this depends on a [pending bug fix](https://github.com/rollup/rollup/pull/9) to Rollup.\n", "created_at": "2015-05-29T17:28:47Z", "api": ["d3.select"], "updated_at": "2016-02-09T01:51:06Z", "description": "D3 Bundler"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/micahstubbs/'>micahstubbs</a>'s block: <a href='http://bl.ocks.org/micahstubbs/0678910da3463242d7ef'>transpacific partnership talks</a>\n\nforked from <a href='http://bl.ocks.org/mnorelli/'>mnorelli</a>'s block: <a href='http://bl.ocks.org/mnorelli/1d90cac98c9cbf5e27950496bdbb395a'>D3 playing</a>", "created_at": "2016-04-13T00:25:04Z", "api": ["d3.geo.mercator", "d3.select", "d3.geo.path", "d3.json", "d3.scale.ordinal", "d3.svg.legend", "d3.format"], "updated_at": "2016-04-13T00:25:04Z", "description": "D3 playing"}, {"readme": "Succinct graphing with [d3-jetpack](https://github.com/gka/d3-jetpack). \n\nCompare to the [original](http://bl.ocks.org/mbostock/3887118). ", "created_at": "2015-03-13T02:34:35Z", "api": ["d3.ns.qualify", "d3.select", "d3.scale.category10", "d3.scale.linear", "d3.scale.sqrt", "d3.svg.line", "d3.svg.axis", "d3.keys", "d3.selectAll", "d3.tsv", "d3.conventions", "d3.extent"], "updated_at": "2015-08-29T14:17:02Z", "description": "d3.conventions "}, {"readme": "", "created_at": "2011-11-15T19:07:58Z", "api": ["d3.selectAll", "d3.event.preventDefault", "d3.html", "d3.select"], "updated_at": "2016-02-09T00:51:00Z", "description": "D3 PJAX"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-02-03T20:05:11Z", "api": [], "updated_at": "2016-02-03T20:05:12Z", "description": "tweet d3"}, {"readme": "Remove transitions from d3 can make everything much simpler.", "created_at": "2015-03-17T01:37:37Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:17:15Z", "description": "d3 now (d3 without transitions)"}, {"readme": "Timemaps of my latest tweets with [d3-returntimemap](https://github.com/fabid/d3-returntimemap). Plain version and heatmap version with [d3-heatmap](https://github.com/fabid/d3-heatmap).\n\nThe peak around the 8 hour mark is due to my use of Buffer.\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/0c4cf357ab5ed3e90382'>d3-heatmap</a>", "created_at": "2016-03-01T18:28:35Z", "api": ["d3.csv", "d3.time.format", "d3.returntimemap", "d3.select", "d3.scale.log", "d3.extent", "d3.svg.axis", "d3.heatmap", "d3.scale.linear", "d3.max"], "updated_at": "2016-03-02T15:09:41Z", "description": "d3-returntimemap"}, {"readme": "# d3 tile plugin demo\n\n[demo](http://bl.ocks.org/4260548)\n[src](https://gist.github.com/4260548)\n\nModified from the\n[original d3 tile demo](http://bl.ocks.org/4132797)\nA demo of the\n[d3.geo.tile](https://github.com/d3/d3-plugins/tree/master/geo/tile)\nplugin, which determines which 256x256 tiles are visible in the viewport based\non a scale and translate. This demo combines the tile plugin with\nd3.behavior.zoom for panning and zooming, resulting in a a simple slippy map.\nBased partly on [an example](http://bl.ocks.org/3943330) by\n[Tom MacWright](http://macwright.org/).\n", "created_at": "2012-12-11T17:42:15Z", "api": ["d3.geo.tile", "d3.behavior.zoom", "d3.select"], "updated_at": "2015-10-13T21:48:11Z", "description": "d3.geo.tile"}, {"readme": "Rectangular binning with [d3-heatmap](https://github.com/fabid/d3-heatmap/blob/master/heatmap.js)\nbased on [d3-hexbin demo](http://bl.ocks.org/xaranke/b956ee7215b7b50bc78a)\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/320859ff9f2e2576cebf'>Rectangular binning - 2d histogram</a>\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/a1a7d04bdd34c2096eaf'>Rectangular binning - 2d histogram</a>\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/0c4cf357ab5ed3e90382'>d3-heatmap</a>\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/024452c42b94723b401d'>d3-returntimemap</a>", "created_at": "2016-03-02T14:33:55Z", "api": ["d3.csv", "d3.returntimemap", "d3.select", "d3.scale.log", "d3.extent", "d3.svg.axis", "d3.heatmap", "d3.scale.linear", "d3.max"], "updated_at": "2016-03-02T14:33:55Z", "description": "d3-returntimemap"}, {"readme": "Admiring Jason Davies' work on the [Weichel projection](https://www.jasondavies.com/maps/wiechel/)\n\n\n\n\n\n\n\n\n\n\n\n\n\nforked from <a href='http://bl.ocks.org/enjalot/'>enjalot</a>'s block: <a href='http://bl.ocks.org/enjalot/bd552e711b8325c64729'>visualizing map distortion</a>", "created_at": "2015-09-30T17:02:24Z", "api": ["d3.geo.wiechel", "d3.geo.orthographic", "d3.geo.path", "d3.timer", "d3.select", "d3.selectAll", "d3.geo.graticule", "d3.json", "d3.geo.aitoff", "d3.geo.boggs", "d3.geo.craster", "d3.geo.cylindricalEqualArea", "d3.geo.eckert1", "d3.geo.eckert3", "d3.geo.eckert4", "d3.geo.eckert5", "d3.geo.equirectangular", "d3.geo.fahey", "d3.geo.foucaut", "d3.geo.cylindricalStereographic", "d3.geo.ginzburg8", "d3.geo.kavrayskiy7", "d3.geo.larrivee", "d3.geo.mtFlatPolarSinusoidal", "d3.geo.mercator", "d3.geo.miller", "d3.geo.mollweide", "d3.geo.naturalEarth", "d3.geo.nellHammer", "d3.geo.hammer", "d3.geo.robinson", "d3.geo.sinusoidal", "d3.geo.vanDerGrinten", "d3.geo.wagner6", "d3.geo.wagner7", "d3.geo.winkel3", "d3.range"], "updated_at": "2015-09-30T18:14:36Z", "description": "d3.geo.weichel"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-10-16T07:48:07Z", "api": ["d3.select"], "updated_at": "2015-10-16T07:48:07Z", "description": "d3-01"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-09T01:21:36Z", "api": ["d3.select", "d3.selectAll"], "updated_at": "2015-12-09T01:32:32Z", "description": "D3 Intro"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\nTutorial from [http://alignedleft.com/tutorials](http://alignedleft.com/tutorials)", "created_at": "2016-01-17T03:47:13Z", "api": ["d3.scale.linear", "d3.max", "d3.select", "d3.format", "d3.svg.axis"], "updated_at": "2016-01-23T05:18:39Z", "description": "D3 tutorial"}, {"readme": "", "created_at": "2013-09-29T15:46:29Z", "api": ["d3.select", "d3.range", "d3.svg.line"], "updated_at": "2015-12-24T05:59:00Z", "description": "d3 pleasures"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-02-18T16:39:01Z", "api": ["d3.tsv", "d3.scale.identity", "d3.svg.axis", "d3.select"], "updated_at": "2016-02-18T16:39:01Z", "description": "D3 ruler"}, {"readme": "", "created_at": "2012-10-24T02:15:20Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.select", "d3.behavior.zoom", "d3.range"], "updated_at": "2015-10-12T00:27:58Z", "description": "d3 tiles"}, {"readme": "", "created_at": "2012-07-30T00:03:05Z", "api": ["d3.format", "d3.interpolateHsl", "d3.rgb", "d3.layout.pie", "d3.scale.linear", "d3.range", "d3.svg.arc", "d3.select", "d3.svg.line"], "updated_at": "2016-05-02T11:23:14Z", "description": "d3 gauge"}, {"readme": "", "created_at": "2011-10-19T23:49:21Z", "api": ["d3.select"], "updated_at": "2016-03-13T07:19:52Z", "description": "Hello, D3!"}, {"readme": "", "created_at": "2015-08-25T14:18:38Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:28:06Z", "description": "D3 Test"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-02-18T16:39:17Z", "api": ["d3.select"], "updated_at": "2016-02-18T16:39:17Z", "description": "D3 ruler"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-03-03T13:52:52Z", "api": ["d3.range", "d3.select"], "updated_at": "2016-03-03T13:52:52Z", "description": "D3 - AmaTest"}, {"readme": "# Hello World", "created_at": "2016-01-26T08:59:07Z", "api": ["d3.selectAll"], "updated_at": "2016-04-15T23:35:17Z", "description": "d3-chap01"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-10-26T22:53:55Z", "api": ["d3.select"], "updated_at": "2015-10-26T22:53:55Z", "description": "d3 mapping"}, {"readme": "", "created_at": "2013-07-30T04:09:15Z", "api": ["d3.select", "d3.selectAll", "d3.element.dropdownmenu"], "updated_at": "2015-12-20T09:48:52Z", "description": "d3-dropdownmenu"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-11-17T11:21:04Z", "api": ["d3.random.normal", "d3.select"], "updated_at": "2015-11-17T20:43:15Z", "description": "d3-introduction"}, {"readme": "", "created_at": "2013-01-03T17:05:56Z", "api": ["d3.select", "d3.keybinding", "d3.timer", "d3.entries", "d3.dispatch.apply", "d3.keys", "d3.rebind"], "updated_at": "2016-03-14T18:21:47Z", "description": "d3.keybinding"}, {"readme": "A simple animated clock icon made to delight MailChimp users (and folks like [Adam](https://twitter.com/thedigiguru/status/434316427340697600)). On load and refresh, the clock adjusts to the current time.\n\n### Thanks to all involved:\n- [Thierry\u2019s tweet](https://twitter.com/blancpain/statuses/394931135353851904) started it all\n- [Eric](https://twitter.com/muntzen) and [Federico](https://twitter.com/fholgado) got the ball rolling\n- [Guan](https://twitter.com/gliao) gave a quick Dojo widget walk-through for use across MailChimp\n- [Alvaro](https://twitter.com/alvasavi) noticed that the hour-hand wasn\u2019t right and `scaleBetweenHours` helped solve that\n- [Caleb](https://twitter.com/calebbritton) designed the previously static clock icon\n\n---\nLive on [bl.ocks](http://bl.ocks.org/wiinci/9218980) and [Codepen](http://codepen.io/wiinci/pen/flqmJ).\n", "created_at": "2014-02-25T22:11:44Z", "api": ["d3.scale.linear", "d3.select", "d3.svg.arc", "d3.interpolate"], "updated_at": "2015-08-29T13:56:46Z", "description": "D3 Clock"}, {"readme": "## Force Directed Graph with self sorting nodes  \n  The nodes arrange themselves by size, with the larger nodes migrating toward the center.\n### Features  \n  - **_<a id=\"metrics\">Metrics display and inputs</a>_**  \n  The _metrics panel_ across the top of the svg element gives a live display of the layout state.  The inputs on the left allow for the number of nodes and the force gravity and the friction to be adjusted live.  The current `alpha` value for the layout is displayed along with instantaneous and averaged tick time and the average calculation rate of the layout.  Changing any of the inputs re-starts the layout. \n  - _**<a id=\"gravity\">Accelerated annealing</a>**_  \n  The annealing calc is done every tick but, until alpha drops below 0.05, the viz is only updated every nth tick (n is currently 4).  This delivers significant reductions in the time to reach equilibrium (roughly a factor of 2). \n  - **_<a id=\"force\">Force dynamics</a>_**  \n  The force dynamics are a function of alpha, with two phases.  The initial phase has zero charge, low gravity and low damping.  This is designed to maximise mixing and sorting.  The second phase has a higher gravity and a large, negative charge and much higher damping, this is designed to clean up and stabilise the presentation of the nodes. \n  - **_<a id=\"collisions\">Controlling shape</a>_**  \nIf the nodes are all created on [0,0], then a circular shape results but it tends to be asymmetrical, with most of the smaller nodes thrown to one side.  This is due to extreme sensitivity to the distance from the center of the gravity field.  \n\n   ![](https://rawgit.com/cool-Blue/37d16cd71dd52bd655b4/raw/827ca53c2af0ccb7f66dc9a00d3aa8c998c38ed6/asymsort.png)\n\n    By creating the nodes on two points (randomly biased between the two) not only is the shape controlled but the efficiency of the sorting is markedly improved.  \n\n   ![](https://rawgit.com/cool-Blue/37d16cd71dd52bd655b4/raw/08e12d8eaf879165656e7d67f4716840d161a067/controlledshape.png)  \n    \n\n  - **_<a id=\"collisions\">Collisions between nodes</a>_**  \n  Based on [this](http://bl.ocks.org/mbostock/3231298) example but enhanced to sort the radial position of the nodes based on size, with larger nodes closer to the center.  Every collision is used as an opportunity to correct the relative positions. If they are out of position then the radial ordinates of the colliding nodes (in polar coordinates) are swapped.  The sorting efficiency is therefore reliant on good mixing in the collisions.  In order to maximise the mixing, the nodes are all created at the same point in the center of the graph.  When the nodes are swapped, the velocity of the bigger node is preserved while the smaller node is accelerated.  Thus, the sorting efficiency is enhanced because the smaller nodes are flung out from the collision point.  The mass is calculated assuming the nodes are spheres, using  r<sup>3</sup>, and the rebounds calculated according to relative \"mass\".  \n\n### d3 features  used\n  1.  [d3.layout.force](https://github.com/mbostock/d3/wiki/API-Reference#force)\n  2.  [Ordinal Scales](https://github.com/mbostock/d3/wiki/Ordinal-Scales)\n  1.  [d3.format](https://github.com/mbostock/d3/wiki/Formatting#d3_format)\n  1.  [d3.range](https://github.com/mbostock/d3/wiki/Arrays#d3_range)\n  1.  [d3.geom.quadtree](https://github.com/mbostock/d3/wiki/Quadtree-Geom)  \n  ", "created_at": "2015-09-02T20:20:23Z", "api": ["d3.select", "d3.format", "d3.scale.linear", "d3.layout.force", "d3.max", "d3.svg.axis", "d3.scale.ordinal", "d3.range", "d3.layout.histogram", "d3.geom.quadtree", "d3.scale.category10"], "updated_at": "2015-09-05T09:33:11Z", "description": "self sorting nodes in d3 fdg IV"}]