[{"readme": "This is a small code example that shows what [d3.layout.pie()](https://github.com/mbostock/d3/wiki/Pie-Layout). It adds properties including \"startAngle\", \"endAngle\" for the slices of a pie chart. This is example 24 from the screencast [Splitting Charts](https://github.com/curran/screencasts/tree/gh-pages/splittingCharts).\n\nMIT License\n\n<!-- Start of SimpleHitCounter Code -->\n<div align=\"center\"><a href=\"http://www.simplehitcounter.com\" target=\"_blank\"><img src=\"http://simplehitcounter.com/hit.php?uid=1979675&f=16777215&b=0\" border=\"0\" height=\"18\" width=\"83\" alt=\"web counter\"></a></div>\n<!-- End of SimpleHitCounter Code -->", "created_at": "2015-11-21T00:54:27Z", "api": ["d3.layout.pie", "d3.select", "d3.csv"], "updated_at": "2015-11-21T00:55:47Z", "description": "Introducing d3.layout.pie"}, {"readme": "This is the code for Chapter 5, Figure 5 from [D3.js in Action](http://manning.com/meeks/) showing a simple implementation of **d3.layout.pie()** with **d3.svg.arc()**.", "created_at": "2014-11-17T06:08:36Z", "api": ["d3.layout.pie", "d3.svg.arc", "d3.select"], "updated_at": "2016-03-18T03:35:01Z", "description": "Ch. 5, Fig. 5 - D3.js in Action"}, {"readme": "This is the code for Chapter 5 from [D3.js in Action](http://manning.com/meeks/) demonstrating how to make a donut chart using **d3.layout.pie()** and how to transition it using **attrTween** to calculate the transition arcs.", "created_at": "2014-11-17T06:12:43Z", "api": ["d3.json", "d3.nest", "d3.scale.category10", "d3.sum", "d3.layout.pie", "d3.svg.arc", "d3.select", "d3.interpolate"], "updated_at": "2016-03-18T03:34:50Z", "description": "Ch. 5, Fig. 6 - D3.js in Action"}, {"readme": "In [D3 3.5](https://github.com/mbostock/d3/releases/tag/v3.5.0), you can generate rounded arcs with d3.svg.arc cornerRadius and separate adjacent arcs with d3.layout.pie padAngle. The schematic representation above shows the circles used to round the arcs\u2019 corners.\n", "created_at": "2014-11-16T23:33:31Z", "api": ["d3.layout.pie", "d3.svg.arc", "d3.scale.category10", "d3.select", "d3.merge"], "updated_at": "2016-02-09T01:52:23Z", "description": "Arc Corners"}, {"readme": "[D3 3.5](https://github.com/mbostock/d3/releases/tag/v3.5.0)\u2019s d3.layout.pie supports optional padding between arcs. The sides of adjacent arcs are parallel, and the relative area (and angle) of arcs are approximately preserved.\n", "created_at": "2014-11-16T06:59:14Z", "api": ["d3.svg.arc", "d3.layout.pie", "d3.scale.category10", "d3.select"], "updated_at": "2016-02-09T01:52:26Z", "description": "Pie Padding"}, {"readme": "This donut chart is constructed from a CSV file storing the populations of various age groups. The chart employs a number of D3 features:\n\n* [d3.csv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales) - color encoding\n* [d3.svg.arc](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc) - display arcs\n* [d3.layout.pie](https://github.com/mbostock/d3/wiki/Pie-Layout) - compute arc angles from data\n", "created_at": "2012-10-14T03:46:39Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv"], "updated_at": "2016-05-19T17:36:02Z", "description": "Donut Chart"}, {"readme": "This is the code for Chapter 5, Figure 6 from [D3.js in Action](http://manning.com/meeks/) demonstrating how to make a donut chart using **d3.layout.pie()**.\n\nforked from <a href='http://bl.ocks.org/emeeks/'>emeeks</a>'s block: <a href='http://bl.ocks.org/emeeks/5ada6a7d00115f0e2f1e'>Ch. 5, Fig. 6 - D3.js in Action</a>", "created_at": "2016-02-17T23:50:03Z", "api": ["d3.json", "d3.nest", "d3.scale.category10", "d3.sum", "d3.layout.pie", "d3.svg.arc", "d3.select", "d3.selectAll", "d3.interpolate"], "updated_at": "2016-03-08T01:39:13Z", "description": "Pie Transition Ch. 5 - D3.js in Action"}, {"readme": "[D3 3.5](https://github.com/mbostock/d3/releases/tag/v3.5.0)\u2019s d3.layout.pie supports optional padding between arcs. The sides of adjacent arcs are parallel, and the relative area (and angle) of arcs are approximately preserved.\n\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/f098d146315be4d1db52'>Pie Padding</a>", "created_at": "2016-05-14T09:00:02Z", "api": ["d3.svg.arc", "d3.layout.pie", "d3.scale.category10", "d3.select"], "updated_at": "2016-05-14T09:00:02Z", "description": "Pie Padding"}, {"readme": "This pie chart is constructed from a CSV file storing the populations of various age groups. The chart employs a number of D3 features:\n\n* [d3.csv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales) - color encoding\n* [d3.svg.arc](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc) - display arcs\n* [d3.layout.pie](https://github.com/mbostock/d3/wiki/Pie-Layout) - compute arc angles from data\n", "created_at": "2012-10-14T03:57:04Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv"], "updated_at": "2016-02-09T01:41:04Z", "description": "Pie Chart"}, {"readme": "[D3 3.5](https://github.com/mbostock/d3/releases/tag/v3.5.0)\u2019s d3.layout.pie and d3.svg.arc support angular padding to separate adjacent arcs. Increasing the padAngle increases the separation between arcs, but preserves their relative area, which is necessary for accurate perception.\n\nThe sides of adjacent arcs are normally parallel. When the specified padding angle is large (relative to the angular width of each arc), the arcs are truncated into wedges. This may be avoided by increasing the inner radius.\n", "created_at": "2014-11-19T04:14:11Z", "api": ["d3.layout.pie", "d3.svg.arc", "d3.select", "d3.ease", "d3.timer"], "updated_at": "2016-02-09T01:52:17Z", "description": "Pie Padding II"}, {"readme": "This pie chart is constructed from a CSV file storing the populations of various age groups. The chart employs a number of D3 features:\n\n* [d3.csv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales) - color encoding\n* [d3.svg.arc](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc) - display arcs\n* [d3.layout.pie](https://github.com/mbostock/d3/wiki/Pie-Layout) - compute arc angles from data\n\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/3887235'>Pie Chart</a>\n\nforked from <a href='http://bl.ocks.org/Jay-Oh-eN/'>Jay-Oh-eN</a>'s block: <a href='http://bl.ocks.org/Jay-Oh-eN/5da8fc981efc46180000cc749b99465d'>SF AirBnB Listings: Pie Chart</a>", "created_at": "2016-04-29T16:13:16Z", "api": ["d3.scale.category20", "d3.select", "d3.csv", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2016-04-29T16:13:31Z", "description": "SF AirBnB Listings: Donut Chart"}, {"readme": "[D3 3.5](https://github.com/mbostock/d3/releases/tag/v3.5.0)\u2019s d3.layout.pie and d3.svg.arc support angular padding to separate adjacent arcs. Increasing the padAngle increases the separation between arcs, but preserves their relative area, which is necessary for accurate perception.\n\nThe sides of adjacent arcs are normally parallel. When the specified padding angle is large (relative to the angular width of each arc), the arcs are truncated into wedges. This may be avoided by increasing the inner radius.\n", "created_at": "2015-07-31T20:10:16Z", "api": ["d3.layout.pie", "d3.svg.arc", "d3.select", "d3.ease", "d3.timer"], "updated_at": "2015-08-29T14:26:24Z", "description": "Pie Padding II"}, {"readme": "This pie chart is constructed from a CSV file storing the populations of various age groups. The chart employs a number of D3 features:\n\n* [d3.csv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales) - color encoding\n* [d3.svg.arc](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc) - display arcs\n* [d3.layout.pie](https://github.com/mbostock/d3/wiki/Pie-Layout) - compute arc angles from data\n\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/3887235'>Pie Chart</a>", "created_at": "2016-05-05T13:50:13Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv"], "updated_at": "2016-05-05T13:50:13Z", "description": "Pie Chart"}, {"readme": "This pie chart is constructed from a CSV file storing the populations of various age groups. The chart employs a number of D3 features:\n\n* [d3.csv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales) - color encoding\n* [d3.svg.arc](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc) - display arcs\n* [d3.layout.pie](https://github.com/mbostock/d3/wiki/Pie-Layout) - compute arc angles from data\n\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/3887235'>final exam 2</a>", "created_at": "2016-05-05T14:11:20Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv"], "updated_at": "2016-05-05T14:11:35Z", "description": "final exam question 2"}, {"readme": "These donut charts are constructed from a CSV file storing the populations of various age groups in different states. (As a practical note, a [normalized stacked area chart](../3886394) facilitates easier comparison of values.) The chart employs a number of D3 features:\n\n* [d3.csv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales) - color encoding\n* d3.keys - compute column names\n* [d3.svg.arc](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc) - display arcs\n* [d3.layout.pie](https://github.com/mbostock/d3/wiki/Pie-Layout) - compute arc angles from data", "created_at": "2012-10-14T15:05:18Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.csv", "d3.keys", "d3.select"], "updated_at": "2016-02-09T01:41:09Z", "description": "Donut Multiples"}, {"readme": "These donut charts are constructed from a CSV file storing the populations of various age groups in different states. (As a practical note, a [normalized stacked area chart](../3886394) facilitates easier comparison of values.) The chart employs a number of D3 features:\n\n* [d3.csv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales) - color encoding\n* d3.keys - compute column names\n* [d3.svg.arc](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc) - display arcs\n* [d3.layout.pie](https://github.com/mbostock/d3/wiki/Pie-Layout) - compute arc angles from data", "created_at": "2015-07-09T00:21:19Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.csv", "d3.keys", "d3.select"], "updated_at": "2015-08-29T14:24:31Z", "description": ""}, {"readme": "This pie chart is constructed from a CSV file storing the populations of various age groups. The chart employs a number of D3 features:\n\n* [d3.csv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales) - color encoding\n* [d3.svg.arc](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc) - display arcs\n* [d3.layout.pie](https://github.com/mbostock/d3/wiki/Pie-Layout) - compute arc angles from data\n\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/3887235'>Pie Chart</a>", "created_at": "2016-05-06T14:58:09Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv"], "updated_at": "2016-05-06T14:58:09Z", "description": "Pie Chart"}, {"readme": "This pie chart is constructed from a CSV file storing the populations of various age groups. The chart employs a number of D3 features:\n\n* [d3.csv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales) - color encoding\n* [d3.svg.arc](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc) - display arcs\n* [d3.layout.pie](https://github.com/mbostock/d3/wiki/Pie-Layout) - compute arc angles from data\n\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/3887235'>Pie Chart</a>", "created_at": "2016-04-28T19:44:50Z", "api": ["d3.scale.category20", "d3.select", "d3.csv", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2016-04-30T16:39:00Z", "description": "SF AirBnB Listings: Pie Chart"}, {"readme": "This pie chart is constructed from a CSV file storing the populations of various age groups. The chart employs a number of D3 features:\n\n* [d3.csv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales) - color encoding\n* [d3.svg.arc](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc) - display arcs\n* [d3.layout.pie](https://github.com/mbostock/d3/wiki/Pie-Layout) - compute arc angles from data\n\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/3887235'>Pie Chart</a>\n\nforked from <a href='http://bl.ocks.org/Jay-Oh-eN/'>Jay-Oh-eN</a>'s block: <a href='http://bl.ocks.org/Jay-Oh-eN/5da8fc981efc46180000cc749b99465d'>SF AirBnB Listings: Pie Chart</a>\n\nforked from <a href='http://bl.ocks.org/Jay-Oh-eN/'>Jay-Oh-eN</a>'s block: <a href='http://bl.ocks.org/Jay-Oh-eN/8232e0e796a6dbddc33caffe4929d985'>SF AirBnB Listings: Pie Chart with Text Annotation</a>", "created_at": "2016-04-30T16:44:45Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv"], "updated_at": "2016-04-30T16:48:15Z", "description": "SF AirBnB Listings: Ring Chart with Text Annotation"}, {"readme": "This pie chart is constructed from a CSV file storing the populations of various age groups. The chart employs a number of D3 features:\n\n* [d3.csv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales) - color encoding\n* [d3.svg.arc](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc) - display arcs\n* [d3.layout.pie](https://github.com/mbostock/d3/wiki/Pie-Layout) - compute arc angles from data\n\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/3887235'>Pie Chart</a>\n\nforked from <a href='http://bl.ocks.org/Jay-Oh-eN/'>Jay-Oh-eN</a>'s block: <a href='http://bl.ocks.org/Jay-Oh-eN/5da8fc981efc46180000cc749b99465d'>SF AirBnB Listings: Pie Chart</a>", "created_at": "2016-04-30T16:39:02Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv"], "updated_at": "2016-04-30T16:43:40Z", "description": "SF AirBnB Listings: Pie Chart with Text Annotation"}, {"readme": "a ring chart (or a donut chart if you are hungry) that animates into existence.\n\nthis answer [http://stackoverflow.com/questions/20501067/animating-d3-donut-chart-on-load](http://stackoverflow.com/questions/20501067/animating-d3-donut-chart-on-load) had just the `tween` and `transition` code examples needed to animate each slice in sequence.\n\n---\n\nOriginal `README.md`:\n\nThis is the code for Chapter 5, Figure 6 from [D3.js in Action](http://manning.com/meeks/) demonstrating how to make a donut chart using **d3.layout.pie()**.\n\nforked from <a href='http://bl.ocks.org/emeeks/'>emeeks</a>'s block: <a href='http://bl.ocks.org/emeeks/5ada6a7d00115f0e2f1e'>Ch. 5, Fig. 6 - D3.js in Action</a>\n\nforked from <a href='http://bl.ocks.org/emeeks/'>emeeks</a>'s block: <a href='http://bl.ocks.org/emeeks/becd7b34d93b2d80d828'>Pie Transition Ch. 5 - D3.js in Action</a>", "created_at": "2016-03-25T18:27:16Z", "api": ["d3.json", "d3.select", "d3.nest", "d3.scale.ordinal", "d3.sum", "d3.layout.pie", "d3.svg.arc", "d3.selectAll", "d3.interpolate"], "updated_at": "2016-03-25T19:35:25Z", "description": "ring chart clockwise transition"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/0bff3139b4ff3fa3eb3f96dfb126ac4e'>d3</a>", "created_at": "2016-04-15T09:19:07Z", "api": ["d3.select"], "updated_at": "2016-04-15T09:19:07Z", "description": "d3"}, {"readme": "Using d3.carto.layer with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nEach d3.carto.layer is defined and then added to the map using map.addCartoLayer. You can access the added layers using map.layers(). Each layer fires a \"load\" event once successfully added to the map.\n\nThis example uses d3.carto.layer.layerType() aliases like d3.carto.layer.tile() and d3.carto.layer.topojson().", "created_at": "2014-07-15T23:13:03Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.carto.layer.topojson", "d3.carto.layer.csv", "d3.carto.layer.featureArray"], "updated_at": "2015-08-29T14:04:00Z", "description": "d3.carto.layer.alias - d3.carto.map"}, {"readme": "d3 gauge\n\nforked from <a href='http://bl.ocks.org/ImSraone/'>ImSraone</a>'s block: <a href='http://bl.ocks.org/ImSraone/a6f4f74a628d844e6afb'>d3 gauge</a>", "created_at": "2016-03-04T05:05:37Z", "api": ["d3.format", "d3.interpolateHsl", "d3.rgb", "d3.layout.pie", "d3.scale.linear", "d3.range", "d3.svg.arc", "d3.select", "d3.svg.line"], "updated_at": "2016-03-04T05:05:37Z", "description": "d3 gauge"}, {"readme": "[US State Plane projections for D3](https://github.com/gka/d3-geo-state-plane)!\n", "created_at": "2016-05-13T16:08:08Z", "api": ["d3.select", "d3.json", "d3.geo.albersUsa", "d3.geo.path", "d3.shuffle", "d3.range", "d3.geo.statePlane"], "updated_at": "2016-05-13T17:29:52Z", "description": "d3.geo.statePlane"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nSimple D3 graph.", "created_at": "2015-10-23T23:48:33Z", "api": ["d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.select", "d3.time.format", "d3.extent", "d3.max", "d3.svg.line"], "updated_at": "2015-10-24T07:33:28Z", "description": "D3 graphs"}, {"readme": "D3 Scales\n---------\nPlaying with D3 scale options, using transition\n\nA [Pen](http://codepen.io/madebyafox/pen/zrawWb) by [Made By A Fox](http://codepen.io/madebyafox) on [CodePen](http://codepen.io/).\n\n[License](http://codepen.io/madebyafox/pen/zrawWb/license).", "created_at": "2016-01-30T07:59:36Z", "api": ["d3.select", "d3.scale.linear", "d3.svg.axis", "d3.scale.pow", "d3.scale.sqrt", "d3.scale.log"], "updated_at": "2016-01-30T08:17:58Z", "description": "D3 Scales"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/tmcw/'>tmcw</a>'s block: <a href='http://bl.ocks.org/tmcw/3426132'>MapBox + d3</a>", "created_at": "2016-03-23T05:06:30Z", "api": ["d3.select", "d3.geo.path", "d3.geo.bounds", "d3.json"], "updated_at": "2016-03-23T05:06:32Z", "description": "MapBox + d3"}, {"readme": "\ufeff**Click to drag nodes.** \n\nThis is a [Fishbone or Ishikawa][ish] diagram, which shows contributions of\ndifferent levels of a hierarchy to a main concept.\n\nIt is implemented in [d3.js][d3], nominally using the\n_[Towards Reusable Charts][trc]_ pattern. Positioning is done by\n[`d3.layout.force`][force], though a fair amount of pre-processing along the\nlines of [`d3.layout.tree`][tree] is done.\n\nThis work could be significantly enhanced to improve the customizability of\nthe code, as well as interactivity of the diagram:\n\n- collapsible nodes\n- better layout of overlapping branches, twigs\n- more customizable marks (currently just text and lines, though sub-selection\n  should work just fine)\n- interactive creation\n  - drag and drop\n  - [Markdown-based][editor]\n\nIf you have insights, or make modifications, share them on\n[the thread on the d3-js discussion group][gg] that spurred this work!\n\n[ish]: http://en.wikipedia.org/wiki/Ishikawa_diagram\n[d3]: http://d3js.org\n[trc]: http://bost.ocks.org/mike/chart\n[gg]: https://groups.google.com/forum/#!topic/d3-js/4IaKPfeZDt8\n[force]: https://github.com/mbostock/d3/wiki/Force-Layout\n[tree]: https://github.com/mbostock/d3/wiki/Tree-Layout\n[editor]: http://bl.ocks.org/bollwyvl/9265219", "created_at": "2014-02-26T21:40:43Z", "api": ["d3.scale.log", "d3.layout.force", "d3.select", "d3.fishbone", "d3.event.stopPropagation", "d3.json"], "updated_at": "2015-12-04T13:17:14Z", "description": "d3 fishbone"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-11-08T23:33:11Z", "api": ["d3.select", "d3.scale.linear", "d3.range"], "updated_at": "2015-11-08T23:38:52Z", "description": "x3dom + d3"}, {"readme": "", "created_at": "2012-10-24T02:12:57Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.select", "d3.behavior.zoom", "d3.json", "d3.range"], "updated_at": "2015-10-12T00:28:09Z", "description": "d3 tiles"}, {"readme": "", "created_at": "2012-11-25T01:48:18Z", "api": ["d3.select", "d3.geo.path", "d3.geo.bounds", "d3.json"], "updated_at": "2015-10-13T04:48:05Z", "description": "MapBox + d3"}, {"readme": "Timeline\n========\nThis is an attempt to create a timeline object that can be implemented quickly and easily on a webpage.\n\nCanvas.js\n---------\nThe jsObject manages the canvas that the timeline is rendered on.\n\nSVG.css\n-------\nThis is the style component.\n\n\n\nThe bl.ocks.org is located [here](http://bl.ocks.org/randomblink/1022589acfbbadb14576).\n", "created_at": "2015-12-02T19:04:11Z", "api": ["d3.time.format", "d3.time.scale", "d3.select", "d3.svg.axis"], "updated_at": "2016-02-11T21:25:18Z", "description": "D3 objTimeline"}, {"readme": "", "created_at": "2014-07-16T06:09:32Z", "api": ["d3.dispatch", "d3.behavior.zoom", "d3.mouse", "d3.rebind", "d3.json", "d3.geo.orthographic", "d3.geo.albers", "d3.geo.mercator", "d3.geo.path", "d3.select", "d3.geo.graticule", "d3.geo.zoom", "d3.event.sourceEvent.preventDefault", "d3.selectAll"], "updated_at": "2016-05-06T04:27:41Z", "description": "d3.geo with d3.geo.zoom"}, {"readme": "Using d3.carto.minimap with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nDrag the main map around and zoom in and zoom out to see the bounds change in the minimap.\n\nThe minimap creates its own d3.carto.map and, with minimap.tandem() will take the layers from the main map and recreate them in the minimap.", "created_at": "2014-07-17T01:42:49Z", "api": ["d3.carto.map", "d3.select", "d3.carto.minimap", "d3.carto.minimap.map", "d3.carto.layer"], "updated_at": "2015-08-29T14:04:05Z", "description": "d3.carto.minimap - d3.carto.map"}, {"readme": "Using d3.carto.layer with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nEach d3.carto.layer is defined and then added to the map using map.addCartoLayer. You can access the added layers using map.layers(). Each layer fires a \"load\" event once successfully added to the map.\n", "created_at": "2014-07-14T04:42:59Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer"], "updated_at": "2015-08-29T14:03:57Z", "description": "d3.carto.layer - d3.carto.map"}, {"readme": "D3 2.10 adds support for [tab-separated values](http://en.wikipedia.org/wiki/Tab-separated_values) via d3.tsv. Similar to the previous d3.csv method, this makes it easy to load and parse TSV files.\n\n```javascript\nd3.tsv(\"data.tsv\", function(data) {\n  console.log(data[0].x);\n});\n```\n", "created_at": "2012-08-09T17:06:48Z", "api": ["d3.scale.linear", "d3.select", "d3.tsv", "d3.extent", "d3.svg.axis"], "updated_at": "2016-03-29T01:11:27Z", "description": "d3.tsv"}, {"readme": "This example shows how to make a simple slider using D3.\n\n<!-- Start of SimpleHitCounter Code -->\n<div align=\"center\"><a href=\"http://www.simplehitcounter.com\" target=\"_blank\"><img src=\"http://simplehitcounter.com/hit.php?uid=1953440&f=16777215&b=0\" border=\"0\" height=\"18\" width=\"83\" alt=\"web counter\"></a></div>\n<!-- End of SimpleHitCounter Code -->\n", "created_at": "2015-09-10T01:34:46Z", "api": ["d3.behavior.drag", "d3.select"], "updated_at": "2015-09-27T22:18:00Z", "description": "D3 Slider"}, {"readme": "", "created_at": "2013-09-20T18:39:12Z", "api": ["d3.dispatch", "d3.extent", "d3.time.scale", "d3.svg.brush", "d3.svg.axis", "d3.time.format", "d3.rebind", "d3.layout.histogram", "d3.max", "d3.scale.linear", "d3.scale.ordinal", "d3.range", "d3.scale.category20", "d3.select", "d3.json", "d3.chart.table", "d3.chart.scatter", "d3.chart.histogram", "d3.chart.brush", "d3.min"], "updated_at": "2016-03-05T06:37:45Z", "description": "d3 workshop"}, {"readme": "", "created_at": "2012-08-22T14:31:03Z", "api": ["d3.select", "d3.geo.path", "d3.geo.bounds", "d3.json"], "updated_at": "2016-01-05T17:12:07Z", "description": "MapBox + d3"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-11T01:33:50Z", "api": ["d3.select", "d3.max", "d3.extent", "d3.scale.linear", "d3.svg.axis", "d3.selectAll", "d3.csv"], "updated_at": "2015-12-11T01:33:50Z", "description": "AirBnB D3"}, {"readme": "", "created_at": "2013-10-19T21:50:28Z", "api": ["d3.select", "d3.scale.category10", "d3.svg.arc", "d3.layout.pie"], "updated_at": "2015-12-26T00:09:12Z", "description": "the simplest pie chart example"}, {"readme": "Succinct graphing with [d3-jetpack](https://github.com/gka/d3-jetpack). \n\nCompare to the [original](http://bl.ocks.org/mbostock/3887118). ", "created_at": "2015-03-13T02:34:35Z", "api": ["d3.ns.qualify", "d3.select", "d3.scale.category10", "d3.scale.linear", "d3.scale.sqrt", "d3.svg.line", "d3.svg.axis", "d3.keys", "d3.selectAll", "d3.tsv", "d3.conventions", "d3.extent"], "updated_at": "2015-08-29T14:17:02Z", "description": "d3.conventions "}, {"readme": "Timemaps of my latest tweets with [d3-returntimemap](https://github.com/fabid/d3-returntimemap). Plain version and heatmap version with [d3-heatmap](https://github.com/fabid/d3-heatmap).\n\nThe peak around the 8 hour mark is due to my use of Buffer.\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/0c4cf357ab5ed3e90382'>d3-heatmap</a>", "created_at": "2016-03-01T18:28:35Z", "api": ["d3.csv", "d3.time.format", "d3.returntimemap", "d3.select", "d3.scale.log", "d3.extent", "d3.svg.axis", "d3.heatmap", "d3.scale.linear", "d3.max"], "updated_at": "2016-03-02T15:09:41Z", "description": "d3-returntimemap"}, {"readme": "# d3 tile plugin demo\n\n[demo](http://bl.ocks.org/4260548)\n[src](https://gist.github.com/4260548)\n\nModified from the\n[original d3 tile demo](http://bl.ocks.org/4132797)\nA demo of the\n[d3.geo.tile](https://github.com/d3/d3-plugins/tree/master/geo/tile)\nplugin, which determines which 256x256 tiles are visible in the viewport based\non a scale and translate. This demo combines the tile plugin with\nd3.behavior.zoom for panning and zooming, resulting in a a simple slippy map.\nBased partly on [an example](http://bl.ocks.org/3943330) by\n[Tom MacWright](http://macwright.org/).\n", "created_at": "2012-12-11T17:42:15Z", "api": ["d3.geo.tile", "d3.behavior.zoom", "d3.select"], "updated_at": "2015-10-13T21:48:11Z", "description": "d3.geo.tile"}, {"readme": "Rectangular binning with [d3-heatmap](https://github.com/fabid/d3-heatmap/blob/master/heatmap.js)\nbased on [d3-hexbin demo](http://bl.ocks.org/xaranke/b956ee7215b7b50bc78a)\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/320859ff9f2e2576cebf'>Rectangular binning - 2d histogram</a>\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/a1a7d04bdd34c2096eaf'>Rectangular binning - 2d histogram</a>\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/0c4cf357ab5ed3e90382'>d3-heatmap</a>\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/024452c42b94723b401d'>d3-returntimemap</a>", "created_at": "2016-03-02T14:33:55Z", "api": ["d3.csv", "d3.returntimemap", "d3.select", "d3.scale.log", "d3.extent", "d3.svg.axis", "d3.heatmap", "d3.scale.linear", "d3.max"], "updated_at": "2016-03-02T14:33:55Z", "description": "d3-returntimemap"}, {"readme": "", "created_at": "2011-10-19T23:49:21Z", "api": ["d3.select"], "updated_at": "2016-03-13T07:19:52Z", "description": "Hello, D3!"}, {"readme": "", "created_at": "2015-08-25T14:18:38Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:28:06Z", "description": "D3 Test"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-02-18T16:39:17Z", "api": ["d3.select"], "updated_at": "2016-02-18T16:39:17Z", "description": "D3 ruler"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-03-03T13:52:52Z", "api": ["d3.range", "d3.select"], "updated_at": "2016-03-03T13:52:52Z", "description": "D3 - AmaTest"}, {"readme": "# Hello World", "created_at": "2016-01-26T08:59:07Z", "api": ["d3.selectAll"], "updated_at": "2016-04-15T23:35:17Z", "description": "d3-chap01"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-10-26T22:53:55Z", "api": ["d3.select"], "updated_at": "2015-10-26T22:53:55Z", "description": "d3 mapping"}, {"readme": "", "created_at": "2013-07-30T04:09:15Z", "api": ["d3.select", "d3.selectAll", "d3.element.dropdownmenu"], "updated_at": "2015-12-20T09:48:52Z", "description": "d3-dropdownmenu"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-11-17T11:21:04Z", "api": ["d3.random.normal", "d3.select"], "updated_at": "2015-11-17T20:43:15Z", "description": "d3-introduction"}, {"readme": "", "created_at": "2013-01-03T17:05:56Z", "api": ["d3.select", "d3.keybinding", "d3.timer", "d3.entries", "d3.dispatch.apply", "d3.keys", "d3.rebind"], "updated_at": "2016-03-14T18:21:47Z", "description": "d3.keybinding"}, {"readme": "A simple animated clock icon made to delight MailChimp users (and folks like [Adam](https://twitter.com/thedigiguru/status/434316427340697600)). On load and refresh, the clock adjusts to the current time.\n\n### Thanks to all involved:\n- [Thierry\u2019s tweet](https://twitter.com/blancpain/statuses/394931135353851904) started it all\n- [Eric](https://twitter.com/muntzen) and [Federico](https://twitter.com/fholgado) got the ball rolling\n- [Guan](https://twitter.com/gliao) gave a quick Dojo widget walk-through for use across MailChimp\n- [Alvaro](https://twitter.com/alvasavi) noticed that the hour-hand wasn\u2019t right and `scaleBetweenHours` helped solve that\n- [Caleb](https://twitter.com/calebbritton) designed the previously static clock icon\n\n---\nLive on [bl.ocks](http://bl.ocks.org/wiinci/9218980) and [Codepen](http://codepen.io/wiinci/pen/flqmJ).\n", "created_at": "2014-02-25T22:11:44Z", "api": ["d3.scale.linear", "d3.select", "d3.svg.arc", "d3.interpolate"], "updated_at": "2015-08-29T13:56:46Z", "description": "D3 Clock"}, {"readme": "Rectangular binning with [d3-heatmap](https://github.com/fabid/d3-heatmap/blob/master/heatmap.js)\nbased on [d3-hexbin demo](http://bl.ocks.org/xaranke/b956ee7215b7b50bc78a)\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n", "created_at": "2016-03-01T16:18:25Z", "api": ["d3.random.normal", "d3.range", "d3.heatmap", "d3.scale.linear", "d3.max", "d3.scale.identity", "d3.select"], "updated_at": "2016-03-02T14:50:07Z", "description": "d3-heatmap"}, {"readme": "", "created_at": "2014-02-21T13:49:16Z", "api": ["d3.select", "d3.svg.arc", "d3.layout.pie"], "updated_at": "2015-08-29T13:56:35Z", "description": "[D3.js] Pie chart"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/Rico3734/'>Rico3734</a>'s block: <a href='http://bl.ocks.org/Rico3734/3a387f8041e1dc31d718'>D3 ruler</a>", "created_at": "2016-02-18T17:06:35Z", "api": ["d3.scale.identity", "d3.svg.axis", "d3.select"], "updated_at": "2016-02-18T17:06:36Z", "description": "D3 ruler"}, {"readme": "This is just an exercise to implement grouping of curves according to the values of one of several possible \"factors\".  In this example the factors are chosen only because they correspond to well-known *n*-somes, for *n*&nbsp;&isin;&nbsp;{2, 3, 4, 5}.\n\nI've refactored this code many times, trying to make the code readable, but I think I've failed miserably in this regard, especially with the d3.js stuff.  I think I just don't *get* d3.js...  **Comments welcome!**", "created_at": "2013-10-17T16:22:23Z", "api": ["d3.tsv", "d3.select", "d3.set", "d3.keys", "d3.max", "d3.zip", "d3.transpose", "d3.extent", "d3.merge", "d3.hsl", "d3.map", "d3.range", "d3.scale.linear", "d3.format", "d3.svg.line"], "updated_at": "2015-12-25T19:29:10Z", "description": "noob d3"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/micahstubbs/'>micahstubbs</a>'s block: <a href='http://bl.ocks.org/micahstubbs/0678910da3463242d7ef'>transpacific partnership talks</a>\n\nforked from <a href='http://bl.ocks.org/mnorelli/'>mnorelli</a>'s block: <a href='http://bl.ocks.org/mnorelli/1d90cac98c9cbf5e27950496bdbb395a'>D3 playing</a>", "created_at": "2016-04-13T00:25:04Z", "api": ["d3.geo.mercator", "d3.select", "d3.geo.path", "d3.json", "d3.scale.ordinal", "d3.svg.legend", "d3.format"], "updated_at": "2016-04-13T00:25:04Z", "description": "D3 playing"}, {"readme": "", "created_at": "2012-07-30T00:03:05Z", "api": ["d3.format", "d3.interpolateHsl", "d3.rgb", "d3.layout.pie", "d3.scale.linear", "d3.range", "d3.svg.arc", "d3.select", "d3.svg.line"], "updated_at": "2016-05-02T11:23:14Z", "description": "d3 gauge"}, {"readme": "", "created_at": "2011-11-15T19:07:58Z", "api": ["d3.selectAll", "d3.event.preventDefault", "d3.html", "d3.select"], "updated_at": "2016-02-09T00:51:00Z", "description": "D3 PJAX"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-02-03T20:05:11Z", "api": [], "updated_at": "2016-02-03T20:05:12Z", "description": "tweet d3"}, {"readme": "This is a sample D3.js program", "created_at": "2016-02-15T08:53:52Z", "api": ["d3.select"], "updated_at": "2016-02-15T08:56:20Z", "description": "Sample D3.js Program"}, {"readme": "Remove transitions from d3 can make everything much simpler.", "created_at": "2015-03-17T01:37:37Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:17:15Z", "description": "d3 now (d3 without transitions)"}, {"readme": "[d3.svg.legend](https://github.com/emeeks/d3-svg-legend) provides for a simple legend that can be displayed horizontally or vertically and accepts a few different [d3 scale](https://github.com/mbostock/d3/wiki/Scales) types.", "created_at": "2014-08-26T20:30:42Z", "api": ["d3.scale.threshold", "d3.svg.legend", "d3.select", "d3.scale.category20", "d3.format"], "updated_at": "2015-08-29T14:05:45Z", "description": "D3-svg-legend (test)"}, {"readme": "A simple map example created with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** that loads a single geoJSON layer.\n", "created_at": "2014-09-18T22:21:22Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.geojson"], "updated_at": "2015-08-29T14:06:38Z", "description": "Simple Map - d3.carto"}, {"readme": "This file shows how to use the *conicConformalFrance* projection from [d3-composite-projections](http://rveciana.github.io/d3-composite-projections/).", "created_at": "2015-05-11T15:19:46Z", "api": ["d3.geo.conicConformalFrance", "d3.geo.path", "d3.select", "d3.json"], "updated_at": "2016-03-01T10:58:11Z", "description": "d3-composite-projections conicConformalFrance"}, {"readme": "This file shows how to use the *conicEquidistantJapan* projection from [d3-composite-projections](http://rveciana.github.io/d3-composite-projections/).", "created_at": "2015-12-18T18:15:33Z", "api": ["d3.geo.conicEquidistantJapan", "d3.geo.path", "d3.select", "d3.json"], "updated_at": "2016-03-01T10:56:07Z", "description": "d3-composite-projections conicEquidistantJapan"}, {"readme": "A test for wrapping using the [d3.geo.tile](https://github.com/d3/d3-plugins/tree/master/geo/tile) plugin.\n\nBased on [Mike Bostock\u2019s example](http://bl.ocks.org/mbostock/4132797).\n", "created_at": "2014-08-06T12:14:25Z", "api": ["d3.geo.tile", "d3.geo.mercator", "d3.behavior.zoom", "d3.select", "d3.mouse", "d3.format"], "updated_at": "2015-08-29T14:04:56Z", "description": "Wrapped d3.geo.tile"}, {"readme": "Mouseover or touch on a touch device to make particles. Built with [D3.js](http://mbostock.github.com/d3/). Based on [Mike Bostock\u2019s original](http://bl.ocks.org/1062544).\n", "created_at": "2012-05-08T08:16:27Z", "api": ["d3.scale.category20c", "d3.select", "d3.event.preventDefault", "d3.mouse", "d3.touches"], "updated_at": "2015-10-04T12:08:04Z", "description": "OMG Particles! (D3)"}, {"readme": "Reusable heatmap chart using Canvas for rendering and D3 for interactivity.\n\nHere is a great read about combining D3 + Canvas: [**Learnings from a D3.js addict on starting with Canvas**](http://www.visualcinnamon.com/2015/11/learnings-from-a-d3-js-addict-on-starting-with-canvas.html)\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-27T15:10:42Z", "api": ["d3.csv", "d3.select", "d3.scale.linear", "d3.time.scale", "d3.svg.axis", "d3.extent", "d3.range"], "updated_at": "2015-12-31T21:34:21Z", "description": "Heatmap (Canvas + D3)"}, {"readme": "Clustering in **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nIf you set the .cluster() property of a cartoLayer to true, it will cluster bsaed on a precomputed quadtree.\n\nThis is still very early on but it should get better.", "created_at": "2014-07-21T06:36:01Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer", "d3.carto.layer.csv"], "updated_at": "2015-08-29T14:04:17Z", "description": "Quadtree clustering - d3.carto.map"}, {"readme": "A map example created with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** that loads **[CartoDB](http://cartodb.com/)** tile layers with the **.tileType(\"cartodb\")**. These layers will reproject just like Stamen and Mapbox layers in projection and globe mode.", "created_at": "2015-03-15T03:52:13Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.topojson", "d3.carto.layer.csv", "d3.csv", "d3.carto.layer.xyArray", "d3.carto.layer.featureArray"], "updated_at": "2016-03-17T02:14:13Z", "description": "d3.carto - CartoDB layers"}, {"readme": "A map example created with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** that loads **[CartoDB](http://cartodb.com/)** tile layers with the **.tileType(\"cartodb\")**. These layers will reproject just like Stamen and Mapbox layers in projection and globe mode.", "created_at": "2015-09-08T07:51:38Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.topojson", "d3.carto.layer.csv", "d3.csv", "d3.carto.layer.xyArray", "d3.carto.layer.featureArray"], "updated_at": "2015-09-08T07:51:38Z", "description": "d3.carto - CartoDB layers"}, {"readme": "An example of [d3.svg.ribbon](https://github.com/emeeks/d3.svg.ribbon).\n\nDrag the circles to see the underlying single `svg:path` element re-interpolated based on the changing position of the points and their radii that are used to generate it. This is a different way of generating areas than `d3.svg.area` and might prove more suitable for some applications.\n\nforked from <a href='http://bl.ocks.org/emeeks/'>emeeks</a>'s block: <a href='http://bl.ocks.org/emeeks/a1e48992be56681e3f93'>d3.svg.ribbon example</a>\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/8829aa45703c893e5636'>d3.svg.ribbon example</a>", "created_at": "2015-09-02T03:29:53Z", "api": ["d3.svg.line", "d3.svg.ribbon", "d3.behavior.drag", "d3.select", "d3.selectAll"], "updated_at": "2015-09-02T03:29:53Z", "description": "d3.svg.ribbon example"}, {"readme": "This file shows how to use the *albersUsa* projection from [d3-composite-projections](http://rveciana.github.io/d3-composite-projections/). In this case, the example (and projection) [is copied directly from the d3 projection](http://bl.ocks.org/mbostock/4090848), but adding the borders a the composed zones.", "created_at": "2015-05-11T15:08:23Z", "api": ["d3.geo.albersUsa", "d3.geo.path", "d3.select", "d3.json"], "updated_at": "2016-03-01T10:59:14Z", "description": "d3-composite-projections albersUsa"}, {"readme": "Simple D3 Bar Chart - Bootcamp 2016\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\n\n\nforked from <a href='http://bl.ocks.org/mukhtyar/'>mukhtyar</a>'s block: <a href='http://bl.ocks.org/mukhtyar/89e0407a1828d59c72e7'>Simple D3 Bar Chart</a>", "created_at": "2016-03-24T19:32:51Z", "api": ["d3.select"], "updated_at": "2016-03-24T19:32:52Z", "description": "Simple D3 Bar Chart"}, {"readme": "Labeling features using addXYLayer **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nYou can add any array of objects with XY data by using d3.carto.layer.xyArray(). Here an array of centroid objects is made for the paths and then added to the map to display labels. Notice that the paths are added using addFeatureLayer because using addTopoJSON would load asynchronously and not have the data available to make the array for addXYLayer.\n", "created_at": "2014-07-12T21:07:14Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.json", "d3.carto.layer.featureArray", "d3.geo.path", "d3.geo.centroid", "d3.carto.layer.xyArray", "d3.selectAll"], "updated_at": "2015-08-29T14:03:54Z", "description": "addXYLayer - d3.carto.map"}, {"readme": "Changing markers with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nEach feature or point is added inside of a g element. You can then add whatever you want to that g element to create the symbols you want for your points. To do so, though, you need to use a different datum for the appended element. This doesn't seem like a good solution and will probably lead to the creation of a d3.carto.marker or equivalent at some point.", "created_at": "2014-07-12T20:51:24Z", "api": ["d3.carto.map", "d3.select"], "updated_at": "2015-08-29T14:03:54Z", "description": "Changing Markers - d3.carto.map"}, {"readme": "This is a fork of [Interrupting Chained Transitions](http://bl.ocks.org/mbostock/10520338). It is showing the power of d3.dispatch for building reusable components.", "created_at": "2014-04-13T23:30:26Z", "api": ["d3.scale.ordinal", "d3.dispatch", "d3.select", "d3.merge", "d3.range"], "updated_at": "2015-08-29T13:59:18Z", "description": "d3.dispatch + reusable components"}, {"readme": "A globe using orthographic projection with raster tiles from **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nIf you set map.mode(\"globe\") it will overwrite the projection with an orthographic projection and modify panning to allow for rotating a globe along two axes.", "created_at": "2014-07-26T01:40:38Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer", "d3.carto.layer.geojson", "d3.carto.layer.featureArray"], "updated_at": "2016-01-13T20:02:06Z", "description": "globe mode - d3.carto.map"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/b8c3d455ad814b086492'>Intro to D3 Talk</a>", "created_at": "2015-11-09T21:45:19Z", "api": ["d3.scale.ordinal", "d3.scale.category10", "d3.select"], "updated_at": "2015-11-09T21:45:19Z", "description": "Intro to D3 Talk"}, {"readme": "Changing markers with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nIn this example, the buttons show different markers used for the points, either simple SVG shapes, like the rectangle marker, or scaled circles, or images, or SVG paths either from an icon or from another D3 layout (a pie chart in this case). The Circle Marker button randomly selects one of several data attributes for each point and sizes the circle by that attribute, whereas the pie marker button creates a pie chart based off those attributes.\n\nAny point layer added with d3.carto.layer.csv or d3.carto.layer.xyArray automatically creates SVG circle elements for each point. These reside in a g.marker that you can access and replace the contents of in the same way you would with any other d3 data visualization. In this example I use d3.selectAll because there's only one points layer, but each layer has a .g() function that gives you access to the parent g element of that layer, which you can then use to select some or all of the child g.marker elements of that specific layer and change, update or replace content.\n", "created_at": "2014-09-03T21:03:35Z", "api": ["d3.selectAll", "d3.scale.linear", "d3.html", "d3.select", "d3.layout.pie", "d3.svg.arc", "d3.values", "d3.carto.map", "d3.carto.layer.tile", "d3.carto.layer.csv"], "updated_at": "2015-08-29T14:06:03Z", "description": "Changing Markers - d3.carto"}, {"readme": "d3 scatterplot example using the Breakfast Cereal Dataset from http://idvbook.com and based on the scatterplot example at http://bl.ocks.org/mbostock/3887118\n", "created_at": "2013-08-08T14:27:44Z", "api": ["d3.scale.linear", "d3.svg.axis", "d3.scale.category10", "d3.select", "d3.csv", "d3.min", "d3.max"], "updated_at": "2015-12-20T19:39:03Z", "description": "D3 Scatterplot Example"}, {"readme": "Testing out [aframe.io](https://aframe.io/) with [d3.js](http://d3js.org).\n\nSince AFrame works with DOM elements, you can use d3's selection API to generate and modify 3D elements, as well as handle \"mouse\" events (including the VR friendly \"fuse cursor\") as if it was SVG.\n\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/enjalot/'>enjalot</a>'s block: <a href='http://bl.ocks.org/enjalot/8be32e6f1f32920ba841'>aframe + d3 test</a>", "created_at": "2015-12-21T20:11:57Z", "api": ["d3.scale.linear", "d3.max", "d3.select"], "updated_at": "2015-12-21T20:12:06Z", "description": "aframe + d3 test_next project"}, {"readme": "Admiring Jason Davies' work on the [Weichel projection](https://www.jasondavies.com/maps/wiechel/)\n\n\n\n\n\n\n\n\n\n\n\n\n\nforked from <a href='http://bl.ocks.org/enjalot/'>enjalot</a>'s block: <a href='http://bl.ocks.org/enjalot/bd552e711b8325c64729'>visualizing map distortion</a>", "created_at": "2015-09-30T17:02:24Z", "api": ["d3.geo.wiechel", "d3.geo.orthographic", "d3.geo.path", "d3.timer", "d3.select", "d3.selectAll", "d3.geo.graticule", "d3.json", "d3.geo.aitoff", "d3.geo.boggs", "d3.geo.craster", "d3.geo.cylindricalEqualArea", "d3.geo.eckert1", "d3.geo.eckert3", "d3.geo.eckert4", "d3.geo.eckert5", "d3.geo.equirectangular", "d3.geo.fahey", "d3.geo.foucaut", "d3.geo.cylindricalStereographic", "d3.geo.ginzburg8", "d3.geo.kavrayskiy7", "d3.geo.larrivee", "d3.geo.mtFlatPolarSinusoidal", "d3.geo.mercator", "d3.geo.miller", "d3.geo.mollweide", "d3.geo.naturalEarth", "d3.geo.nellHammer", "d3.geo.hammer", "d3.geo.robinson", "d3.geo.sinusoidal", "d3.geo.vanDerGrinten", "d3.geo.wagner6", "d3.geo.wagner7", "d3.geo.winkel3", "d3.range"], "updated_at": "2015-09-30T18:14:36Z", "description": "d3.geo.weichel"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-10-16T07:48:07Z", "api": ["d3.select"], "updated_at": "2015-10-16T07:48:07Z", "description": "d3-01"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-09T01:21:36Z", "api": ["d3.select", "d3.selectAll"], "updated_at": "2015-12-09T01:32:32Z", "description": "D3 Intro"}, {"readme": "This file shows how to use the *conicConformalPortugal* projection from [d3-composite-projections](http://rveciana.github.io/d3-composite-projections/). Since the world layer is used, note that the Iberian Peninsula is clipped at the projection border. These projections work well when used at the place they are intended for.", "created_at": "2015-05-11T15:16:25Z", "api": ["d3.geo.conicConformalPortugal", "d3.geo.path", "d3.select", "d3.json"], "updated_at": "2016-03-01T10:58:41Z", "description": "d3-composite-projections conicConformalPortugal"}, {"readme": "Rotating [Boetti's map](http://www.moma.org/learn/moma_learning/alighiero-boetti-map-of-the-world-1989) using D3\n\n### ToDo's:\n\n* use Path2D to go from SVG path to HTML canvas in order to clip flag images.\n* See [D3.js Boetti](http://bl.ocks.org/espinielli/9ea56e041f6847dbe944)\n\n\nInspired by [Rotating Transverse Mercator](http://bl.ocks.org/mbostock/8015110)", "created_at": "2015-12-20T14:40:50Z", "api": ["d3.geo.robinson", "d3.geo.graticule", "d3.select", "d3.geo.path", "d3.timer"], "updated_at": "2015-12-20T15:31:54Z", "description": "Rotating D3.js Boetti "}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\nTutorial from [http://alignedleft.com/tutorials](http://alignedleft.com/tutorials)", "created_at": "2016-01-17T03:47:13Z", "api": ["d3.scale.linear", "d3.max", "d3.select", "d3.format", "d3.svg.axis"], "updated_at": "2016-01-23T05:18:39Z", "description": "D3 tutorial"}, {"readme": "This example shows how to make an SVG element link to an external page.\n\nThis has the expected behavior of normal links when you [open it in a new window](http://bl.ocks.org/curran/raw/88d03aa54097367eaae1/). When clicked, the link will open in the current tab. When clicked while holding the meta key (\"Command\" on Macs and \"Control\" on Windows), the link will open in a new tab.\n\nClicking the rectangle doesn't work correctly in the bl.ocks viewer, because it is in an iFrame (open the debugging console to see the iFrame-related error), but this technique of adding links to visual marks should work fine in your own D3 projects.\n\nThis is addressing the thread [href on d3 objects](https://groups.google.com/forum/#!topic/d3-js/3g-NfeUbSLQ) in the D3 Google Group.\n", "created_at": "2015-05-20T18:56:24Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:21:37Z", "description": "href on d3 objects"}, {"readme": "", "created_at": "2013-09-29T15:46:29Z", "api": ["d3.select", "d3.range", "d3.svg.line"], "updated_at": "2015-12-24T05:59:00Z", "description": "d3 pleasures"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-02-18T16:39:01Z", "api": ["d3.tsv", "d3.scale.identity", "d3.svg.axis", "d3.select"], "updated_at": "2016-02-18T16:39:01Z", "description": "D3 ruler"}, {"readme": "", "created_at": "2012-10-24T02:15:20Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.select", "d3.behavior.zoom", "d3.range"], "updated_at": "2015-10-12T00:27:58Z", "description": "d3 tiles"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/lilyc5459/'>lilyc5459</a>'s block: <a href='http://bl.ocks.org/lilyc5459/a35687613ab0f4991f37'>d3.js wiki visualization</a>\n\nforked from <a href='http://bl.ocks.org/CBasis/'>CBasis</a>'s block: <a href='http://bl.ocks.org/CBasis/9bae6529ccab4b902a50'>d3.js wiki visualization</a>", "created_at": "2016-04-22T05:16:14Z", "api": ["d3.tip", "d3.select", "d3.scale.linear", "d3.svg.axis", "d3.format", "d3.json", "d3.max"], "updated_at": "2016-04-22T05:16:15Z", "description": "d3.js wiki visualization"}, {"readme": "Word cloud implementation.\n\nExample of how to \n\n1.  Change style from default.  Uses linear scale\n\n2.  Alter word size\n\n3.  \"Fit\" it into the screen.  At first the words were appearing out of view to the left.\n\nUses Jason Davies excellent word cloud library\n[https://twitter.com/jasondavies](https://twitter.com/jasondavies)\n[https://github.com/jasondavies/d3-cloud](https://github.com/jasondavies/d3-cloud)", "created_at": "2013-08-29T19:36:08Z", "api": ["d3.dispatch", "d3.functor", "d3.rebind", "d3.scale.linear", "d3.layout.cloud", "d3.select"], "updated_at": "2016-04-25T21:20:22Z", "description": "D3 Word Cloud implementation"}, {"readme": "An example of [d3.layout.timeline](https://github.com/emeeks/d3.layout.timeline) that shows wars the United States has been involved in during its first 100 years (from Wikipedia). Entries are formatted like:\n\n```\nname,start,end,sphere\n\"Second Sumatran expedition\",\"01-01-1838\",\"12-31-1838\",\"Colonial\"\n\"Mexican\u2013American War\",\"01-01-1846\",\"12-31-1848\",\"Latin America\"\n\"Cayuse War\",\"01-01-1847\",\"12-31-1855\",\"Native\"\n\"Taiping Rebellion\",\"01-01-1850\",\"12-31-1864\",\"Colonial\"\n\"Apache Wars\",\"01-01-1851\",\"12-31-1900\",\"Native\"\n```\n\nBy default, `d3.layout.timeline` expects dates and `start` and `end` as the notation for the location of the start and end data, so you can see there aren't many settings for the layout.", "created_at": "2015-09-12T01:18:15Z", "api": ["d3.scale.linear", "d3.min", "d3.max", "d3.layout.timeline", "d3.scale.ordinal", "d3.csv", "d3.select"], "updated_at": "2016-03-16T15:46:48Z", "description": "d3.layout.timeline with dates"}, {"readme": "An example of [d3.layout.orbit](https://github.com/emeeks/d3.layout.orbit) that shows the different modes:\n\n**\"flat\"** is the default, demonstrated in earlier [examples that use flare.json](http://bl.ocks.org/emeeks/298e07ea67a640b5d9f4).\n\n**\"solar\"** arranges each satellite in its own ring, equally divided from the set size of the layout.\n\n**\"atomic\"** places 2 satellites in orbit in the first ring and 8 in every ring after that.\n\n**\"custom\"** is achieved by passing an array of integers. Each integer sets the number of satellites in that ring, with the final value used to set the number of satellites in all remaining rings. Under the hood, \"solar\" could be achieved by passing [1], \"atomic\" could be achieved by passing [2,8] and \"flat\" could be achieved by passing [9999].\n\nforked from <a href='http://bl.ocks.org/emeeks/'>emeeks</a>'s block: <a href='http://bl.ocks.org/emeeks/c8ef9d67acc044b368ef'>d3.layout.orbit modes</a>", "created_at": "2015-12-19T19:02:49Z", "api": ["d3.dispatch", "d3.rebind", "d3.layout.pie", "d3.json", "d3.scale.linear", "d3.layout.orbit", "d3.select", "d3.selectAll"], "updated_at": "2015-12-19T19:02:49Z", "description": "d3.layout.orbit modes"}, {"readme": "Using **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**'s built-in canvas rendering and HTML5 canvas's built-in toDataUrl() function to create small multiples of the same map.\n\nThis example cycles through the various numeric attributes of the point dataset and restyles the map by changing layer.markerColor and layer.strokeColor. You have to call map.refresh() to update the display and then select the canvas element associated with the map to get access to the image data as a data URL, which you can pass to img elements.\n\nThis method of accessing toDataUrl only works with layers drawn using canvas.", "created_at": "2015-09-08T08:43:15Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.topojson", "d3.carto.layer.csv", "d3.extent", "d3.scale.linear"], "updated_at": "2015-09-08T08:43:15Z", "description": "Small Maptiples - d3.carto"}, {"readme": "Working though the Frontend Masters d3js series.\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\n- d3js data bind using reddit/r/pics.json as data.\n- This works in blockbuilder but not in bl.ocks.org, why?\n\nforked from <a href='http://bl.ocks.org/hsuttong/'>hsuttong</a>'s block: <a href='http://bl.ocks.org/hsuttong/0055d87cfaecc5b06cd2'>d3 first transition</a>", "created_at": "2015-11-17T10:42:45Z", "api": ["d3.select", "d3.json"], "updated_at": "2015-11-17T23:03:46Z", "description": "d3 first svg"}, {"readme": "Demo of how the properties added by d3.layout.partition are shared between visualizations referencing the same underlying data. Both charts should resize, but instead the first chart adopts the ring proportions of the second chart when the `.arc` function is called again.", "created_at": "2014-06-30T14:05:26Z", "api": ["d3.json", "d3.scale.category20c", "d3.scale.linear", "d3.select", "d3.layout.partition", "d3.svg.arc"], "updated_at": "2015-08-29T14:03:16Z", "description": "d3.layout.partition issue"}, {"readme": "Working though the Frontend Masters d3js series.\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\n- d3js data bind using hardcoded array as data, without SVG.\n\n\nForked from <a href='http://bl.ocks.org/hsuttong/'>hsuttong</a>'s block: <a href='http://bl.ocks.org/hsuttong/4a7f517bec51adc6e7bc'>d3 first bar plot</a>", "created_at": "2015-11-17T09:06:37Z", "api": ["d3.select"], "updated_at": "2015-11-17T11:19:53Z", "description": "d3 first transition"}, {"readme": "An implementation of [d3.layout.forceInABox](https://github.com/john-guerra/forceInABox) which implements a method to separate nodes in a network visually based on some kind of group membership.\n\nIn this case, the group is the community membership of the node as determined by Louvain modularity using [jLouvain.js](https://github.com/upphiminn/jLouvain).", "created_at": "2015-07-29T01:40:32Z", "api": ["d3.layout.force", "d3.map", "d3.layout.treemap", "d3.ascending", "d3.csv", "d3.scale.ordinal", "d3.layout.forceInABox", "d3.select", "d3.selectAll"], "updated_at": "2016-03-16T15:50:20Z", "description": "Example of d3.layout.forceInABox"}, {"readme": "An example of [d3.layout.orbit](https://github.com/emeeks/d3.layout.orbit) that shows the different modes:\n\n**\"flat\"** is the default, demonstrated in earlier [examples that use flare.json](http://bl.ocks.org/emeeks/298e07ea67a640b5d9f4).\n\n**\"solar\"** arranges each satellite in its own ring, equally divided from the set size of the layout.\n\n**\"atomic\"** places 2 satellites in orbit in the first ring and 8 in every ring after that.\n\n**\"custom\"** is achieved by passing an array of integers. Each integer sets the number of satellites in that ring, with the final value used to set the number of satellites in all remaining rings. Under the hood, \"solar\" could be achieved by passing [1], \"atomic\" could be achieved by passing [2,8] and \"flat\" could be achieved by passing [9999].", "created_at": "2014-12-28T00:57:36Z", "api": ["d3.dispatch", "d3.rebind", "d3.layout.pie", "d3.json", "d3.scale.linear", "d3.layout.orbit", "d3.select", "d3.selectAll"], "updated_at": "2016-03-17T02:16:29Z", "description": "d3.layout.orbit modes"}, {"readme": "An example of [d3.layout.orbit](https://github.com/emeeks/d3.layout.orbit) that shows the different modes:\n\n**\"flat\"** is the default, demonstrated in earlier [examples that use flare.json](http://bl.ocks.org/emeeks/298e07ea67a640b5d9f4).\n\n**\"solar\"** arranges each satellite in its own ring, equally divided from the set size of the layout.\n\n**\"atomic\"** places 2 satellites in orbit in the first ring and 8 in every ring after that.\n\n**\"custom\"** is achieved by passing an array of integers. Each integer sets the number of satellites in that ring, with the final value used to set the number of satellites in all remaining rings. Under the hood, \"solar\" could be achieved by passing [1], \"atomic\" could be achieved by passing [2,8] and \"flat\" could be achieved by passing [9999].", "created_at": "2015-11-08T15:01:21Z", "api": ["d3.dispatch", "d3.rebind", "d3.layout.pie", "d3.json", "d3.scale.linear", "d3.layout.orbit", "d3.select", "d3.selectAll"], "updated_at": "2015-11-08T15:01:21Z", "description": "d3.layout.orbit modes"}, {"readme": "UPDATE:  ~~The Vector Tiles are not being served at this time by Openstreetmap.  Try later or a different provider [(example)](http://tile.openstreetmap.us/vectiles-water-areas/13/2408/3077.json)~~  Services seem to have resumed\n\nA simple test of extending the L.TileLayer to fetch geoJSON tiles from openstreetmap and render them with d3.   This is probably not the most efficient way to do this, as we accept empty image tags  (from the standard TileLayer) and use them as containers for the data/requests.", "created_at": "2013-05-07T00:24:37Z", "api": ["d3.select", "d3.geo.path", "d3.json"], "updated_at": "2016-04-28T07:18:51Z", "description": "D3 GeoJSON in Leaflet"}, {"readme": "", "created_at": "2014-06-12T14:26:55Z", "api": ["d3.select"], "updated_at": "2016-03-18T10:27:24Z", "description": "RequireJS and D3"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-01-19T14:37:47Z", "api": ["d3.scale.category20b", "d3.select"], "updated_at": "2016-01-19T14:40:22Z", "description": "d3 colors for nick"}, {"readme": "", "created_at": "2012-08-09T17:24:26Z", "api": ["d3.time.scale", "d3.select", "d3.svg.axis"], "updated_at": "2016-02-09T01:30:45Z", "description": "d3.time.scale nice"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-07T10:54:33Z", "api": ["d3.scale.linear", "d3.scale.category10", "d3.extent", "d3.csv"], "updated_at": "2015-12-08T09:08:56Z", "description": "Intro to D3"}, {"readme": "", "created_at": "2014-03-04T22:47:08Z", "api": ["d3.svg.brush", "d3.keys", "d3.extent", "d3.scale.linear", "d3.svg.axis", "d3.select", "d3.layout.force", "d3.behavior.zoom", "d3.selectAll", "d3.set", "d3.scale.quantize"], "updated_at": "2015-09-24T04:15:43Z", "description": "GEXF D3 Simple Example"}, {"readme": "", "created_at": "2013-06-25T16:04:40Z", "api": ["d3.time.hour", "d3.range", "d3.scale.ordinal", "d3.select", "d3.svg.arc", "d3.scale.linear", "d3.time.day", "d3.time.day.offset", "d3.time.format", "d3.layout.stack"], "updated_at": "2015-12-18T23:09:22Z", "description": "d3 tron style wip"}, {"readme": "", "created_at": "2012-02-14T18:58:49Z", "api": ["d3.select"], "updated_at": "2015-09-30T16:48:00Z", "description": "d3 tspan append"}, {"readme": "", "created_at": "2013-01-31T22:48:37Z", "api": ["d3.time.scale", "d3.select", "d3.svg.axis"], "updated_at": "2015-12-12T00:58:55Z", "description": "D3 time.scale minor lines"}, {"readme": "", "created_at": "2015-04-23T13:41:38Z", "api": ["d3.scale.category20", "d3.range", "d3.geom.voronoi", "d3.select"], "updated_at": "2015-08-29T14:19:46Z", "description": "Voronoi (d3, svg, #SimpleExample)"}, {"readme": "", "created_at": "2013-12-23T13:20:06Z", "api": ["d3.select", "d3.range", "d3.scale.ordinal", "d3.svg.arc"], "updated_at": "2016-01-01T05:09:21Z", "description": "D3 Clock / Calendar"}, {"readme": "", "created_at": "2014-06-30T23:00:18Z", "api": ["d3.json", "d3.layout.partition", "d3.scale.category20c", "d3.scale.linear", "d3.select", "d3.svg.arc"], "updated_at": "2015-08-29T14:03:17Z", "description": "d3.layout.partition issue response"}, {"readme": "", "created_at": "2012-02-14T19:02:36Z", "api": ["d3.select"], "updated_at": "2015-09-30T16:48:01Z", "description": "d3 tspan append"}, {"readme": "Modified version of Quadtree sample from [http://bl.ocks.org/mbostock/4343214](http://bl.ocks.org/mbostock/4343214)\nThis version uses Enter,Exit, Update pattern for selecting small portions of larger dataset (here 100T points) with quadtree filtering.\nThis speed up rendering as only relatively small amount of points (given small brush) has to be rendered.\nThis might be useful for maps zooming into details and panning/moving there.\nAnother sources [looked at](http://bl.ocks.org/calvinmetcalf/4963273)\n\nMove around the brush to discover generated points.\n", "created_at": "2014-04-04T11:13:20Z", "api": ["d3.range", "d3.geom.quadtree", "d3.svg.brush", "d3.scale.identity", "d3.select"], "updated_at": "2015-08-29T13:58:07Z", "description": "Another brushing with d3"}, {"readme": "", "created_at": "2014-03-04T22:29:16Z", "api": ["d3.svg.brush", "d3.keys", "d3.extent", "d3.scale.linear", "d3.svg.axis", "d3.select", "d3.layout.force", "d3.behavior.zoom", "d3.selectAll", "d3.set", "d3.scale.quantize", "d3.max"], "updated_at": "2015-08-29T13:57:00Z", "description": "GEXF D3 Complex Example"}, {"readme": "", "created_at": "2015-09-22T12:47:48Z", "api": ["d3.geo.stream", "d3.geo.projection", "d3.merge", "d3.geo.centroid", "d3.geo.rotation", "d3.geo.august.raw.invert", "d3.geo.equirectangular", "d3.geo.circle", "d3.geo.cylindricalEqualArea.raw", "d3.geo.collignon.raw", "d3.geo.collignon.raw.invert", "d3.range", "d3.geo.interpolate", "d3.geo.gnomonic.raw", "d3.geo.gnomonic.raw.invert", "d3.select", "d3.geo.hammer", "d3.geo.path", "d3.geo.graticule", "d3.json"], "updated_at": "2015-09-22T12:48:06Z", "description": "D3 Geo Projection Plugin"}, {"readme": "Click to add new points. Hit the DELETE key to remove the selected point. Use the dropdown menu to change the interpolation mode.", "created_at": "2015-04-28T10:53:06Z", "api": ["d3.range", "d3.svg.line", "d3.select", "d3.event.preventDefault", "d3.event.stopPropagation", "d3.mouse"], "updated_at": "2015-08-29T14:20:06Z", "description": "D3 Spline Editor"}, {"readme": "", "created_at": "2012-03-03T10:38:10Z", "api": ["d3.range", "d3.interpolateRgb", "d3.select", "d3.layout.stack", "d3.max", "d3.svg.area"], "updated_at": "2016-04-03T22:37:10Z", "description": "Interactive Streamgraph D3"}, {"readme": "", "created_at": "2014-11-20T03:58:40Z", "api": ["d3.svg.arc", "d3.layout.pie", "d3.scale.category10", "d3.select"], "updated_at": "2016-02-09T01:52:05Z", "description": "Arc Corners IV"}, {"readme": "## hello markdown\n\n\n\n\n\n\n\n\n\n\n", "created_at": "2015-09-09T02:19:09Z", "api": ["d3.select"], "updated_at": "2015-09-09T06:34:46Z", "description": "d3.bayview walkthru"}, {"readme": "", "created_at": "2015-11-02T20:30:43Z", "api": ["d3.select", "d3.scale.linear", "d3.scale.ordinal", "d3.svg.axis", "d3.csv", "d3.max"], "updated_at": "2015-11-03T18:55:49Z", "description": "Responsive bar chart d3"}, {"readme": "# A little blurb to settle the nerves \ufffd\ufffd <a href=\"http://bl.ocks.org/3480186\" title=\"view this gist via bl.ocks.org\">?</a> <a href=\"http://bl.ocks.org/GerHobbelt\" title=\"view a list of all my gists at bl.ocks.org\">8</a>\n\nThis demo expands on the standard streamgraph demo in several ways: \n\n- generates a (bogus) set of tags, one for each series shown in the streamgraph.\n- these 'tags' are printed at the top of the graph as a legenda: the layout logic exploys SVG `node.getBBox()` to determine the exact pixel cost (width/height) of each tag and distributes them evenly across the horizontal expanse.\n- mixes the above with [Google] WebFonts. <font color=\"red\">That got me a nasty surprise, which I fixed with a timer-delayed action  and since Safari's behaviour raised a few hairs I arrived at the FOUT pages ('flash/flicker of unstyled content') and good cause to further enhance my timer-based hack; I added the timeout after looking at Paul Irish's blog page. Unless someone can prove me wrong, I think I got the bugger nailed. (Nasty polling way to check for font loaded and rendered, though...)</font>\n- hover and click event in legenda animate = fade the streams, and vice versa.\n\n## Positioning tags in the streams\n\nAnd then there's the important bit of course: one way to find the 'proper spot' in each stream to print the tag, as big as possible.\nAs can be seen in the code (bottom section of index.hmtl) this was a quest; I didn't commit all the iterations into git, but the 'improvement #x' comments are indicative of what came after I finally got the basic approach nailed - which only worked for a large enough data set as every 'tag' had to span multiple [x] data points to allow this simplistic algorithm to deliver something near usable.\n\nThe improvements now allow for small datasets as they are sliced/interpolated at a 1px step to produce (interpolated) data points to make the tag placement algorithm work as desired.\n\n## How I got here\n\nThe general idea was to scan each stream polygon from left to right and see where we might find a horizontal-enough section that could fit the tag, in its smallest form or maybe bigger. Then continue with the scan in order to find the 'best' location by picking the top 1 from the candidate set.\n\nThis started out as code which located the first ('left-most') [x] datapoint which was 'high enough' (.y value!) to make a chance of containing the tag text bbox. Then the code would interpolate the left-most x position for which the .y was exactly the minimum required, and from there the code went to scan to the right to find when we'd hit a right edge, either a downwards upper edge (.y0 + .y) or a upwards going lower edge (.y0). This still lacked the 'growing' code which is needed to find out how big we can scale the text vertically, but somewhere in there I screwed up and got eaten by bugs. \n\nSo I ditched that part of the code and went for the 'lazy method' as you see now, which was intended as a speed optimization for that original approach: if you'ld have enough data points, the interpolation tacics wouldn't be required as with sufficient data points, every pixel would be covered by an explicit datapoint anyhow.\nAfter a bit of testing and headscratching due to yet another off-by-one mistake of mine I got where I am today (seek out the `if(0)` in the code to see the visual debugging of red point indicating text x,y and green box indicating the detected largest rectangle fitting the given stream).\n\nThen a bit of pondering led to the decision to keep the 'lazy method' as the only method (so that `TODO` comment at the bottom is now practically bogus) and just 'tweak' small datasets into becomes virtually large datasets by altering the stepsize in the scan loop to a non-integer, minimal step size. And the rest is history...\n\n\n", "created_at": "2012-08-26T14:27:58Z", "api": ["d3.layout.stack", "d3.interpolateRgb", "d3.max", "d3.svg.area", "d3.select", "d3.timer", "d3.selectAll", "d3.range"], "updated_at": "2015-10-09T09:28:06Z", "description": "Interactive Streamgraph D3"}, {"readme": "### Aim:\n\nCreate a simple algebra game based on [Super Shapes](http://nrich.maths.org/1056)\n\n----------\n\nThe value of the circle changes in each refresh.\nCan you discover its value, by using the given value of the triangle and square, alongside the total value of the shapes?", "created_at": "2014-06-20T16:40:39Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:02:50Z", "description": "D3 | Algebra super shapes"}, {"readme": "Cuarto ejemplo del taller *Mapas web interactivos con D3.js* en el programa de las [9as Jornadas SIG Libre ](http://www.sigte.udg.edu/jornadassiglibre/programa/talleres/).\n\nEn este ejemplo se muestra como usar un layout de D3.js.\n\nEl layout usado se llama *pie layout* y sirve para hacer gr\u00e1ficos tipo tarta, pero tambi\u00e9n se puede usar para representar los esca\u00f1os en el Congreso de los Diputados, como en este caso.\n\nLos datos son de la encuesta GAD3, del 9-13 de enero de 2015. Fuente: [Wikipedia](http://es.wikipedia.org/wiki/Anexo:Sondeos_de_intenci%C3%B3n_de_voto_para_las_elecciones_generales_de_Espa%C3%B1a_de_2015)", "created_at": "2015-02-11T08:31:45Z", "api": ["d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv", "d3.rgb"], "updated_at": "2015-08-29T14:15:14Z", "description": "JSL 2015: Pie Layout"}, {"readme": "This example shows how to use the conicConformalEurope projection from [d3-composite-projections](http://rveciana.github.io/d3-composite-projections/).", "created_at": "2015-09-02T21:08:33Z", "api": ["d3.geo.conicConformalEurope", "d3.geo.graticule", "d3.geo.path", "d3.select", "d3.json"], "updated_at": "2016-02-29T16:18:57Z", "description": "d3-composite-projections conicConformalEurope"}, {"readme": "The first 15 seconds of the D3 show reel. See full video at <http://vimeo.com/29862153>. Includes seamless transitions between the following visualization types:\n\n* lines\n* horizons\n* areas\n* stacked areas\n* streamgraph\n* overlapping areas\n* grouped bars\n* stacked bars\n* bars\n* donut\n\nAdmittedly, these aren\u2019t the most useful visualizations; their purpose is not to inform but to demonstrate D3\u2019s capability for producing dynamic visualizations with custom transitions. They *do* show real data (the monthly closing price for ten years\u2019 worth of stock data), but I didn\u2019t include axes for date or price. See the [axis component](http://bl.ocks.org/1166403) for a better example. Also, the stacked visualizations aren\u2019t especially meaningful, unless you imagine owning a portfolio with equal parts AAPL, AMZN, IBM and MSFT. Similarly, the bars and donuts represent the *average* price (or sum) during this time period.\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/1256572'>D3 Show Reel</a>", "created_at": "2016-02-02T17:46:17Z", "api": ["d3.scale.category10", "d3.select", "d3.svg.line", "d3.svg.area", "d3.csv", "d3.time.format", "d3.nest", "d3.max", "d3.sum", "d3.time.scale", "d3.scale.linear", "d3.min", "d3.timer", "d3.scale.ordinal", "d3.range", "d3.layout.stack", "d3.zip.apply", "d3.layout.pie", "d3.svg.arc", "d3.interpolate"], "updated_at": "2016-02-02T17:46:19Z", "description": "D3 Show Reel"}, {"readme": "This example demonstrates use of the [d3-legend library](https://github.com/susielu/d3-legend).\n\nThe color scale comes from [ColorBrewer](http://bl.ocks.org/mbostock/5577023).\n", "created_at": "2015-08-06T19:33:22Z", "api": ["d3.select", "d3.scale.quantize", "d3.legend.color", "d3.format", "d3.scale.linear", "d3.legend.size"], "updated_at": "2015-08-29T14:26:48Z", "description": "Using d3-legend"}, {"readme": "Simple D3 Bar Chart - Bootcamp 2016\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\n", "created_at": "2016-03-24T19:27:40Z", "api": ["d3.select"], "updated_at": "2016-03-24T19:32:12Z", "description": "Simple D3 Bar Chart"}, {"readme": "Attempting to reimplement the stocks example from Cubism with the [d3.horizon](https://github.com/d3/d3-plugins/tree/master/horizon) plugin.\n\nA few notes so far:\n\n* d3.horizon does not expose d3.scales, which makes it hard to create axes\n* d3.horizon seems to expect an array of data which map to pixels. It would be more convenient the days in the year didn't have to be enumerated in this example, to fill in gaps. Without doing this, the chart appears to render fine but lacks gaps and is therefore wrong if the x-axis is a linear timecale.\n", "created_at": "2014-04-30T04:54:37Z", "api": ["d3.time.format", "d3.horizon", "d3.time.scale", "d3.extent", "d3.svg.axis", "d3.select", "d3.csv", "d3.scale.linear", "d3.range", "d3.timer.flush", "d3.svg.area"], "updated_at": "2015-08-29T14:00:46Z", "description": "d3.horizon Example"}, {"readme": "This is a follow on from the [simple scatterplot](http://bl.ocks.org/d3noob/38744a17f9c0141bcd04) used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is aimed at demonstrating the use of the `.filter` statement in d3.js and should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.", "created_at": "2014-06-22T18:39:22Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2015-08-29T14:02:53Z", "description": "Filtering in d3.js"}, {"readme": "This is my first example using the [D3 trail layout](https://github.com/bmschmidt/D3-trail) made by [Benjamin Schmidt](https://github.com/bmschmidt).\nThere is no complete *hellow world* example yet in the official docs, so I created this one.", "created_at": "2014-07-05T08:56:32Z", "api": ["d3.select", "d3.layout.trail"], "updated_at": "2015-08-29T14:03:31Z", "description": "D3 Trail Layout example"}, {"readme": "Testing out [aframe.io](https://aframe.io/) with [d3.js](http://d3js.org).\n\nAlthough a-frame has its animation method based on tween.js, we can use d3's transition method to animate the DOM.\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/enjalot/'>enjalot</a>'s block: <a href='http://bl.ocks.org/enjalot/8be32e6f1f32920ba841'>aframe + d3 test</a>", "created_at": "2015-12-19T06:38:04Z", "api": ["d3.scale.linear", "d3.min", "d3.max", "d3.select"], "updated_at": "2015-12-19T06:46:14Z", "description": "a-frame + d3 test"}, {"readme": "A comparison of the src directory for three versions of d3. Also see [d3 src tree](http://bl.ocks.org/4076122).\n\nforked from <a href='http://bl.ocks.org/syntagmatic/'>syntagmatic</a>'s block: <a href='http://bl.ocks.org/syntagmatic/4092944'>d3 src tree transitions</a>", "created_at": "2015-09-08T07:42:48Z", "api": ["d3.layout.tree", "d3.svg.diagonal.radial", "d3.select", "d3.tsv"], "updated_at": "2015-09-08T07:42:48Z", "description": "d3 src tree transitions"}, {"readme": "A visualization of files in the [src](https://github.com/mbostock/d3/tree/3.0/src) directory of the d3 repository, based on [Reingold-Tilford Tree](http://bl.ocks.org/4063550).\n\n## Data Collection\n\nUse [git](http://git-scm.com/) to clone a repository, then [du](http://www.gnu.org/software/coreutils/manual/html_node/du-invocation.html) to create a tsv with the directory contents.\n\n    git clone git://github.com/mbostock/d3.git\n    (echo -n 'size\\tfile\\n'; du -a d3) > d3.tsv\n\n## Burrow - recursive nesting\n\nBranches may go to an arbitrary depth. [burrow()](https://gist.github.com/4076122#file_burrow.js) creates this data structure from a JSON table. It's still getting tweaked, an example will go here when it's ready.", "created_at": "2012-11-15T01:43:47Z", "api": ["d3.tsv", "d3.layout.tree", "d3.svg.diagonal.radial", "d3.select"], "updated_at": "2016-03-30T00:26:28Z", "description": "d3 src tree"}, {"readme": "Choropleth charts built with the [d3.chart](http://misoproject.com/d3-chart/) framework. ```choropleth_chart.js``` is the chart type definition, which allows for rapid iteration of different quantize-scale domain/range, colors, and projections. The colors are based on [color brewer](http://colorbrewer2.org/), and you can pass any of the sequential scale abbreviations ('BuGn', 'PuBuGn', etc) to the ```range``` parameter to iterate on colors. ", "created_at": "2013-05-31T05:02:11Z", "api": ["d3.chart", "d3.geo.path", "d3.geo.mercator", "d3.scale.quantize", "d3.select", "d3.geo.albersUsa"], "updated_at": "2016-02-06T19:02:34Z", "description": "d3.chart Choropleths"}, {"readme": "Each category is a subjective labeling of the various API functions in d3 version 3. The numbers that drive the treemap are counts of API funcions in each category. This is a little like using lines of code as a metric as a higher count doesn't necessarily mean more important, but it does give a relative sense for the distribution of functionality in d3.\n\nThis makes it easy to see the logic in splitting d3 up into [smaller modules](https://github.com/d3) for version 4.\n", "created_at": "2015-09-17T07:16:19Z", "api": ["d3.json", "d3.nest", "d3.scale.category20c", "d3.layout.treemap", "d3.select"], "updated_at": "2015-09-17T07:32:32Z", "description": "d3 API functions"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/dmijalkovic/'>dmijalkovic</a>'s block: <a href='http://bl.ocks.org/dmijalkovic/52fb07194d4b2988cafb'>D3 graphs</a>", "created_at": "2015-10-24T06:11:40Z", "api": ["d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.select", "d3.time.format", "d3.extent", "d3.max", "d3.svg.line"], "updated_at": "2015-10-24T07:28:29Z", "description": "D3 graphs 2"}, {"readme": "Read more about this in [my blog post](http://vis4.net/blog/posts/making-html-tables-in-d3-doesnt-need-to-be-a-pain/).", "created_at": "2015-04-24T13:15:54Z", "api": ["d3.format", "d3.select", "d3.keys"], "updated_at": "2016-01-30T04:32:41Z", "description": "simple tables in D3"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/e366fba2b4626271dcceb3aeed7089e5'>D3-copy-Enjalot</a>", "created_at": "2016-04-30T08:10:30Z", "api": ["d3.scale.linear", "d3.max", "d3.select"], "updated_at": "2016-04-30T08:10:30Z", "description": "D3-copy-Enjalot"}, {"readme": "Reusable grids that can have some example `hover` events applied using `dispatch` \n\nbased of my initial sketch/block: [d3 | simple square grid](http://bl.ocks.org/eesur/3fc83ddc4c060e6bd43e)\n\n", "created_at": "2015-11-24T19:56:09Z", "api": ["d3.dispatch", "d3.select", "d3.range", "d3.rebind"], "updated_at": "2015-11-24T19:59:05Z", "description": "d3 | squared grid reusable"}, {"readme": "Testing out [aframe.io](https://aframe.io/) with [d3.js](http://d3js.org). use **WASD** keys to \"walk\" around the space.\n\nSince AFrame works with DOM elements, you can use d3's selection API to generate and modify 3D elements, as well as handle \"mouse\" events (including the VR friendly \"fuse cursor\") as if it was SVG.\n\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/enjalot/'>enjalot</a>'s block: <a href='http://bl.ocks.org/enjalot/8be32e6f1f32920ba841'>aframe + d3 test</a>\n\nforked from <a href='http://bl.ocks.org/enjalot/'>enjalot</a>'s block: <a href='http://bl.ocks.org/enjalot/1fd196cd99f8d58a56d3'>aframe + d3 test: text labels</a>", "created_at": "2015-12-21T21:32:17Z", "api": ["d3.scale.linear", "d3.max", "d3.select", "d3.svg.line", "d3.range", "d3.timer"], "updated_at": "2015-12-24T17:34:14Z", "description": "aframe + d3 test: camera"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/lilyc5459/'>lilyc5459</a>'s block: <a href='http://bl.ocks.org/lilyc5459/a35687613ab0f4991f37'>d3.js wiki visualization</a>", "created_at": "2016-02-07T11:14:22Z", "api": ["d3.tip", "d3.select", "d3.scale.linear", "d3.svg.axis", "d3.format", "d3.json", "d3.max"], "updated_at": "2016-02-07T11:14:22Z", "description": "d3.js wiki visualization"}, {"readme": "An example of [d3.layout.timeline](https://github.com/emeeks/d3.layout.timeline) that shows wars the United States has been involved in during its first 100 years (from Wikipedia). Events have been categorized and rendered in separate lanes for colonial wars, native wars, internal wars, wars involving European powers, and wars in Latin America.", "created_at": "2015-09-12T01:22:14Z", "api": ["d3.scale.linear", "d3.min", "d3.max", "d3.scale.ordinal", "d3.csv", "d3.layout.timeline", "d3.select"], "updated_at": "2016-03-16T15:46:30Z", "description": "d3.layout.timeline categorized timelines"}, {"readme": "Parse and append an HTML or SVG string. I use it a lot for appending a template, instead of generating it with d3. \n\n```javascript\nd3.select('.container').appendHTML('<div><svg><g><rect width=\"50\" height=\"50\" /></g></svg></div>');\n```\nUnlike using .html, .appendHTML can append multiple elements\n```javascript\nd3.select('.container').html('<span id=\"a\"></span>');\nd3.select('.container').html('<span id=\"b\"></span>'); // will replace content\nd3.select('.container').appendHTML('<span id=\"c\"></span>'); // will append content\n\n```\nYou can append HTML or SVG using the right method\n```javascript\nvar svg = d3.select('.container')\n    .appendHTML('<svg xmlns=\"http://www.w3.org/2000/svg\"><g><circle class=\"circle1\" cx=\"50\" cy=\"50\" r=\"50\"></circle></g></svg>')\n    .select('g');\n\nsvg.appendSVG('<circle class=\"circle2\" cx=\"20\" cy=\"20\" r=\"20\"></circle>');\nsvg.appendSVG('<rect width=\"30\" height=\"30\"></rect>');\n```\nAnd it can be used with the enter/update/exit pattern\n```javascript\nd3.select('.container').selectAll('div.test')\n    .data([0, 1, 2])\n  .enter().appendHTML('<div class=\"test\"><p></p></div>')\n    .select('p')\n    .text(function(d){ return d; });\n```\n", "created_at": "2016-03-05T16:09:36Z", "api": ["d3.select"], "updated_at": "2016-03-05T16:10:36Z", "description": "d3.selection.appendHTML and appendSVG"}, {"readme": "Testing out [aframe.io](https://aframe.io/) with [d3.js](http://d3js.org).\n\nSince AFrame works with DOM elements, you can use d3's selection API to generate and modify 3D elements, as well as handle \"mouse\" events (including the VR friendly \"fuse cursor\") as if it was SVG.\n\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-18T18:15:55Z", "api": ["d3.scale.linear", "d3.max", "d3.select"], "updated_at": "2015-12-19T06:57:36Z", "description": "aframe + d3 test"}, {"readme": "Trying to make a little page to reproject data using d3.carto jam and it kind of works.\n\nThings which could make this a little nicer:\n\n-Adding some graticules.\n\n-Adding different kinds of layers.\n\n-Figure out what the errors are about the paths which get multiplied when panning in globe mode.\n\nFor some much cleaner better javascript examples of how to do similar things w/ d3 please see Jason Davies stuff like http://www.jasondavies.com/maps/transition/ and Mike Bostocks stuff like http://bl.ocks.org/mbostock/3711652.\n\nReally I'm just trying to figure out how to kind of do some things they did w/ d3-carto-map.\n\nAs always let me know if there is anything silly in my code or how I could make it better.\n", "created_at": "2014-08-01T18:22:02Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.geojson", "d3.geo.conicEquidistant", "d3.geo.aitoff", "d3.geo.albers", "d3.geo.august", "d3.geo.baker", "d3.geo.boggs", "d3.geo.bonne", "d3.geo.bromley", "d3.geo.collignon", "d3.geo.craster", "d3.geo.eckert1", "d3.geo.eckert2", "d3.geo.eckert3", "d3.geo.eckert4", "d3.geo.eckert5", "d3.geo.eckert6", "d3.geo.eisenlohr", "d3.geo.equirectangular", "d3.geo.hammer", "d3.geo.hill", "d3.geo.homolosine", "d3.geo.kavrayskiy7", "d3.geo.cylindricalEqualArea", "d3.geo.lagrange", "d3.geo.larrivee", "d3.geo.laskowski", "d3.geo.loximuthal", "d3.geo.mercator", "d3.geo.miller", "d3.geo.mtFlatPolarParabolic", "d3.geo.mtFlatPolarQuartic", "d3.geo.mtFlatPolarSinusoidal", "d3.geo.mollweide", "d3.geo.naturalEarth", "d3.geo.nellHammer", "d3.geo.polyconic", "d3.geo.robinson", "d3.geo.sinusoidal", "d3.geo.sinuMollweide", "d3.geo.vanDerGrinten", "d3.geo.vanDerGrinten4", "d3.geo.wagner4", "d3.geo.wagner6", "d3.geo.wagner7", "d3.geo.winkel3"], "updated_at": "2015-08-29T14:04:49Z", "description": "reproject d3.carto.map"}, {"readme": "Using **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**'s built-in canvas rendering and HTML5 canvas's built-in toDataUrl() function to create small multiples of the same map.\n\nThis example cycles through the various numeric attributes of the point dataset and restyles the map by changing layer.markerColor and layer.strokeColor. You have to call map.refresh() to update the display and then select the canvas element associated with the map to get access to the image data as a data URL, which you can pass to img elements.\n\nThis method of accessing toDataUrl only works with layers drawn using canvas.", "created_at": "2014-09-27T03:07:37Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.topojson", "d3.carto.layer.csv", "d3.extent", "d3.scale.linear"], "updated_at": "2015-08-29T14:06:57Z", "description": "Small Maptiples - d3.carto"}, {"readme": "Dynamic markers with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nSee also: [Changing markers with d3.carto](http://bl.ocks.org/emeeks/f8c0220c54ec8347ea95)\n\nThis example simply shows that if your code can handle different types of SVG elements used as markers, then it can adjust those markers even when you've changed them from their default shape. If you click on any marker, it will show the network distance from that marker to all other markers (or gray if inaccessible). Even if you change the markers to little mailboxes by clicking SVG Marker, clicking on a little mailbox will still show network distance, this time with little mailboxes.\n\nLittle mailbox icon is public domain, as all icons should be.", "created_at": "2014-09-03T21:15:00Z", "api": ["d3.selectAll", "d3.html", "d3.select", "d3.carto.map", "d3.carto.layer.tile", "d3.carto.layer.topojson", "d3.geo.length", "d3.carto.layer.xyArray", "d3.keys", "d3.scale.linear"], "updated_at": "2015-08-29T14:06:03Z", "description": "Dynamic Markers - d3.carto"}, {"readme": "A very, very simple modular chart based on\n[Mike Bostock's recommendation](// A very, very simple D3 modular chart based on http://bost.ocks.org/mike/chart/)\n\nCreates a new chart type \"histobar\" that when insantiated, renders\nthe data as a string in an SVG. Obviously not useful in itself,\nbut the simplest possible reusable chart as a place to start.\n", "created_at": "2014-05-04T22:31:29Z", "api": ["d3.select", "d3.selectAll"], "updated_at": "2015-08-29T14:00:56Z", "description": "Simple D3 modular chart"}, {"readme": "This is an example of using D3's geo paths to render a MultiLineString, but it seems to not render correctly for whatever reason. It is not a fill/stroke problem, either.\n\nIdentified problem: It seems that the stroke width gets scaled as well.  ", "created_at": "2014-05-23T16:33:45Z", "api": ["d3.json", "d3.select", "d3.geo.centroid", "d3.geo.albersUsa", "d3.geo.path"], "updated_at": "2015-08-29T14:01:44Z", "description": "D3 MultiLineString Example"}, {"readme": "this example uses d3 to manipulate paths inside of an svg loaded from an external file.\n\nthe image is the famous [Ghostscript Tiger.svg](https://commons.wikimedia.org/wiki/File:Ghostscript_Tiger.svg)\n\nhat tip to [@ocampesato](https://twitter.com/ocampesato) for introducing me to the [SVG Tiger](https://upload.wikimedia.org/wikipedia/commons/f/fd/Ghostscript_Tiger.svg)\n\nthis exmaple is based on earlier research for the bl.ock [Sporthorse Foal Registrations II](http://bl.ocks.org/micahstubbs/99df29f258860e53c5e2). I've found this technique useful again recently, and thought it deserved a few examples of its own. ", "created_at": "2016-04-03T06:06:46Z", "api": ["d3.xml", "d3.select", "d3.selectAll"], "updated_at": "2016-04-03T06:06:49Z", "description": "External SVG + D3 II"}, {"readme": "Calendar heatmap adapted into a reusable chart for quick testing\n\n> loading of ~~CSV~~ json data, which is then quantized into a diverging color scale. The values are visualized as coloured cells per day. Days are arranged into columns by week, then grouped by month and years. \n\n[source](http://bl.ocks.org/mbostock/4063318)\n\n\nforked from <a href='http://bl.ocks.org/eesur/'>eesur</a>'s block: <a href='http://bl.ocks.org/eesur/5fbda7f410d31da35e42'>d3 | reusable heatmap calendar</a>", "created_at": "2016-01-07T03:14:41Z", "api": ["d3.dispatch", "d3.scale.linear", "d3.range", "d3.min", "d3.time.format", "d3.select", "d3.time.days", "d3.time.months", "d3.extent", "d3.values", "d3.rebind", "d3.eesur.heatmap", "d3.json", "d3.nest", "d3.sum"], "updated_at": "2016-01-07T03:23:16Z", "description": "d3 | reusable heatmap calendar"}, {"readme": "d3.sticker\n==========\n\nAn API to create \"stickers\" from DOM elements that can then be repasted and manipulated.\n\nThis example shows how you can dynamically create and remove icons using the d3.sticker API \n\nFor more data driven examples see:  \n* [http://tributary.io/inlet/5747272](http://tributary.io/inlet/5747272)  \n* [http://tributary.io/inlet/5754621](http://tributary.io/inlet/5754621)  \n* [http://tributary.io/inlet/5754622](http://tributary.io/inlet/5754622)  \n\nAnd a video tutorial:  \n[http://www.youtube.com/watch?v=fDqfoICbz7E](http://www.youtube.com/watch?v=fDqfoICbz7E)\n\n# Icons\n* heart - [http://thenounproject.com/noun/heart/#icon-No16863](http://thenounproject.com/noun/heart/#icon-No16863) Raji Purcell, from The Noun Project  \n* postit - [http://thenounproject.com/noun/post-it/#icon-No18027](http://thenounproject.com/noun/post-it/#icon-No18027) Matt Brooks, from The Noun Project  \n* marker - [http://thenounproject.com/noun/marker/#icon-No18026](http://thenounproject.com/noun/marker/#icon-No18026) Matt Brooks, from The Noun Project  \n", "created_at": "2013-06-11T05:39:57Z", "api": ["d3.select", "d3.sticker", "d3.mouse"], "updated_at": "2015-12-18T08:29:31Z", "description": "d3.sticker plugin"}, {"readme": "[Boetti's map](http://www.moma.org/learn/moma_learning/alighiero-boetti-map-of-the-world-1989) using D3\n\n### ToDo's:\n\nDue to their peculiar bounding boxes (see Jason Davies [nice visualization](https://www.jasondavies.com/maps/bounds/)) some countries need special treatment\n\n* France: split Guyana and map French flag accordingly\n* USA: split Alaska map the flag\n\nInspired by <a href='http://bl.ocks.org/rveciana/'>rveciana</a>'s block: <a href='http://bl.ocks.org/rveciana/6193058'>Flag map with D3js - SVG</a>", "created_at": "2015-12-13T16:18:54Z", "api": ["d3.geo.robinson", "d3.geo.path", "d3.geo.graticule", "d3.select"], "updated_at": "2015-12-20T15:03:50Z", "description": "D3.js Boetti "}, {"readme": "# D3.js\n\n<script src=\"http://d3js.org/d3.v3.js\"></script>\n\n## S\u00e9lection\n\nLa commande `d3.select(<selecteur>)` permet de pointer vers un \u00e9l\u00e9ment du document. Cet \u00e9l\u00e9ment est \nsp\u00e9cifi\u00e9 par le s\u00e9lecteur, qui est le m\u00eame que pour le CSS (i.e. `balise`, `.classe` ou `#id`).\nVoici un petit explicatif.\n\n## Cr\u00e9ation d'\u00e9l\u00e9ments\n\n## Echelle de couleurs (ou autres)\n\n## autre\n\n", "created_at": "2015-06-08T13:36:58Z", "api": ["d3.select", "d3.selectAll", "d3.scale.ordinal", "d3.scale.category10", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2015-08-29T14:22:43Z", "description": "Introduction \u00e0 D3"}, {"readme": "", "created_at": "2015-05-11T10:52:16Z", "api": ["d3.dispatch", "d3.mouse", "d3.rebind", "d3.select"], "updated_at": "2015-08-29T14:20:58Z", "description": "d3 - Click & Double Click"}, {"readme": "", "created_at": "2013-01-31T23:20:32Z", "api": ["d3.time.scale", "d3.select", "d3.svg.axis"], "updated_at": "2015-12-12T00:58:56Z", "description": "d3 minor lines 3"}, {"readme": "", "created_at": "2013-01-31T23:22:18Z", "api": ["d3.time.scale", "d3.select", "d3.svg.axis"], "updated_at": "2015-12-12T00:58:56Z", "description": "d3 minor lines 4"}, {"readme": "", "created_at": "2013-11-05T14:21:03Z", "api": ["d3.select", "d3.range"], "updated_at": "2015-12-27T11:39:05Z", "description": "D3 SVG Demo"}, {"readme": "", "created_at": "2015-11-21T21:31:16Z", "api": ["d3.range", "d3.select"], "updated_at": "2015-11-21T23:19:52Z", "description": "d3 with x3dom Demo"}, {"readme": "", "created_at": "2015-04-27T12:24:34Z", "api": ["d3.scale.linear", "d3.scale.ordinal", "d3.svg.axis", "d3.select", "d3.csv", "d3.max"], "updated_at": "2015-08-29T14:20:01Z", "description": "D3 week 4"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-07T07:50:05Z", "api": ["d3.json", "d3.select", "d3.geo.transform", "d3.geo.path"], "updated_at": "2015-12-07T08:23:05Z", "description": "MapboxGL & D3.js - polygon"}, {"readme": "", "created_at": "2012-03-03T02:51:19Z", "api": ["d3.range", "d3.interpolateRgb", "d3.select", "d3.layout.stack", "d3.max", "d3.svg.area"], "updated_at": "2015-10-01T09:28:08Z", "description": "Interactive Streamgraph D3"}, {"readme": "", "created_at": "2015-04-05T19:35:37Z", "api": ["d3.select", "d3.csv", "d3.max", "d3.descending"], "updated_at": "2015-08-29T14:18:30Z", "description": "knight d3 week 3"}, {"readme": "", "created_at": "2012-06-20T01:21:26Z", "api": ["d3.select", "d3.geo.path", "d3.json"], "updated_at": "2016-04-07T12:17:27Z", "description": "D3 + Leaflet (fork mbostock)"}, {"readme": "", "created_at": "2011-04-02T17:15:47Z", "api": ["d3.select", "d3.json", "d3.entries"], "updated_at": "2016-02-08T23:46:58Z", "description": "Polymaps + D3, Part 2"}, {"readme": "", "created_at": "2014-03-19T11:31:09Z", "api": ["d3.select"], "updated_at": "2015-08-29T13:57:30Z", "description": "d3 | random radius"}, {"readme": "", "created_at": "2014-01-14T13:49:34Z", "api": ["d3.select", "d3.selectAll"], "updated_at": "2016-01-03T05:49:14Z", "description": "D3 spiral matrix"}, {"readme": "", "created_at": "2015-12-05T23:36:13Z", "api": ["d3.layout.stack", "d3.scale.linear", "d3.svg.axis", "d3.svg.area", "d3.scale.ordinal", "d3.select", "d3.csv", "d3.min", "d3.max"], "updated_at": "2015-12-05T23:43:23Z", "description": "Intermediate D3: Week 2"}, {"readme": "", "created_at": "2015-10-23T17:37:54Z", "api": ["d3.scale.linear", "d3.select", "d3.selectAll"], "updated_at": "2015-10-23T21:10:52Z", "description": "d3 fractal tree"}, {"readme": "", "created_at": "2013-06-19T23:52:31Z", "api": ["d3.geo.albersUsa", "d3.geo.path", "d3.select", "d3.json"], "updated_at": "2015-12-18T17:29:41Z", "description": "MBIT D3.js Demo"}, {"readme": "Testing out Tadashi Tokieda's examples in his [Moir\u00e9 Patterns video](https://youtu.be/QAja2jp1VjE) applied to [poisson-disc sampling](http://bl.ocks.org/mbostock/dbb02448b0f93e4c82c3)\n\nA duplicated pattern can be rotated to reveal [Freaky Dot Patterns](https://youtu.be/QAja2jp1VjE)\n\ncode sources:\n- [mbostock\u2019s Poisson-Disc block](http://bl.ocks.org/mbostock/19168c663618b7f07158)\n- [d3noob\u2019s text rotation](http://bl.ocks.org/d3noob/10633421)\n\n", "created_at": "2016-01-05T12:48:58Z", "api": ["d3.select", "d3.timer"], "updated_at": "2016-01-05T12:49:02Z", "description": "d3 | Freaky Dot Patterns"}, {"readme": "", "created_at": "2012-10-02T20:08:32Z", "api": ["d3.csv"], "updated_at": "2015-10-11T07:18:18Z", "description": "Crossfilter examples (d3)"}, {"readme": "", "created_at": "2012-11-21T10:36:44Z", "api": ["d3.format", "d3.max", "d3.scale.pow", "d3.scale.log", "d3.scale.linear", "d3.svg.axis", "d3.time.scale", "d3.select", "d3.svg.line"], "updated_at": "2015-10-13T02:18:04Z", "description": "Interactive Line Graph (D3)"}, {"readme": "", "created_at": "2013-03-04T15:11:41Z", "api": [], "updated_at": "2015-12-14T11:58:55Z", "description": "d3.geo viewport clipping"}, {"readme": "Playing with d3.timer().", "created_at": "2014-10-10T23:19:35Z", "api": ["d3.select", "d3.timer"], "updated_at": "2015-08-29T14:07:28Z", "description": "Playing with d3.timer()"}, {"readme": "", "created_at": "2015-07-08T21:38:41Z", "api": ["d3.svg.arc", "d3.scale.ordinal", "d3.select", "d3.layout.pie", "d3.interpolate"], "updated_at": "2015-08-29T14:24:30Z", "description": "d3 donuts and angular directives"}, {"readme": "\nThe end goal project for the [html5devconf](http://html5devconf.com) intermediate [d3.js workshop](http://enjalot.github.com/intro-d3/html5devconf)  \n  \nextra credit: use [d3.tip](https://github.com/Caged/d3-tip)\n", "created_at": "2013-10-25T04:22:15Z", "api": ["d3.dispatch", "d3.max", "d3.min", "d3.scale.category20", "d3.time.scale", "d3.scale.linear", "d3.extent", "d3.svg.axis", "d3.time.format", "d3.select", "d3.rebind", "d3.svg.brush", "d3.json", "d3.chart.table", "d3.chart.scatter", "d3.chart.brush"], "updated_at": "2015-12-26T12:09:17Z", "description": "html5devconf intermediate d3.js workshop"}, {"readme": "## Testing out Block Builder\n\nExample from Rich Donohue's maptimeLEX [meetup on D3-based mapping](https://github.com/maptimelex/d3-mapping/tree/gh-pages/d3-map01-starter).\n\n\n\n\n\n\n\n\n\n", "created_at": "2015-09-02T03:33:05Z", "api": ["d3.select", "d3.geo.albers", "d3.geo.path"], "updated_at": "2015-09-02T03:33:05Z", "description": "First D3 Building Block"}, {"readme": "The first 15 seconds of the D3 show reel. See full video at <http://vimeo.com/29862153>. Includes seamless transitions between the following visualization types:\n\n* lines\n* horizons\n* areas\n* stacked areas\n* streamgraph\n* overlapping areas\n* grouped bars\n* stacked bars\n* bars\n* donut\n\nAdmittedly, these aren\u2019t the most useful visualizations; their purpose is not to inform but to demonstrate D3\u2019s capability for producing dynamic visualizations with custom transitions. They *do* show real data (the monthly closing price for ten years\u2019 worth of stock data), but I didn\u2019t include axes for date or price. See the [axis component](http://bl.ocks.org/1166403) for a better example. Also, the stacked visualizations aren\u2019t especially meaningful, unless you imagine owning a portfolio with equal parts AAPL, AMZN, IBM and MSFT. Similarly, the bars and donuts represent the *average* price (or sum) during this time period.\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/1256572'>D3 Show Reel</a>\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/9c5e51b7ecc472f08562'>D3 Show Reel</a>\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/dc46be50fae1cd49ad54'>D3 Show Reel</a>", "created_at": "2016-02-02T21:45:16Z", "api": ["d3.scale.category10", "d3.select", "d3.svg.line", "d3.svg.area", "d3.csv", "d3.time.format", "d3.nest", "d3.max", "d3.sum", "d3.time.scale", "d3.scale.linear", "d3.min", "d3.timer", "d3.scale.ordinal", "d3.range", "d3.layout.stack", "d3.zip.apply", "d3.layout.pie", "d3.svg.arc", "d3.interpolate"], "updated_at": "2016-02-02T21:45:17Z", "description": "D3 Show Reel"}, {"readme": "Treemap from CSV of flights taken by members of the UK Government Home Office in 2011.\n\nOriginal dataset from: [http://data.gov.uk/dataset/home-office-flight-data](http://data.gov.uk/dataset/home-office-flight-data)\n\nThanks to:\n  [PMeinshausen](http://bl.ocks.org/PMeinshausen/5806106)\n  [phoebebright](https://gist.github.com/phoebebright/3176159)\n  [mbostock](http://bost.ocks.org/mike/)\n\nforked from <a href='http://bl.ocks.org/davetaz/'>davetaz</a>'s block: <a href='http://bl.ocks.org/davetaz/9954190'>D3 Treemap from CSV with d3.nest</a>\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/6a8a2a34f8e185c00b17f005c7e12bb0'>D3 Treemap from CSV with d3.nest</a>", "created_at": "2016-04-21T20:19:43Z", "api": ["d3.csv", "d3.nest", "d3.format", "d3.scale.linear", "d3.layout.treemap", "d3.select", "d3.scale.category20c", "d3.json"], "updated_at": "2016-04-21T20:19:43Z", "description": "D3 Treemap from CSV with d3.nest"}, {"readme": "## Demo for d3-x3dom-axis\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-03-19T13:46:39Z", "api": ["d3.select", "d3.scaleLinear"], "updated_at": "2016-03-19T13:56:53Z", "description": "d3 x3dom axes"}, {"readme": "Another demonstration of a [custom D3 bundle](/mbostock/bb09af4c39c79cffcde4) using Rollup. This demonstrates importing [d3-transition](https://github.com/d3/d3-transition), which modifies *selection*.prototype to define [*selection*.transition](https://github.com/d3/d3-transition#selection_transition):\n\n```js\nimport \"d3-transition\";\n```\n\n(There are other features in [d3-transition](https://github.com/d3/d3-transition), but they are not imported here because they are not used.) Note that you *must* also import `selection` from [d3-selection](https://github.com/d3/d3-selection); otherwise, Rollup doesn\u2019t know that it needs to include the imported code from d3-transition. Rollup isn\u2019t perfect at detecting which code needs to be included (and which code shouldn\u2019t be included), so sometimes you need to give it a hand.\n", "created_at": "2016-05-20T14:34:42Z", "api": ["d3.select"], "updated_at": "2016-05-20T14:36:24Z", "description": "D3 Custom Bundle II"}, {"readme": "Example of map explained in maptimeLex [Introduction to D3.js Web Mapping Through 7 Simple Maps](https://github.com/maptimelex/d3-mapping).", "created_at": "2015-06-24T15:15:37Z", "api": ["d3.select", "d3.geo.albers", "d3.geo.path"], "updated_at": "2015-08-29T14:23:38Z", "description": "A very simple D3 map"}, {"readme": "This is a simple d3.js graph used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is aimed at providing some exposure to some d3.js functions and should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.", "created_at": "2016-02-27T19:56:57Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-02-27T19:56:57Z", "description": "Simple d3.js Graph"}, {"readme": "This is a simple d3.js graph used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is aimed at providing some exposure to some d3.js functions and should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.", "created_at": "2014-06-20T19:35:38Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-04-22T23:23:58Z", "description": "Simple d3.js Graph"}, {"readme": "Example of map explained in maptimeLex [Introduction to D3.js Web Mapping Through 7 Simple Maps](https://github.com/maptimelex/d3-mapping).", "created_at": "2015-06-24T17:37:34Z", "api": ["d3.select", "d3.geo.albers", "d3.geo.path"], "updated_at": "2015-08-29T14:23:38Z", "description": "A D3 map using topojson"}, {"readme": "[Grid layout](https://github.com/interactivethings/d3-grid) demo.\n\nIn response to [this question](https://groups.google.com/forum/#!topic/d3-js/GE-ISrHglOc).\n", "created_at": "2014-08-06T13:47:05Z", "api": ["d3.scale.ordinal", "d3.range", "d3.layout.grid", "d3.select", "d3.xml"], "updated_at": "2015-08-29T14:04:56Z", "description": "d3.layout.grid with icons"}, {"readme": "POC of a JS Array Adapter which enables d3 selections to amend its content.", "created_at": "2015-10-31T13:47:04Z", "api": ["d3.select"], "updated_at": "2015-10-31T19:08:42Z", "description": "D3 Adapter for JS Arrays"}, {"readme": "Working though Frontend Masters d3 series.\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\n- d3 data bind using hardcoded array as data, without SVG.\n\n", "created_at": "2015-11-17T07:33:41Z", "api": ["d3.select", "d3.json"], "updated_at": "2015-11-17T09:06:21Z", "description": "d3 first bar plot"}, {"readme": "Based off of [Mike Bostock's d3.geo.tile example](http://bl.ocks.org/mbostock/4132797).", "created_at": "2013-03-12T22:15:06Z", "api": ["d3.geo.tile", "d3.geo.mercator", "d3.behavior.zoom", "d3.select"], "updated_at": "2015-12-14T20:58:58Z", "description": "Basic d3 Example"}, {"readme": "This is a follow on from the [simple d3.js graph](http://bl.ocks.org/d3noob/b3ff6ae1c120eea654b5) used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt adds points to a simple line graph to produce a hybrid line / scatterplot graph. It should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.", "created_at": "2014-06-22T18:12:55Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2015-08-29T14:02:53Z", "description": "Simple scatterplot with d3.js"}, {"readme": "Automated convex hull layers in **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\n**map.createHullLayer** takes a d3.carto.layer and an accessor function that identifies the categorical attributes of the features in that carto layer from which to create hulls. In this example, hulls are created based on the \"ccode\" attribute of a feature.\n", "created_at": "2014-09-25T02:30:15Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer", "d3.carto.layer.csv", "d3.scale.category20b"], "updated_at": "2015-08-29T14:06:52Z", "description": "Automated Convex Hulls - d3.carto"}, {"readme": "An example of [d3.svg.ribbon](https://github.com/emeeks/d3.svg.ribbon).\n\nDrag the circles to see the underlying single `svg:path` element re-interpolated based on the changing position of the points and their radii that are used to generate it. This is a different way of generating areas than `d3.svg.area` and might prove more suitable for some applications.", "created_at": "2015-08-22T20:38:02Z", "api": ["d3.svg.line", "d3.svg.ribbon", "d3.behavior.drag", "d3.select", "d3.selectAll"], "updated_at": "2016-03-16T15:48:14Z", "description": "d3.svg.ribbon example"}, {"readme": "This is a follow on from the [simple d3.js graph](http://bl.ocks.org/d3noob/b3ff6ae1c120eea654b5) used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt adds points to a simple line graph to produce a hybrid line / scatterplot graph. It should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.\n\nforked from <a href='http://bl.ocks.org/d3noob/'>d3noob</a>'s block: <a href='http://bl.ocks.org/d3noob/38744a17f9c0141bcd04'>Simple scatterplot with d3.js</a>", "created_at": "2016-02-24T21:47:55Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-02-24T21:47:56Z", "description": "Simple scatterplot with d3.js"}, {"readme": "This is a follow on from the [simple scatterplot](http://bl.ocks.org/d3noob/38744a17f9c0141bcd04) used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is aimed at demonstrating a simple tooltip using d3.js and should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.", "created_at": "2014-06-22T18:24:10Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-03-14T18:37:43Z", "description": "Simple d3.js tooltips"}, {"readme": "## Demo for d3-x3dom-axis\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/fabid/'>fabid</a>'s block: <a href='http://bl.ocks.org/fabid/61cbfe14de686cc25c47'>d3 x3dom axes</a>", "created_at": "2016-03-19T16:40:52Z", "api": ["d3.select", "d3.scaleLinear", "d3.range"], "updated_at": "2016-03-19T21:30:55Z", "description": "d3 x3dom scatter"}, {"readme": "Animating the [D3 logo](/mbostock/c9455b842a01f6907020) as if it were being drawn by hand.\n\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/bc4e32ec71636b498c46'>Animated D3 Logo</a>", "created_at": "2015-11-07T20:15:01Z", "api": ["d3.select", "d3.selectAll"], "updated_at": "2015-11-07T20:15:01Z", "description": "Animated D3 Logo"}, {"readme": "A simple choropleth map made with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nAfter adding a tile layer and a topojson layer, you can access the features either by using map.layers() or the layer if assigned to a variable or via d3.selectAll.data() on the appropriate elements. You can then style the features based on their properties. In this case, the size of the ward.\n\nSome hover behavior can also be defined using D3. Here we the wards in a shared region are turned semi-transparent.", "created_at": "2014-07-14T23:08:37Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer", "d3.extent", "d3.scale.quantile", "d3.selectAll"], "updated_at": "2015-08-29T14:03:58Z", "description": "Choropleth 2 - d3.carto.map"}, {"readme": "\nForked from [jasondavies.com](https://www.jasondavies.com/maps/d3.geo.zoom.js).\n\nCompare with default (i.e. with roll) see [mpmckenna8's block](http://bl.ocks.org/mpmckenna8/f43a842a8953e87f5b3c).\n", "created_at": "2015-04-07T18:21:29Z", "api": ["d3.behavior.zoom", "d3.mouse", "d3.select", "d3.transition", "d3.geo.distance", "d3.interpolateZoom", "d3.rebind", "d3.dispatch.apply", "d3.json", "d3.geo.kavrayskiy7", "d3.geo.orthographic", "d3.geo.path", "d3.geo.graticule", "d3.geo.zoom"], "updated_at": "2015-08-29T14:18:38Z", "description": "d3.geo.zoom without roll"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/62268c8812eaa5a365c7'>D3 meetup: Simple Scatter</a>", "created_at": "2016-03-13T22:13:39Z", "api": ["d3.select", "d3.csv", "d3.max", "d3.scale.linear", "d3.extent", "d3.time.scale"], "updated_at": "2016-03-13T22:13:39Z", "description": "D3 meetup: Simple Scatter"}, {"readme": "Various **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** modes with Stamen tiles from [http://maps.stamen.com/#toner/12/37.7706/-122.3782](http://maps.stamen.com/#toner/12/37.7706/-122.3782).\n\nClick the button to cycle through map modes to see the difference between Transform, Projection and Globe modes.", "created_at": "2015-09-08T08:43:47Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.carto.layer.csv", "d3.carto.layer.featureArray"], "updated_at": "2015-09-08T08:43:47Z", "description": "Stamen Tiles - d3.carto.map"}, {"readme": "# SVG Linear Gradient with D3\n\nThis example demonstrates how to use gradients in SVG, defining the stop colors completely via CSS. The advantage of this approach is that we can use gradients in shapes without having to hardcode the `stop-color` attributes when defining the gradients in the SVG element.\n\n## References\n\n- [SVG linearGradient (MDN)](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient)\n- [Draw a D3 Circle with Gradient Colours](http://stackoverflow.com/questions/20837147/draw-a-d3-circle-with-gradient-colours/20837537#20837537)\n\n", "created_at": "2014-08-06T14:38:29Z", "api": ["d3.select"], "updated_at": "2016-04-23T17:52:36Z", "description": "SVG Linear Gradient with D3"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/lilyc5459/'>lilyc5459</a>'s block: <a href='http://bl.ocks.org/lilyc5459/a35687613ab0f4991f37'>d3.js wiki visualization</a>", "created_at": "2015-11-10T18:11:48Z", "api": ["d3.tip", "d3.select", "d3.scale.linear", "d3.svg.axis", "d3.format", "d3.json", "d3.max"], "updated_at": "2015-11-10T18:11:48Z", "description": "d3.js wiki visualization"}, {"readme": "Extent indicator globe using [d3.geo.orthographic](https://github.com/mbostock/d3/wiki/Geo-Projections#wiki-orthographic) and radial gradients - EVERYTHING OF IMPORT HERE IS THE WORK OF @dwtkns\n\nSlippy map code from:  \n[http://bl.ocks.org/3943330](http://bl.ocks.org/3943330) by tmcw  \n[http://bl.ocks.org/4132797](http://bl.ocks.org/4132797) by mbostock  \n\nMap tiles from [Stamen](http://www.stamen.com)", "created_at": "2013-02-05T18:35:57Z", "api": ["d3.geo.orthographic", "d3.geo.path", "d3.geo.graticule", "d3.select", "d3.geo.tile", "d3.geo.mercator", "d3.behavior.zoom", "d3.mouse", "d3.format"], "updated_at": "2015-12-12T04:48:52Z", "description": "Fiddling with D3 Finder params"}, {"readme": "Hummer.js\u3092\u4f7f\u3063\u3066D3.js\u3067\u751f\u6210\u3057\u305f\u8981\u7d20\u306b\u30b9\u30ef\u30a4\u30d7\u30a4\u30d9\u30f3\u30c8\u306a\u3069\u3092\u8a2d\u7f6e\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3002\n", "created_at": "2015-08-13T02:28:57Z", "api": ["d3.select", "d3.layout.force"], "updated_at": "2015-08-29T14:27:19Z", "description": "D3.js & Hammer.js"}, {"readme": "A demonstration of modal infoboxes from **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nClick on any line, square, or area to see a modal infobox. By setting cartoLayer.clickableFeatures(true) then any SVG points or features will create a modal dialogue with the attributes of that feature. If the feature has a \"Name\" or \"Label\" attribute, that will be used as the title for the infobox.\n\nYou can modify the contents of the modal and how it processes the data associated with a feature by using d3.carto.modal and its built-in formatter, which is explained in the [custom infobox example](http://bl.ocks.org/emeeks/905bb4f399e0855e08fe).", "created_at": "2014-08-26T16:04:24Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.carto.layer.topojson", "d3.carto.layer.csv", "d3.carto.layer.featureArray"], "updated_at": "2015-08-29T14:05:41Z", "description": "Modal Infoboxes - d3.carto.map"}, {"readme": "D3 map of Australia using Natural Earth, topojson and a lambert conformal conic projection.\n\nParameters from [Geo Repository](http://georepository.com/projection_4460/Australian-Centre-for-Remote-Sensing-Lambert-Conformal-Projection.html).\n\nSome help from Mike Bostock's [Mexican Municipalities](http://bl.ocks.org/mbostock/9265674). \n", "created_at": "2015-09-05T15:37:06Z", "api": ["d3.geo.conicConformal", "d3.geo.path", "d3.select", "d3.json"], "updated_at": "2015-09-05T15:50:36Z", "description": "D3 Australia Conformal Conic"}, {"readme": "Working though the Frontend Masters d3js series.\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\n- d3js data bind using reddit/r/pics.json as data.\n- This works in blockbuilder but not in bl.ocks.org, why?\n\nforked from <a href='http://bl.ocks.org/hsuttong/'>hsuttong</a>'s block: <a href='http://bl.ocks.org/hsuttong/0055d87cfaecc5b06cd2'>d3 first transition</a>\n\nforked from <a href='http://bl.ocks.org/hsuttong/'>hsuttong</a>'s block: <a href='http://bl.ocks.org/hsuttong/835c17a94abade5c2ca1'>d3 first svg</a>", "created_at": "2015-11-18T06:55:20Z", "api": ["d3.select", "d3.json", "d3.max", "d3.scale.linear"], "updated_at": "2015-11-18T07:07:45Z", "description": "d3 linear scale"}, {"readme": "This is a small code example that shows what [d3.layout.stack](https://github.com/mbostock/d3/wiki/Stack-Layout) does. It adds y and y0 properties to your data, where y0 is the cumulative sum of y values. This is example 11 from the screencast [Splitting Charts](https://github.com/curran/screencasts/tree/gh-pages/splittingCharts).\n\nMIT License\n\n<!-- Start of SimpleHitCounter Code -->\n<div align=\"center\"><a href=\"http://www.simplehitcounter.com\" target=\"_blank\"><img src=\"http://simplehitcounter.com/hit.php?uid=1979120&f=16777215&b=0\" border=\"0\" height=\"18\" width=\"83\" alt=\"web counter\"></a></div>\n<!-- End of SimpleHitCounter Code -->\n", "created_at": "2015-11-20T00:22:56Z", "api": ["d3.layout.stack", "d3.select", "d3.csv"], "updated_at": "2015-11-20T00:27:46Z", "description": "D3 Stack Layout"}, {"readme": "Drawing **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** layers to canvas is simple, just set the renderMode to \"canvas\" instead of \"svg\". This example shows the various map modes with canvas drawing of vector layers.\n\nClick the button to cycle through map modes to see the difference between Transform, Projection and Globe modes.\n\nUndersea cable geodata and armadillo projection inspiration from [Peter Bakkum's example](https://bl.ocks.org/bakks/9405946). Stamen watercolor map from [http://maps.stamen.com/#toner/12/37.7706/-122.3782](http://maps.stamen.com/#toner/12/37.7706/-122.3782).", "created_at": "2014-07-29T06:02:34Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.geo.armadillo"], "updated_at": "2015-08-29T14:04:38Z", "description": "Canvas Layers - d3.carto.map"}, {"readme": "This gist shows how to restrict [d3's zoom behavior](https://github.com/mbostock/d3/wiki/Zoom-Behavior) so that users can't pan outside of a rectangular bounding box. Use your scroll wheel to zoom in and out of the field of circles, and click and drag to move when zoomed in. Note how when you zoom back out (by scrolling up) the view snaps to the original extent at zoom 1.", "created_at": "2013-09-11T01:30:58Z", "api": ["d3.select", "d3.behavior.zoom", "d3.range", "d3.descending"], "updated_at": "2015-12-22T19:18:59Z", "description": "d3 bounded zoom behavior"}, {"readme": "Reusable slopegraph inspired/adapted from [Ben Van Dyke's example](http://vandykeindustries.com/slopegraphs-d3.html) into a reusable chart.\n\nThis slopegraph example shows the number of personal computers installed in a country per household. This includes desktop PCs and laptops, but excludes smartphones and terminals connected to mainframe computers. All figures are calculated using total number of Personal Computers and the Total Number of Households.\n\n[data source](http://www.nakono.com/tekcarta/databank/personal-computers-per-household/)\n\n\nforked from <a href='http://bl.ocks.org/eesur/'>eesur</a>'s block: <a href='http://bl.ocks.org/eesur/a4679ee453aa9357977c'>d3 | Reusable slopegraph</a>", "created_at": "2016-04-16T12:56:00Z", "api": ["d3.format", "d3.dispatch", "d3.max", "d3.scale.linear", "d3.select", "d3.rebind", "d3.eesur.slopegraph", "d3.json", "d3.selectAll"], "updated_at": "2016-04-16T12:56:14Z", "description": "d3 | Reusable slopegraph"}, {"readme": "Repositioning clustered points in **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nd3.carto uses quadtrees to perform grid-based clustering of points. One drawback of grid-based clustering as seen in the [basic](http://bl.ocks.org/emeeks/7d5925cb7d9721c60360) and [complex](http://bl.ocks.org/emeeks/540b1b884b80b14a44c6) clustering examples is that it produces regular rows and columns of clustered points, which can be jarring to map readers, especially when the regularized point is located in the sea when the dataset is entirely on land.\n\nIn this example, medium-sized cities (between 50k and 1m population) are clustered using the built-in clustering behavior, but the points are adjusted after each \"recluster\" event so that they are placed on the location of the largest city (population-wise) is located. This is accomplished by accessing the d3.carto.map.projection() and using it to adjust the \"transform\" attribute of the g.pointG container that determines the position of each point. It might do to make this semi-automated, but it's a hard thing to plan for, because you might want to use some kind of administrative rank (local, prefectural and national capitals) or other mechanism to determine the \"anchor\" point. In other cases, where there is no obvious such point, you might want to pick the point nearest the center or use some other mechanism.\n\nAs a result of this repoisitioning, the clustered sites are irregular, semantically interesting and never placed on non-sensical terrain.\n\nWhich is good.", "created_at": "2014-09-16T04:03:39Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer", "d3.carto.layer.csv"], "updated_at": "2015-08-29T14:06:31Z", "description": "Semantic Cluster Positioning - d3.carto"}, {"readme": "successfully changed the sky and bar colors.  learned that in this strange 3D animation paradigm, the color of the light actually determines the color of the bars:\n\n```\n<a-light color=\"steelblue\" position=\"0 5 0\" type=\"ambient\"></a-light>\n```\n\nthis was non-obvious to me, and pretty cool once I figured it out.\n\noh, I also added a delay the the `mouseout` (`gazeout`?!) transition.  the idea for this is to allow the user time to look to the next bar without snapping their attention right back to the previous bar.\n\n---\n\nTesting out [aframe.io](https://aframe.io/) with [d3.js](http://d3js.org).\n\nSince AFrame works with DOM elements, you can use d3's selection API to generate and modify 3D elements, as well as handle \"mouse\" events (including the VR friendly \"fuse cursor\") as if it was SVG.\n\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/enjalot/'>enjalot</a>'s block: <a href='http://bl.ocks.org/enjalot/8be32e6f1f32920ba841'>aframe + d3 test</a>", "created_at": "2015-12-18T22:12:35Z", "api": ["d3.scale.linear", "d3.max", "d3.select"], "updated_at": "2016-05-14T15:16:39Z", "description": "aframe + d3 experiment"}, {"readme": "A complete, automatic and flexible orthographic localisator for Wikipedia maps.\n\n```\nvar bb = { \"item\":\"India\", \"W\": 67.0, \"N\":37.5, \"E\": 99.0, \"S\": 5.0 }, \nlocalisator(\"body\", 200, bb.item, bb.W, bb.N, bb.E, bb.S);\n```\n\nIt take as input :\n\n- a JS selector: a target html element's selector such as `\"body\"`, `\"#hook\"`, to be appended to,\n- a width (px),\n- the item name (string),\n- four geocoordinates (decimal degrees), representing the bounding box ordered as West, North, East, South.\n\nThe style approximate most recent [Wikipedia localisator map guidelines](https://commons.wikimedia.org/wiki/File:Toolbox_SVG_locator_maps_(location_map_based)-en.svg). \n\nThe first issue was to move away from straight lines to correctly curved lines.\n\n![enter image description here][1]\n\n[1]: http://i.stack.imgur.com/Vc0qK.png \n\nThe second issue was to support bounding boxes upon the 180\u2070 meridians. Boxes upon the 180th meridian need special management. By example, localising a set of pacific islands between 155\u2070 East and -155 West initially gives....\n\n![enter image description here][2]\n\n...with correct rotation (+180\u2070) :\n\n![enter image description here][3]\n\n... and with correct boxing:\n\n![enter image description here][4]\n\n  [2]: http://i.stack.imgur.com/TbUGH.png\n  [3]: http://i.stack.imgur.com/aPLSF.png\n  [4]: http://i.stack.imgur.com/gqPWn.png\n\n Localisator now perfect, enjoy !\n\n ![enter image description here][7]\n [7]: http://i.stack.imgur.com/Vc0qK.png\n\n----\nFor technical details, see code and [D3.geo : Spherical arcs rather than straight lines for paralles?](http://stackoverflow.com/questions/25415885/). For deeper documentation, see [D3.geo](https://github.com/mbostock/d3/wiki/Geo) and [bounding boxes](https://github.com/mbostock/d3/wiki/Geo-Paths#bounds).\n\n", "created_at": "2014-08-21T10:11:44Z", "api": ["d3.range", "d3.geo.orthographic", "d3.geo.path", "d3.select", "d3.behavior.drag", "d3.json", "d3.selectAll", "d3.geo.graticule"], "updated_at": "2015-08-29T14:05:32Z", "description": "Wikiatlas Localisator using D3.geo"}, {"readme": "Stackoverflow question: http://stackoverflow.com/questions/32549683/d3js-json-pie-chart?noredirect=1#comment52995750_32549683", "created_at": "2015-09-14T17:24:53Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.json"], "updated_at": "2015-09-14T18:02:50Z", "description": "Pie Chart"}, {"readme": "", "created_at": "2015-11-04T18:40:45Z", "api": ["d3.scale.category10", "d3.svg.arc", "d3.layout.pie", "d3.select"], "updated_at": "2015-11-04T18:40:45Z", "description": "square pie chart ( d3.js )"}, {"readme": "Updated reusable slopegraph sketch, from my [previous slopegraph version](http://bl.ocks.org/eesur/a4679ee453aa9357977c)\n\nThis version allows for multiple sets/columns and will adapted accordingly. Added some interaction to toggle the sets/columns and also toggle highlighted line.\n\n[data source](http://www.nakono.com/tekcarta/databank/personal-computers-per-household/)\n\n\nforked from <a href='http://bl.ocks.org/eesur/'>eesur</a>'s block: <a href='http://bl.ocks.org/eesur/ee8d0ab88229d0e07f7f'>d3 | reusable slopegraph v2</a>", "created_at": "2016-01-07T03:42:53Z", "api": ["d3.format", "d3.dispatch", "d3.scale.linear", "d3.select", "d3.rebind", "d3.json", "d3.selectAll"], "updated_at": "2016-01-07T03:44:02Z", "description": "d3 | reusable slopegraph v2"}, {"readme": "D3 ConicEqualArea Projection with several D3 generated layers:\n\n* Graticule\n* Countries\n* US Counties\n* GeoHash\n* Pins\n* Graph\n* Heat\n\n[GitHub](https://github.com/hpcc-systems/Visualization) \n\n[Test Page](http://rawgit.com/hpcc-systems/Visualization/v1.10.0-rc2/demos/dermatology.html) \n", "created_at": "2015-12-31T15:21:03Z", "api": [], "updated_at": "2015-12-31T15:43:51Z", "description": "D3 ConicEqualArea Projection + D3 Generated Layers"}, {"readme": "", "created_at": "2015-07-10T18:43:04Z", "api": ["d3.svg.arc", "d3.layout.stack", "d3.nest", "d3.csv", "d3.scale.ordinal", "d3.select", "d3.layout.pie", "d3.interpolate"], "updated_at": "2015-08-29T14:24:37Z", "description": "angular and d3.csv"}, {"readme": "A map example created with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** that loads feature, tile and point layers using the various methods available in d3.carto.", "created_at": "2015-09-08T08:43:22Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.topojson", "d3.carto.layer.csv", "d3.csv", "d3.carto.layer.xyArray", "d3.carto.layer.featureArray"], "updated_at": "2015-09-08T08:43:22Z", "description": "Managing Layers - d3.carto"}, {"readme": "[d3.sketchy](https://github.com/emeeks/d3-sketchy)\n\nSloppy circles, uneven lines, poorly filled rectangles, slightly mismatched colors.", "created_at": "2014-06-19T16:00:49Z", "api": ["d3.svg.line", "d3.scale.linear", "d3.hsl", "d3.select", "d3.selectAll", "d3.sketchy.randomColor", "d3.json", "d3.nest", "d3.extent", "d3.time.scale", "d3.svg.axis", "d3.time.format", "d3.svg.brush", "d3.sketchy.rect", "d3.max", "d3.scale.ordinal", "d3.scale.quantize", "d3.layout.pack", "d3.sketchy.circle"], "updated_at": "2015-08-29T14:02:46Z", "description": "Sketchy Charts with D3"}, {"readme": "[d3.svg.legend](https://github.com/emeeks/d3-svg-legend) provides for a simple legend that can be displayed horizontally or vertically and accepts a few different [d3 scale](https://github.com/mbostock/d3/wiki/Scales) types.", "created_at": "2014-08-19T14:34:05Z", "api": ["d3.scale.threshold", "d3.svg.legend", "d3.select", "d3.scale.category20", "d3.format"], "updated_at": "2015-08-29T14:05:27Z", "description": "d3.svg.legend example"}, {"readme": "Exploring SVG paths\u2014loads random 108 points. Based on [Dashing D3.js screencast](https://www.dashingd3js.com/d3-screencasts/20-d3-and-svg-paths)", "created_at": "2014-03-19T19:38:59Z", "api": ["d3.svg.line", "d3.select"], "updated_at": "2015-08-29T13:57:30Z", "description": "d3 | random SVG paths"}, {"readme": "This example belongs to the presentation made to the [OSGeo](http://www.osgeo.org/) local group in Barcelona [Geoinquiets](http://www.geoinquiets.cat/)\nThe example is an adaptation from [Mike Bostock](http://bost.ocks.org/mike/)'s [Symbol Map example](http://bl.ocks.org/mbostock/4342045)", "created_at": "2013-03-17T10:40:51Z", "api": ["d3.geo.path", "d3.select", "d3.json"], "updated_at": "2015-12-15T01:38:57Z", "description": "D3 tutorial I: Basic map"}, {"readme": "A simple template for blocks gists. Replace the code, drop a new 230x120 png, and of course update this README. After updating, look for the result on the [blocks account page](http://bl.ocks.org/dribnet).", "created_at": "2012-12-18T08:18:04Z", "api": ["d3.select"], "updated_at": "2015-12-09T20:48:51Z", "description": "d3 http://bl.ocks.org/ template"}, {"readme": "", "created_at": "2012-07-05T12:27:07Z", "api": ["d3.select", "d3.scale.linear", "d3.svg.axis"], "updated_at": "2015-10-06T21:08:09Z", "description": "D3 axis scale simple example"}, {"readme": "", "created_at": "2011-12-31T12:22:34Z", "api": ["d3.select", "d3.range"], "updated_at": "2015-09-29T03:58:09Z", "description": "Fast highlighting in D3"}, {"readme": "", "created_at": "2012-02-14T18:54:15Z", "api": ["d3.select"], "updated_at": "2015-09-30T16:47:59Z", "description": "d3 tspan append"}, {"readme": "", "created_at": "2012-02-16T17:37:53Z", "api": ["d3.format", "d3.scale.category20c", "d3.layout.pack", "d3.select", "d3.json"], "updated_at": "2015-09-30T18:57:58Z", "description": "Automatically Sizing Text in D3"}, {"readme": "This example shows how to use the conicConformalEurope projection from [d3-composite-projections](http://rveciana.github.io/d3-composite-projections/).", "created_at": "2016-01-17T13:06:37Z", "api": ["d3.geo.conicConformalEurope", "d3.geo.graticule", "d3.geo.path", "d3.select", "d3.json"], "updated_at": "2016-01-17T13:07:31Z", "description": "d3-composite-projections conicConformalEurope"}, {"readme": "", "created_at": "2013-01-25T02:15:26Z", "api": ["d3.time.format", "d3.select", "d3.time.scale", "d3.scale.linear", "d3.scale.ordinal", "d3.svg.axis", "d3.layout.stack", "d3.nest", "d3.svg.area", "d3.csv", "d3.extent", "d3.max", "d3.mouse"], "updated_at": "2015-12-11T16:58:56Z", "description": "D3 Interactive Streamgraph"}, {"readme": "", "created_at": "2012-11-27T21:04:22Z", "api": ["d3.select", "d3.entries"], "updated_at": "2015-10-13T06:58:02Z", "description": "d3 tag editing"}, {"readme": "", "created_at": "2014-07-12T02:28:11Z", "api": ["d3.scale.linear", "d3.scale.ordinal", "d3.range", "d3.extent", "d3.svg.area", "d3.select", "d3.set", "d3.values"], "updated_at": "2015-08-29T14:03:53Z", "description": "D3 Stream Graph via Blockspring"}, {"readme": "", "created_at": "2015-06-18T04:35:03Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.area", "d3.select", "d3.svg.brush", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2015-08-29T14:23:15Z", "description": "Zoom and Brush in d3"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-11-07T12:17:13Z", "api": ["d3.select"], "updated_at": "2015-11-07T12:17:15Z", "description": "Mozfest - Intro to D3"}, {"readme": "Updated reusable slopegraph sketch, from my [previous slopegraph version](http://bl.ocks.org/eesur/a4679ee453aa9357977c)\n\nThis version allows for multiple sets/columns and will adapted accordingly. Added some interaction to toggle the sets/columns and also toggle highlighted line.\n\n[data source](http://www.nakono.com/tekcarta/databank/personal-computers-per-household/)\n", "created_at": "2015-12-18T16:10:28Z", "api": ["d3.format", "d3.dispatch", "d3.scale.linear", "d3.select", "d3.rebind", "d3.json", "d3.selectAll"], "updated_at": "2015-12-19T18:34:24Z", "description": "d3 | reusable slopegraph v2"}, {"readme": "", "created_at": "2015-04-16T02:37:39Z", "api": ["d3.select", "d3.range", "d3.layout.pack", "d3.layout.force", "d3.geom.quadtree", "d3.selectAll"], "updated_at": "2016-04-27T10:11:39Z", "description": "Draggable Circle Packing - D3.js"}, {"readme": "", "created_at": "2013-09-30T19:31:53Z", "api": ["d3.dispatch", "d3.extent", "d3.time.scale", "d3.svg.brush", "d3.svg.axis", "d3.time.format", "d3.rebind", "d3.max", "d3.min", "d3.scale.linear", "d3.select", "d3.geo.albersUsa", "d3.geo.path", "d3.chart.scatter", "d3.chart.brush", "d3.json"], "updated_at": "2015-12-24T08:09:17Z", "description": "d3 Tutorial: Coordinated Views"}, {"readme": "", "created_at": "2015-10-08T16:24:27Z", "api": ["d3.dispatch", "d3.extent", "d3.time.scale", "d3.svg.brush", "d3.svg.axis", "d3.time.format", "d3.rebind", "d3.max", "d3.min", "d3.scale.linear", "d3.select", "d3.geo.albersUsa", "d3.geo.path", "d3.chart.scatter", "d3.chart.brush", "d3.json"], "updated_at": "2015-10-08T16:24:28Z", "description": "d3 Tutorial: Coordinated Views"}, {"readme": "", "created_at": "2012-07-06T10:23:18Z", "api": ["d3.select", "d3.scale.linear", "d3.time.scale", "d3.svg.axis"], "updated_at": "2016-03-10T16:09:20Z", "description": "d3 date axis simple example"}, {"readme": "", "created_at": "2015-04-16T02:56:00Z", "api": ["d3.scale.linear", "d3.scale.sqrt", "d3.svg.axis", "d3.csv", "d3.descending", "d3.extent", "d3.max", "d3.select", "d3.round"], "updated_at": "2015-08-29T14:19:15Z", "description": "Knight D3 Modules 5"}, {"readme": "", "created_at": "2014-08-07T11:33:41Z", "api": ["d3.geo.albersUsa", "d3.geo.path", "d3.select"], "updated_at": "2015-08-29T14:05:00Z", "description": "Simple D3 US Map"}, {"readme": "Enclosure diagrams use containment to represent the hierarchy. Although circle packing is not as space-efficient as a treemap, it better reveals the hierarchy. Implementation based on work by [Jeff Heer](http://jheer.org/). Data shows the [Flare](http://flare.prefuse.org/) class hierarchy, also courtesy Jeff Heer.\n\nSee also this [zoomable version](/mbostock/7607535).", "created_at": "2014-05-16T17:42:02Z", "api": ["d3.format", "d3.layout.pack", "d3.select", "d3.json"], "updated_at": "2015-08-29T14:01:30Z", "description": "d3 pack radius fail"}, {"readme": "Binary (up/down) sparkline in D3\n\nSimple but cool", "created_at": "2013-08-30T00:12:25Z", "api": ["d3.json", "d3.select"], "updated_at": "2015-12-21T23:49:02Z", "description": "D3 Binary Sparkline"}, {"readme": "", "created_at": "2014-02-12T16:43:39Z", "api": ["d3.format", "d3.scale.category20", "d3.select", "d3.sankey", "d3.json", "d3.behavior.drag", "d3.rgb", "d3.interpolateNumber", "d3.sum", "d3.min", "d3.nest"], "updated_at": "2015-08-29T13:56:17Z", "description": "d3 Sankey Demo"}, {"readme": "", "created_at": "2015-04-13T00:36:13Z", "api": ["d3.scale.linear", "d3.scale.ordinal", "d3.svg.axis", "d3.csv", "d3.descending", "d3.max", "d3.select"], "updated_at": "2015-08-29T14:19:02Z", "description": "Knight D3 Module 4"}, {"readme": "The first 15 seconds of the D3 show reel. See full video at <http://vimeo.com/29862153>. Includes seamless transitions between the following visualization types:\n\n* lines\n* horizons\n* areas\n* stacked areas\n* streamgraph\n* overlapping areas\n* grouped bars\n* stacked bars\n* bars\n* donut\n\nAdmittedly, these aren\u2019t the most useful visualizations; their purpose is not to inform but to demonstrate D3\u2019s capability for producing dynamic visualizations with custom transitions. They *do* show real data (the monthly closing price for ten years\u2019 worth of stock data), but I didn\u2019t include axes for date or price. See the [axis component](http://bl.ocks.org/1166403) for a better example. Also, the stacked visualizations aren\u2019t especially meaningful, unless you imagine owning a portfolio with equal parts AAPL, AMZN, IBM and MSFT. Similarly, the bars and donuts represent the *average* price (or sum) during this time period.", "created_at": "2011-10-01T19:57:22Z", "api": ["d3.scale.category10", "d3.select", "d3.svg.line", "d3.svg.area", "d3.csv", "d3.time.format", "d3.nest", "d3.max", "d3.sum", "d3.time.scale", "d3.scale.linear", "d3.min", "d3.timer", "d3.scale.ordinal", "d3.range", "d3.layout.stack", "d3.zip.apply", "d3.layout.pie", "d3.svg.arc", "d3.interpolate"], "updated_at": "2016-04-28T16:44:17Z", "description": "D3 Show Reel"}, {"readme": "A comparison of the src directory for three versions of d3. Also see [d3 src tree](http://bl.ocks.org/4076122).", "created_at": "2012-11-17T03:09:37Z", "api": ["d3.layout.tree", "d3.svg.diagonal.radial", "d3.select", "d3.tsv"], "updated_at": "2015-10-12T21:58:14Z", "description": "d3 src tree transitions"}, {"readme": "", "created_at": "2014-09-11T12:27:39Z", "api": ["d3.select", "d3.json", "d3.geo.transform", "d3.geo.path"], "updated_at": "2015-08-29T14:06:18Z", "description": "CartoDB JS + D3 JS"}, {"readme": "Pulling in data to display svg shapes with labels \n\nData is of varying planetary years in earth days.\n\nThe planets revolve around the sun in different amounts of time, so a \"year\" on each planet is a different amount of time. The farther a planet is from the sun, the longer its year. [source](http://www.enchantedlearning.com/subjects/astronomy/age.shtml)", "created_at": "2014-04-02T14:41:05Z", "api": ["d3.scale.linear", "d3.max", "d3.select"], "updated_at": "2015-08-29T13:58:02Z", "description": "d3 | svg shapes with labels"}, {"readme": "", "created_at": "2015-07-13T14:46:53Z", "api": ["d3.time.scale", "d3.scale.linear", "d3.scale.category10", "d3.svg.line", "d3.select", "d3.min", "d3.max"], "updated_at": "2015-08-29T14:24:49Z", "description": "D3 Multiline Chart"}, {"readme": "Designed by Stephen Few, a bullet chart \u201cprovides a rich display of data in a small space.\u201d A variation on a bar chart, bullet charts compare a given quantitative measure (such as profit or revenue) against qualitative ranges (e.g., poor, satisfactory, good) and related markers (e.g., the same measure a year ago). Layout inspired by [Stephen Few](http://www.perceptualedge.com/articles/misc/Bullet_Graph_Design_Spec.pdf). Implementation based on work by [Clint Ivy](http://projects.instantcognition.com/protovis/bulletchart/), Jamie Love of [N-Squared Software](http://www.nsquaredsoftware.com/) and [Jason Davies](http://www.jasondavies.com/). The \"update\" button randomizes the values slightly to demonstrate transitions.\n", "created_at": "2015-02-20T07:27:07Z", "api": ["d3.select", "d3.scale.linear", "d3.timer.flush", "d3.bullet", "d3.json", "d3.selectAll", "d3.max"], "updated_at": "2015-08-29T14:15:48Z", "description": "D3 Bullet Chart"}, {"readme": "", "created_at": "2013-02-08T22:43:18Z", "api": ["d3.geo.winkel3", "d3.geo.path", "d3.behavior.zoom", "d3.select", "d3.json", "d3.selectAll"], "updated_at": "2015-12-12T08:18:46Z", "description": "D3 Map Projections Morphing"}, {"readme": "", "created_at": "2012-07-08T12:02:53Z", "api": ["d3.min", "d3.select", "d3.range", "d3.geom.voronoi", "d3.geom.polygon", "d3.mouse"], "updated_at": "2015-10-06T23:37:56Z", "description": "d3 bootstrap popovers (fix)"}, {"readme": "", "created_at": "2015-03-05T21:44:38Z", "api": ["d3.csv", "d3.nest", "d3.format", "d3.scale.linear", "d3.layout.treemap", "d3.select", "d3.scale.category20c", "d3.json"], "updated_at": "2015-11-02T02:58:06Z", "description": "D3 Treemap Milliardaires"}, {"readme": "", "created_at": "2011-12-13T19:34:47Z", "api": ["d3.scale.linear", "d3.scale.pow", "d3.select", "d3.selectAll"], "updated_at": "2015-12-18T18:58:02Z", "description": "Animated Circle using d3.js"}, {"readme": "Selectively applying path markers from a simple collection.", "created_at": "2013-06-28T21:26:52Z", "api": ["d3.scale.category10", "d3.select"], "updated_at": "2015-12-19T03:09:01Z", "description": "D3.js Markers"}, {"readme": "D3 2.10 adds support for static localization of [d3.time.format](https://github.com/mbostock/d3/wiki/Time-Formatting). When building D3, specify the LOCALE environment variable. For example, to build a version of D3 for Russian:\n\n```bash\nLOCALE=ru_RU make clean all\n```\n", "created_at": "2012-08-09T17:33:42Z", "api": ["d3.event.stopPropagation", "d3.event.preventDefault", "d3.ns.qualify", "d3.requote", "d3.dispatch", "d3.ease.apply", "d3.timer", "d3.tween", "d3.select", "d3.rebind", "d3.range.apply", "d3.format", "d3.bisect", "d3.range", "d3.quantile", "d3.min", "d3.max", "d3.merge", "d3.text", "d3.random.normal", "d3.zip.apply", "d3.bisector", "d3.xhr", "d3.formatPrefix", "d3.map", "d3.round", "d3.interpolateNumber", "d3.transform", "d3.rgb", "d3.hsl", "d3.lab", "d3.hcl", "d3.interpolate", "d3.interpolateArray", "d3.interpolateString", "d3.interpolateRgb", "d3.ease", "d3.scale.linear", "d3.scale.pow", "d3.scale.ordinal", "d3.svg.diagonal", "d3.transition", "d3.touches", "d3.mouse", "d3.geom.quadtree", "d3.behavior.drag", "d3.layout.hierarchy", "d3.sum", "d3.permute", "d3.geo.albers", "d3.geom.polygon", "d3.geo.albersUsa", "d3.geo.greatArc", "d3.time.format", "d3.time.dayOfYear", "d3.time.sundayOfYear", "d3.time.mondayOfYear", "d3.time.format.utc", "d3.time.year", "d3.time.day"], "updated_at": "2016-02-09T01:31:10Z", "description": "d3.time.format localization"}, {"readme": "This is a simple d3.js graph used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is aimed at providing some exposure to some d3.js functions and should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.", "created_at": "2016-03-22T11:08:17Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-03-22T11:08:17Z", "description": "Simple d3.js Graph"}, {"readme": "this example uses d3 to manipulate paths inside of an svg loaded from an external file.\n\nthe [D3 logo](https://github.com/d3/d3-logo/blob/master/d3.svg) svg is from the eponymous [D3 Logo](http://bl.ocks.org/mbostock/e787e283b8cf9d5a8f8a) bl.ock\n\nthis example is based on earlier research for the bl.ock [Sporthorse Foal Registrations II](http://bl.ocks.org/micahstubbs/99df29f258860e53c5e2). I've found this technique useful again recently, and thought it deserved a few examples of its own. ", "created_at": "2016-04-03T06:04:37Z", "api": ["d3.xml", "d3.select", "d3.selectAll"], "updated_at": "2016-04-03T06:05:16Z", "description": "External SVG + D3 I"}, {"readme": "Created using the [d3-sankey](https://github.com/d3/d3-sankey) plugin for D3 4.0.\n\nRun `npm install` and then `npm run build` to create `d3.min.js`.  \n\nStolen from Mike Bostock's [original here](http://bost.ocks.org/mike/sankey/).\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-03T16:43:56Z", "api": ["d3.format", "d3.scale.category20", "d3.select", "d3.sankey", "d3.json", "d3.behavior.drag", "d3.rgb"], "updated_at": "2015-12-05T19:09:27Z", "description": "d3-sankey demo"}, {"readme": "Simple demonstration of consuming Heroku DataClips with D3.js.\n\nData source: <https://dataclips.heroku.com/vgyygvzqtezwpmwpcmmjlluamjlk> (.json)", "created_at": "2013-06-03T21:09:18Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.scale.category10", "d3.svg.axis", "d3.select", "d3.json", "d3.time.day.offset", "d3.max", "d3.extent"], "updated_at": "2015-12-18T01:09:08Z", "description": "DataClips + D3.js Chart"}, {"readme": "A visualization of files in [d3-hierarchy](https://github.com/d3/d3-hierarchy), based on [Radial Tidy Tree](http://bl.ocks.org/mbostock/2e12b0bd732e7fe4000e2d11ecab0268).\n\n## Data Collection\n\nUse [git](http://git-scm.com/) to clone a repository, then [du](http://www.gnu.org/software/coreutils/manual/html_node/du-invocation.html) to create a tsv with the directory contents.\n\n```bash\ngit clone https://github.com/d3/d3-hierarchy.git\n(echo -n 'size\\tfile\\n'; du -a d3-hierarchy/*) > d3-hierarchy.tsv\n```\n\n## Burrow - recursive nesting\n\nAn updated version of the **`burrow`** function from [d3 src tree](http://bl.ocks.org/syntagmatic/4076122) in plain JavaScript. This function takes an array of keys to generate a hierarchy.\n\nCompared to **`d3.nest`**: **`burrow`** allows for branches of arbitrary depth. \n\nCompared to **`d3.stratify`**: parent nodes do not need to be specified as separate rows in the tabular data. Parents are created automatically as they are encountered.\n", "created_at": "2016-04-21T06:53:31Z", "api": ["d3.tree", "d3.select", "d3.tsv", "d3.hierarchy"], "updated_at": "2016-04-21T12:57:49Z", "description": "d3-hierarchy tree"}, {"readme": "This is an example of automatic raster reprojection of a tiled layer from **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nIt still needs some work. It does not reproject the raster on-the-fly but rather only reprojects it at \"zoomend\" which is triggered at the end of a zoom or pan event.\n\nThis uses [Jason Davies' d3.geo.raster and d3.quadtiles](http://www.jasondavies.com/maps/tile/).", "created_at": "2014-07-12T18:48:31Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.carto.layer.topojson", "d3.carto.layer.csv", "d3.json", "d3.carto.layer.featureArray", "d3.geo.conicEquidistant"], "updated_at": "2015-08-29T14:03:54Z", "description": "Raster Reprojection d3.carto.map"}, {"readme": "A very simple example of [d3.layout.timeline](https://github.com/emeeks/d3.layout.timeline) that takes a csv like this:\n\n```\ns,e\n1,7\n1,6\n10,15\n7,8\n4,5\n5,6\n```\n\nAnd places it into a few lanes to be drawn on-screen.", "created_at": "2015-09-12T01:04:34Z", "api": ["d3.scale.linear", "d3.min", "d3.max", "d3.layout.timeline", "d3.csv", "d3.select"], "updated_at": "2016-03-16T15:47:10Z", "description": "Simple d3.layout.timeline"}, {"readme": "Testing each option to d3.bullet, taken from [d3-plugins](https://github.com/d3/d3-plugins/tree/42102dcc0142d3025295740dcdb71999f216a71a/bullet) and slightly revised. This shows that all of the options still work, and some of them work in edge cases where they didn't before. Also shown are cases that do not yet work. This is not an automated test suite; determining success or failure must be done manually (optically).", "created_at": "2014-09-03T02:03:50Z", "api": ["d3.svg.axis", "d3.select", "d3.scale.linear", "d3.max", "d3.transition", "d3.timer.flush", "d3.rebind", "d3.bullet"], "updated_at": "2015-08-29T14:06:00Z", "description": "Testing d3.bullet"}, {"readme": "An implementation of [Danny Holten](http://www.win.tue.nl/~dholten/)'s *hierarchical edge bundling* algorithm in [D3](http://d3js.org/), showing dependencies between classes in [d3](http://d3js.org) functions hierarchy. Dependencies are bundled according to the parent packages. This example uses two layouts: a radial d3.layout.cluster to position the tree nodes, and d3.layout.bundle to group the dependencies into spline bundles. Thanks to [Jason Davies](http://www.jasondavies.com/) for contributing the layout implementation!\n", "created_at": "2013-03-12T18:56:59Z", "api": ["d3.layout.cluster", "d3.ascending", "d3.layout.bundle", "d3.svg.line.radial", "d3.select", "d3.svg.arc", "d3.json", "d3.event.preventDefault"], "updated_at": "2015-12-14T20:40:46Z", "description": "d3 inter-dependency graph"}, {"readme": "## hexbin scatterplot\n\na [d3-hexbin](https://github.com/d3/d3-hexbin) example with no axes donated by [micahstubbs](http://bl.ocks.org/micahstubbs).\n\nThis example modifies the block [Hexagonal Binning](http://bl.ocks.org/mbostock/4248145) by\n\n+ removing the axes\n\n+ removing the stroke from the hexagon paths\n\n+ using shiny new D3 V4.0 syntax\n\n---\n\nThis example shows how to use the [d3.hexbin](https://github.com/d3/d3-hexbin) plugin for hexagonal binning. 2,000 random points with a normal distribution are binned into hexagons; color encodes the number of points that fall into each bin. You can also use [area encoding](../4248146). Inspired by earlier work by [Zachary Forest Johnson](http://indiemaps.com/blog/2011/10/hexbins/).\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-05T21:03:01Z", "api": ["d3.values", "d3.random.normal", "d3.range", "d3.hexbin", "d3.scale.linear", "d3.max", "d3.scale.identity", "d3.select"], "updated_at": "2015-12-05T21:38:20Z", "description": "d3-hexbin demo"}, {"readme": "\nJames Eanes - VI4 - Magnitude as Area.\n\nThis pie chart gives an example of magnitude as area.  The pie chart code was taken from Zero Viscosity's example (http://zeroviscosity.com/d3-js-step-by-step/step-1-a-basic-pie-chart).  The data is a subset of the passing yards data from week 3.", "created_at": "2016-02-17T04:55:46Z", "api": ["d3.scale.category20b", "d3.select", "d3.svg.arc", "d3.layout.pie"], "updated_at": "2016-02-17T04:55:47Z", "description": "VI4 - Magnitude as Area"}, {"readme": "A simple map example created with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** with a tile layer, centered on Toronto.\n\nMap tiles by [CartoDB](http://cartodb.com/attributions#basemaps), under [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/). Data by [OpenStreetMap](http://www.openstreetmap.org/), under ODbL.\n", "created_at": "2015-09-08T07:42:07Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile"], "updated_at": "2015-09-08T07:42:07Z", "description": "Hello d3.carto"}, {"readme": "A simple map example created with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** with a tile layer, centered on Toronto.\n\nMap tiles by [CartoDB](http://cartodb.com/attributions#basemaps), under [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/). Data by [OpenStreetMap](http://www.openstreetmap.org/), under ODbL.\n", "created_at": "2015-03-12T03:21:39Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile"], "updated_at": "2015-08-29T14:16:57Z", "description": "Hello d3.carto"}, {"readme": "Without modifying the information in genes.json, use D3 to construct a pie chart that shows the relative fraction of genes in the forward and reverse directions. Your code must dynamically generate the pie chart from the data. In other words, if I modify the genes.json data file, the pie chart must update automatically. (15 points)\n\nforked from <a href='http://bl.ocks.org/scresawn/'>scresawn</a>'s block: <a href='http://bl.ocks.org/scresawn/53fe9d373ca3b3e20632f69c5169a59d'>final exam question 2</a>", "created_at": "2016-05-05T14:10:25Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.json"], "updated_at": "2016-05-05T14:10:25Z", "description": "final exam question 2"}, {"readme": "Circle-bound nodes in [d3.layout.force()](https://github.com/mbostock/d3/wiki/Force-Layout), using a variation of Mike Bostock's rectangular [Bounded Force Layout](http://bl.ocks.org/mbostock/1129492). Here we calculate the maximum and minimum `x` for a given `y` in the circle, and vice versa.\n\nforked from <a href='http://bl.ocks.org/nsonnad/'>nsonnad</a>'s block: <a href='http://bl.ocks.org/nsonnad/5993342'>Circle-bound D3 force layout</a>", "created_at": "2016-04-08T21:14:22Z", "api": ["d3.range", "d3.scale.category10", "d3.select", "d3.layout.force", "d3.geom.quadtree"], "updated_at": "2016-04-11T19:06:02Z", "description": "Bound d3 with repulsion"}, {"readme": "Loading data into a [crossfilter](http://square.github.com/crossfilter/) and with [d3.csv](https://github.com/mbostock/d3/wiki/CSV) and displaying a few [Top-K lists](https://github.com/square/crossfilter/wiki/API-Reference#wiki-dimension_top)\n\nData derived from the [USDA National Nutrient Database](http://www.ars.usda.gov/Services/docs.htm?docid=8964).", "created_at": "2013-03-09T10:18:09Z", "api": ["d3.csv", "d3.select"], "updated_at": "2015-12-14T17:39:04Z", "description": "Crossfilter with d3.csv"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/e366fba2b4626271dcceb3aeed7089e5'>D3-copy-Enjalot</a>\n\nforked from <a href='http://bl.ocks.org/rvross/'>rvross</a>'s block: <a href='http://bl.ocks.org/rvross/ac78fbba1282c7b228253b97b0090e6b'>D3-copy-Enjalot</a>", "created_at": "2016-04-30T08:18:57Z", "api": ["d3.scale.linear", "d3.max", "d3.select"], "updated_at": "2016-04-30T08:18:57Z", "description": "D3-copy-Enjalot"}, {"readme": "Example for [Cooperative Brushing and Tooltips in D3](http://wrobstory.github.io/2013/11/D3-brush-and-tooltip.html). \n\nScatter chart with only tooltips, no brush layer. ", "created_at": "2013-11-24T17:47:06Z", "api": ["d3.select", "d3.mouse", "d3.scale.linear", "d3.max", "d3.svg.axis", "d3.helper.tooltip"], "updated_at": "2015-12-29T06:38:58Z", "description": "D3 Brush and Tooltip II"}, {"readme": "Automatic hexbinning in **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** allows for the creation of granular or high resolution heatmaps.\n\nThe map.createHexbinLayer function takes two variable: a point d3.carto.layer (either CSV or XY Array) and a resolution (in degrees). It creates a feature carto layer that automatically bins the points in the source layer and which you can then add to the map easily.\n\nIn this example, I generate two different hexbin resolutions: One at 2-degree and one at .75 degree, so that you can see how simple it is. The original point objects are found in the properties.node attribute of each hex feature and can be used to count the number or average the population, etc.\n\nThis requires a slightly modified [hexbin.js](https://github.com/emeeks/d3-plugins/blob/master/hexbin/hexbin.js) (also in this gist) to work.", "created_at": "2014-09-15T19:00:09Z", "api": ["d3.values", "d3.range", "d3.carto.map", "d3.select", "d3.carto.layer", "d3.carto.layer.csv", "d3.scale.linear"], "updated_at": "2015-08-29T14:06:30Z", "description": "Automatic Hexbinning - d3.carto"}, {"readme": "D3\u2019s d3.geo.path can be used with Canvas as well as SVG.", "created_at": "2012-09-25T18:33:41Z", "api": ["d3.geo.albers", "d3.select", "d3.geo.path", "d3.json"], "updated_at": "2016-02-09T01:37:37Z", "description": "d3.geo.path + Canvas"}, {"readme": "This is a demonstration of building a custom D3 4.0 bundle using ES2015 modules and [Rollup](http://rollupjs.org). Custom bundles can be optimized to contain only the code you need. This example exposes just three fields on the `d3` object: [d3.event](https://github.com/d3/d3-selection#event), [d3.select](https://github.com/d3/d3-selection#select) and [d3.selectAll](https://github.com/d3/d3-selection#selectAll). The minified and gzipped bundle is only 3,691 bytes, a savings of 93% over the default build!\n\nTo build:\n\n```\nnpm install\nnpm run prepublish\n```\n\nYou may also run Rollup and UglifyJS directly:\n\n```\nrollup -c && uglifyjs d3.js -c -m -o d3.min.js\n```\n", "created_at": "2015-05-29T17:28:47Z", "api": ["d3.select"], "updated_at": "2016-05-20T12:04:24Z", "description": "D3 Custom Bundle"}, {"readme": "", "created_at": "2016-02-13T23:00:14Z", "api": ["d3.csv", "d3.scale.ordinal", "d3.select", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2016-02-13T23:00:14Z", "description": ""}, {"readme": "This an example using the [D3 trail layout](https://github.com/bmschmidt/D3-trail) made by [Benjamin Schmidt](https://github.com/bmschmidt).\nThe example shows how to use the *coordinates* as the *coordType* value.\nThe track.json data represents the Hayian typhoon track, as it's explained in [this blog entry](http://geoexamples.blogspot.com/2013/12/d3-map-styling-tutorial-i-preparing-data.html).\n\nThere is a blog entry explaining this example at [GeoExamples](http://geoexamples.blogspot.com/2014/07/using-d3-trail-layout-to-draw-hayian.html)", "created_at": "2014-07-05T10:20:00Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.json", "d3.select", "d3.layout.trail"], "updated_at": "2015-08-29T14:03:31Z", "description": "D3 Trail Layout using coordinates"}, {"readme": "Reusable slopegraph inspired/adapted from [Ben Van Dyke's example](http://vandykeindustries.com/slopegraphs-d3.html) into a reusable chart.\n\nThis slopegraph example shows the number of personal computers installed in a country per household. This includes desktop PCs and laptops, but excludes smartphones and terminals connected to mainframe computers. All figures are calculated using total number of Personal Computers and the Total Number of Households.\n\n[data source](http://www.nakono.com/tekcarta/databank/personal-computers-per-household/)\n", "created_at": "2015-12-12T16:37:47Z", "api": ["d3.format", "d3.dispatch", "d3.max", "d3.scale.linear", "d3.select", "d3.rebind", "d3.eesur.slopegraph", "d3.json", "d3.selectAll"], "updated_at": "2016-01-25T10:41:50Z", "description": "d3 | Reusable slopegraph"}, {"readme": "**D3 + Leaflet: Canadian 2011 Polling Districts**. \n\nAdapted from [Mike Bostock's D3 + Leaflet](http://bost.ocks.org/mike/leaflet/)", "created_at": "2015-11-24T17:54:14Z", "api": ["d3.select", "d3.json", "d3.geo.transform", "d3.geo.path"], "updated_at": "2015-11-30T16:43:54Z", "description": "D3 + Leaflet for Canada"}, {"readme": "This is a follow on from the [simple scatterplot](http://bl.ocks.org/d3noob/38744a17f9c0141bcd04) used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is aimed at demonstrating a the use of an `if` statement to select elements in d3.js. It should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.", "created_at": "2014-06-22T18:45:24Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2015-08-29T14:02:53Z", "description": "if selection in d3.js"}, {"readme": "This is a d3.js bar chart as used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is derived from the Mike Bostock's [Bar Chart example](http://bl.ocks.org/mbostock/3885304) but it is a slightly cut down version.", "created_at": "2014-02-12T09:11:14Z", "api": ["d3.time.format", "d3.scale.ordinal", "d3.scale.linear", "d3.svg.axis", "d3.select", "d3.csv", "d3.max"], "updated_at": "2016-05-17T07:29:18Z", "description": "Simple d3.js bar chart"}, {"readme": "D3: Async Arc Progress Gauge / Meter\n====================================\n[View on bl.ocks.org/cmdoptesc/e9b3bfc6f43b4bd237e2](http://bl.ocks.org/cmdoptesc/e9b3bfc6f43b4bd237e2)\n\nForked from Bostock's [original Progress Events example](http://bl.ocks.org/mbostock/3750941) to answer [Rex X's post](https://groups.google.com/d/msg/d3-js/njGyajVJyTs/beXlB9gg9vMJ) on the d3-js group:\n\nThe progress meter is based on the number of files that have downloaded. In our case, `numberOfFiles` is set to 20.\n\nWe then generate 20 random durations between 0 - 3000ms to simulate download times, and call `setTimeout` using the durations. Each timer then calls `update`, which increments the number of files downloaded, increasing the progress arc with a tweening function.\n\nIf you **open up the console** (CMD + OPT + J / CTRL + SHIFT + J), you can see the async events firing.\n\nAlso, it should be noted that unlike Bostock's earlier [arc tween example](http://bl.ocks.org/mbostock/5100636), we're not following the usual D3 conventions by binding data to any SVG elements and updating the data.\n\nal lin, jul 2015\n", "created_at": "2015-07-21T03:26:28Z", "api": ["d3.format", "d3.svg.arc", "d3.select", "d3.interpolate", "d3.transition"], "updated_at": "2015-08-29T14:25:28Z", "description": "D3 Arc Progress Gauge / Meter (for d3-js group)"}, {"readme": "This infographic was prepared for the d3.selectAll('\u00admeetup').data(\u00ad[2014]).enter() meet of the Bay Area d3 User Group, held Jan. 28, 2014. It uses Mike Bostock's [Circle Packing](http://bl.ocks.org/mbostock/4063530) enclosure diagram to show the long-tail distribution of authors and titles in the D3 ecosystem.  Source data originates from the [D3 Gallery](http://christopheviau.com/d3list/gallery.html) spreadsheet.  \n\nDuring data cleanup, aggregated domain values were assigned to each record in the data from the url.  The bl.ocks.org domain represents 880 titles, and github holds 169.  However, there are 24 domains with more than 5 titles and another 522 with fewer than 5.  While bl.ocks and github are the foundation for the developer community, the other domains hold finished titles that make points and change opinions.  Presentation of author titles by domain allows us to see this dynamic at a glance.\n\nEach containing circle (yellow) represents a web domain where authors display their finished D3 visualizations. Each leaf circle (blue) within a domain represents the number of works an author presents on that domain. Mouse over a circle to view the number in a tooltip.\n\nThe Jan. 24, 2014 spreadsheet snapshot held 1,986 titles, but listed authors for only 1,464 (74%) of the total.   Null values were replaced with author tokens extracted from the url when possible. The remainder were associated with the single appearance of a unique domain, and were assigned to the list with a unique name with the suffix 'other'. This represents the many people with one published D3 image. The same approach was taken for 60 bl.ocks.org titles that had a gist number, but no name. These should actually be assigned to someone on the list, but there wasn't enough time to finish that work. The information was kept to keep the domains sized appropriately.\n\nThis version of the infographic adds responsive page design to the circle packing gist, which resizes the image as the window size changes. Click on the [raw data](http://bl.ocks.org/StewartNoyce/raw/8699346/) to see this in action.  This allows it to appear gracefully in a phone format (particularly the iPhone). Additionally, there is a noob factor that suppresses the label for any circle representing a person with fewer published images than the specified value. ", "created_at": "2014-01-29T23:17:28Z", "api": ["d3.format", "d3.layout.pack", "d3.select", "d3.json"], "updated_at": "2015-08-29T13:55:48Z", "description": "D3 Authors by Domain"}, {"readme": "A map example created with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** that loads feature, tile and point layers using the various methods available in d3.carto.", "created_at": "2014-09-20T20:01:24Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.topojson", "d3.carto.layer.csv", "d3.csv", "d3.carto.layer.xyArray", "d3.carto.layer.featureArray"], "updated_at": "2015-08-29T14:06:44Z", "description": "Managing Layers - d3.carto"}, {"readme": "Without modifying the information in genes.json, use D3 to construct a pie chart that shows the relative fraction of genes in the forward and reverse directions. Your code must dynamically generate the pie chart from the data. In other words, if I modify the genes.json data file, the pie chart must update automatically. (15 points)\n\nforked from <a href='http://bl.ocks.org/scresawn/'>scresawn</a>'s block: <a href='http://bl.ocks.org/scresawn/53fe9d373ca3b3e20632f69c5169a59d'>final exam question 2 attempt 2</a>", "created_at": "2016-05-05T14:08:24Z", "api": ["d3.scale.category20b", "d3.select", "d3.svg.arc", "d3.layout.pie", "d3.json"], "updated_at": "2016-05-05T14:08:24Z", "description": "final exam question 2 attempt 2"}, {"readme": "The first 15 seconds of the D3 show reel. See full video at <http://vimeo.com/29862153>. Includes seamless transitions between the following visualization types:\n\n* lines\n* horizons\n* areas\n* stacked areas\n* streamgraph\n* overlapping areas\n* grouped bars\n* stacked bars\n* bars\n* donut\n\nAdmittedly, these aren\u2019t the most useful visualizations; their purpose is not to inform but to demonstrate D3\u2019s capability for producing dynamic visualizations with custom transitions. They *do* show real data (the monthly closing price for ten years\u2019 worth of stock data), but I didn\u2019t include axes for date or price. See the [axis component](http://bl.ocks.org/1166403) for a better example. Also, the stacked visualizations aren\u2019t especially meaningful, unless you imagine owning a portfolio with equal parts AAPL, AMZN, IBM and MSFT. Similarly, the bars and donuts represent the *average* price (or sum) during this time period.\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/1256572'>D3 Show Reel</a>\n\nforked from <a href='http://bl.ocks.org/sivartravis/'>sivartravis</a>'s block: <a href='http://bl.ocks.org/sivartravis/84553799f7a1a17548e1'>D3 Show Reel</a>", "created_at": "2016-05-15T14:47:56Z", "api": ["d3.scale.category10", "d3.select", "d3.svg.line", "d3.svg.area", "d3.csv", "d3.time.format", "d3.nest", "d3.max", "d3.sum", "d3.time.scale", "d3.scale.linear", "d3.min", "d3.timer", "d3.scale.ordinal", "d3.range", "d3.layout.stack", "d3.zip.apply", "d3.layout.pie", "d3.svg.arc", "d3.interpolate"], "updated_at": "2016-05-15T14:47:56Z", "description": "D3 Show Reel"}, {"readme": "[![Join the chat at https://gitter.im/Jay-Oh-eN/data-scientists-guide-apache-spark](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Jay-Oh-eN/interactive-data-viz?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThese are the materials for my workshop on creating interactive data visualizations with D3! We will be using the following two tools to work through the exercises:\n\n* [bl.ocks.org](http://bl.ocks.org/): D3.js Gist renderer and online community\n* [Building Blocks](http://blockbuilder.org/about): In-browser interactive D3.js bl.ock editor\n\nAnd please do not hesitate to reach out to me directly via email at jondinu@gmail.com or over twitter @clearspandex\n\n> Throughout this workshop, you will learn how to make an interactive map of AirBnB listings in SF to better understand the companies impact on the city.\n\n### Exercises\n\n* [Part 1](15f52d2ec0b035b53c6f): simple bubble chart visualizing 3 dimensions of the data.\n  * [solution (you are here \ud83d\udc47)](1ca89dc69bcc18f3f4c0) \n* [Part 2](a29e820cb6d8f3a84249): thematic map of AirBnB listings distribution across SF neighborhoods.\n  * [solution](a6e0ca2e13082ec099da) \n* [Final](b8ef4734abad1c644221): interactive linked map and line plot of AirBnB activity per each neighborhood in SF.\n\n### The Data\n\nThe [data](http://insideairbnb.com/get-the-data.html) comes from [Inside AirBnB](http://insideairbnb.com/index.html) and it is available below under a [Creative Commons CC0 1.0 Universal (CC0 1.0) \"Public Domain Dedication\"](http://creativecommons.org/publicdomain/zero/1.0/) license.\n\n> Inside AirBnB is an independent, non-commercial set of tools and data that allows you to explore how Airbnb is really being used in cities around the world.\n\n---\n\nGithub repo: [https://github.com/Jay-Oh-eN/interactive-data-viz](https://github.com/Jay-Oh-eN/interactive-data-viz)\n\nArchival event links: \n\n* [Open Data Science Conference SF 2015](http://opendatascicon.com/detailed-speaker-page/#jonathan-dinu)\n* [DataWeek 2015](https://integrate2015.sched.org/event/4Hmk/introduction-to-data-science-interactive-data-visualozation-with-d3js)\n\n[mongoose]: http://cesanta.com/mongoose.shtml\n[sublime]: http://www.sublimetext.com/2\n[chrome]: https://www.google.com/chrome/browser/desktop/\n[zip]: https://github.com/Jay-Oh-eN/hands-on-d3/archive/master.zip\n[gitit]: http://jlord.us/git-it/\n\n[sf-asthma]: https://data.sfgov.org/Health-and-Social-Services/Climate-and-Health-Data/paqg-zyqx\n[grayarea]: http://grayarea.org/\n[swiss]: http://www.swissnexsanfrancisco.org/\n[lift]: http://liftconference.com/lift15\n[data-canvas-img]: images/data-canvas.png\n[data-canvas]: http://datacanvas.org/\n[data-canvas-map]: http://map.datacanvas.org/\n[dump]: https://s3.amazonaws.com/localdata-export/datacanvas/full.zip\n[data-canvas-data]: http://map.datacanvas.org/#!/data\n[dictionary]: https://github.com/Jay-Oh-eN/hands-on-d3/blob/master/data/dictionary.pdf\n\n[d3]: http://d3js.org/\n[dimple]: http://dimplejs.org/\n[moment]: http://momentjs.com/\n[d3plus]: http://d3plus.org/\n[rickshaw]: http://code.shutterstock.com/rickshaw/\n[dc.js]: http://dc-js.github.io/dc.js/\n[nvd3]: http://nvd3.org/\n[c3]: http://c3js.org/\n[raw]: http://app.raw.densitydesign.org/\n[queue]: https://github.com/mbostock/queue\n[parallel]: https://syntagmatic.github.io/parallel-coordinates/\n\nforked from <a href='http://bl.ocks.org/Jay-Oh-eN/'>Jay-Oh-eN</a>'s block: <a href='http://bl.ocks.org/Jay-Oh-eN/1ca89dc69bcc18f3f4c0'>Civic Impact through Data Visualization: Solution 1</a>", "created_at": "2016-04-03T07:30:33Z", "api": ["d3.select", "d3.max", "d3.extent", "d3.scale.linear", "d3.scale.pow", "d3.scale.category10", "d3.svg.axis", "d3.selectAll", "d3.csv"], "updated_at": "2016-04-07T15:30:28Z", "description": "D3.js Legends"}, {"readme": "This [d3.js block] [d3b] tries to combine the zoom and brush behaviour of d3.\n\nLeft click should change the brush (create brush, change brush size, move brush) and middle click shoule move the graph with zoom behaviour (and not change the brush).\nMousewheel can be used for zooming.\n\nSee [Stack Overflow] [so] for question regarding the problem.\n\n[so]: http://stackoverflow.com/questions/23910711/how-to-handle-brush-on-left-click-and-zoom-on-middle-click-in-d3-js\n[d3b]: http://bl.ocks.org/bobatsar/9403d59b12e33a0925cb\n\nforked from <a href='http://bl.ocks.org/bobatsar/'>bobatsar</a>'s block: <a href='http://bl.ocks.org/bobatsar/9403d59b12e33a0925cb'>d3 zoom and brush test</a>", "created_at": "2015-10-12T06:40:55Z", "api": ["d3.scale.linear", "d3.extent", "d3.behavior.zoom", "d3.select", "d3.svg.brush", "d3.event.stopImmediatePropagation", "d3.svg.line", "d3.svg.axis", "d3.mouse"], "updated_at": "2015-10-12T06:40:55Z", "description": "d3 zoom and brush test"}, {"readme": "# Simple Map with D3\n\nCreating a simple map with D3.\n\nLearn more:\n\n- [Let\u2019s Make a Map](http://bost.ocks.org/mike/map/)\n", "created_at": "2015-09-19T19:44:07Z", "api": ["d3.select", "d3.json", "d3.geo.equirectangular", "d3.geo.path"], "updated_at": "2015-09-25T23:11:40Z", "description": "Simple Map with D3"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nThis is an example of creating a graphic in Adobe Illustrator which is then exported as a SVG file. This image was designed as a new annotation element for another project.  The reason for using a tool to generate SVGs is that doing any complex graphic manually does not scale and is very painful to create. However, there are things to consider when bringing external SVGs in, which I will discuss further down.\n\nThis SVG is composed of several layers that will support multiple interaction schemes. The red circle is a delete button. The blue circle will be draggable off the SVG to anywhere on the screen with a connecting line back to the parent g. The white space in the middle of the parent g will be for text annotation. Each layer created in Adobe Illustrator gets mapped to a new group element in the SVG each with its own generated ID. Each element in each group is assigned a CSS class for styling. All the CSS is then placed in the header of the SVG element.  Each element in each group does not have its own ID.\n\nThis SVG is a set of images only. It has not been set up for any interaction yet. Look at the SVG defined in RectAnno3.xml to get an idea of the layout and naming.\n\nThe SVG file is read into a D3 based page via a call to d3.xml. The file read in for this example is RectAnno3.xml. Normally this would be a .svg but Gist does not like that so I just changed it to an xml extension and it works the same. \n\nUnlike how you normally create a set of SVG elements in D3, importing a SVG requires a different approach. You explicitly attach your imported SVG directly to a DOM node.\n\n1. Once you have read in the SVG file with d3.xml you pass in the imported SVG to the document with document.importNode. \n2. You then attach the imported node to a SVG node by cloning it and appending to a target parent SVG element like a g. \n\nThings to consider when importing external SVGs.\n\n1. All Adobe Illustrator layers map to distinct g elements. Important that you layout your graphic such that what ends up in a specific g element makes sense, especially if you are going to transform that element in any way. The IDs that are generated are kind of funky. You have control over the name based on the name of the Adobe Illustrator layer but an additional string is inserted. (For my SVG it is x5F). So if the layer was named anno_rect then the generated ID would be anno_x5F_rect.\n2. Every element has its own CSS which is included in the SVG element header. Usually you have a separate CSS file(s) for your styling rather than having it in the SVG element.\n3. Accessing specific sub-elements requires a bit of navigation since there are no ids below the g element. This is fine if the graphic isn't too complex or does not contain collections of the same type of element. \n\nOne Workflow could be:\n\n1. Create your graphic in Adobe paying attention to what is in each layer (translates to a g in SVG). \n2. Edit the exported SVG, adding IDs where needed and move the CSS out to an external file.\n3. Unfortunately there is no easy way to reverse this so any changes that are needed to the original graphic will require repeating steps 1 and 2 after you edit and export the graphic from Adobe.\n\nThis is my first effort to import SVGs so if there are any errors or comments about how to do this more effectively please revise.\n\nThanks\n", "created_at": "2015-10-17T22:37:37Z", "api": ["d3.select", "d3.xml"], "updated_at": "2015-10-17T22:37:59Z", "description": "Adobe SVG to D3"}, {"readme": "This is an of projection mode rendering from **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nSwitching the map mode to \"projection\" activates it. The default projection is Mollweide, but you can define your own and assign it using map.projection(), as shown in the reproject function.\n", "created_at": "2014-07-12T19:07:21Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.csv", "d3.carto.layer.geojson", "d3.carto.layer.topojson", "d3.geo.conicEquidistant"], "updated_at": "2015-08-29T14:03:54Z", "description": "Projection Mode Rendering - d3.carto.map"}, {"readme": "A demonstration of custom modal infoboxes from **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nIf you click on a site point (the pink circles) you'll see an infobox that reads something like \"Lugdunum Convenarum in modern day France\" whereas if you click on a country, you'll see an infobox that reads something like \"The country of Spain has a short name\".\n\nHow a modal handles the data in a datapoint for display is handled by defining a custom formatter for the modal, which requires that you create a new d3.carto.modal. The new modal is assigned to a d3.carto.layer using .modal() as shown in the example for the CSV Points and Feature Array layers.\n\nFormatters are defined using the standard D3 accessor syntax. The default formatter, demonstrated in the [basic modal example](http://bl.ocks.org/emeeks/433a9b04f82a1c78af4b). Since you know your data better than d3.carto does, you can specify how to parse what attributes in as specific a manner as you want. The function should return a string of HTML suitable to be dropped into the modal div.\n\nThe key lines for defining the modal and formatter are:\n```\n    csvModal = d3.carto.modal();\n    csvModal.formatter(\n      function(d) {return \"<h1>\" + d.label + \" in modern day \" + d.modern + \"</h1>\"}\n    )\n```\n\nand:\n```\n    featureModal = d3.carto.modal();\n    featureModal.formatter(\n      function(d) {return \"<p class='countryInfobox'>The country of \" + d.properties.name + \" has a short name</p>\"}\n    )\n```", "created_at": "2015-09-08T08:43:16Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.carto.layer.topojson", "d3.carto.modal", "d3.carto.layer.csv", "d3.carto.layer.featureArray"], "updated_at": "2015-09-08T08:43:16Z", "description": "Custom Infobox Formatter - d3.carto.map"}, {"readme": "An example of cirular inset maps using D3, based on the naive approach \nof redrawing a clipped version of the whole map for every inset.\n", "created_at": "2014-06-12T12:57:24Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.selectAll", "d3.json"], "updated_at": "2015-08-29T14:02:30Z", "description": "Circular inset maps for D3"}, {"readme": "An example of how to create your own sparkline dirctive in AngularJS using `replace` and `transclude`\n\n\nThis is a code excerpt from the book D3 on Angular. [http://leanpub.com/d3angularjs](http://leanpub.com/d3angularjs)", "created_at": "2014-03-31T23:02:14Z", "api": ["d3.select", "d3.min", "d3.max", "d3.scale.linear"], "updated_at": "2015-10-12T07:37:31Z", "description": "Sparklines with Angular and D3"}, {"readme": "Animating the [D3 logo](/mbostock/c9455b842a01f6907020) as if it were being drawn by hand.\n", "created_at": "2015-10-16T04:33:43Z", "api": ["d3.select", "d3.selectAll"], "updated_at": "2016-02-09T01:49:09Z", "description": "Animated D3 Logo"}, {"readme": "", "created_at": "2013-01-09T16:50:26Z", "api": ["d3.jsonp", "d3.select", "d3.jsonp."], "updated_at": "2015-12-10T21:18:58Z", "description": "d3 jsonp plugin"}, {"readme": "A simple choropleth map made with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nAfter adding a topojson layer, you can access the features either by using map.layers() or the layer if assigned to a variable or via d3.selectAll.data() on the appropriate elements. You can then style the features based on their properties. In this case, the size of the ward.\n\nSome hover behavior can also be defined using D3.", "created_at": "2014-07-14T22:25:57Z", "api": ["d3.carto.map", "d3.select", "d3.geo.conicEquidistant", "d3.carto.layer", "d3.extent", "d3.scale.quantile", "d3.selectAll"], "updated_at": "2015-08-29T14:03:58Z", "description": "Simple Choropleth - d3.carto.map"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\na ridiculously simple example experimenting with [mobservable](https://mweststrate.github.io/mobservable/getting-started.html) and [d3](http://d3js.org)\n\nPlease tell me if I am doing something wrong.  I'd love to see more examples.  There are not many that I could find.", "created_at": "2016-01-27T03:20:40Z", "api": ["d3.select", "d3.range"], "updated_at": "2016-01-27T03:20:40Z", "description": "first experiment with mobservable + d3"}, {"readme": "This is a sample D3.js program\n\nforked from <a href='http://bl.ocks.org/yesoreyeram/'>yesoreyeram</a>'s block: <a href='http://bl.ocks.org/yesoreyeram/943bf2a1b274db9ce6e7'>Sample D3.js Program</a>", "created_at": "2016-02-15T09:13:49Z", "api": ["d3.select"], "updated_at": "2016-02-15T09:15:27Z", "description": "Sample D3.js Program"}, {"readme": "\u30c9\u30e9\u30c3\u30b0\u306b\u8ffd\u5f93\u3059\u308b\u30b5\u30fc\u30af\u30eb\u7fa4", "created_at": "2015-08-31T06:01:27Z", "api": ["d3.select", "d3.range", "d3.behavior.drag"], "updated_at": "2015-08-31T06:07:23Z", "description": "D3 drag behavior example"}, {"readme": "", "created_at": "2015-08-27T16:30:21Z", "api": ["d3.time.format", "d3.csv", "d3.select", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.area", "d3.svg.line", "d3.extent", "d3.max"], "updated_at": "2015-08-27T16:38:46Z", "description": "Test Reusable D3"}, {"readme": "Calendar heatmap adapted into a reusable chart for quick testing\n\n> loading of ~~CSV~~ json data, which is then quantized into a diverging color scale. The values are visualized as coloured cells per day. Days are arranged into columns by week, then grouped by month and years. \n\n[source](http://bl.ocks.org/mbostock/4063318)\n", "created_at": "2015-12-08T18:10:09Z", "api": ["d3.dispatch", "d3.scale.linear", "d3.range", "d3.min", "d3.time.format", "d3.select", "d3.time.days", "d3.time.months", "d3.extent", "d3.values", "d3.rebind", "d3.eesur.heatmap", "d3.json", "d3.nest", "d3.sum"], "updated_at": "2015-12-08T18:10:12Z", "description": "d3 | reusable heatmap calendar"}, {"readme": "", "created_at": "2012-05-23T00:43:50Z", "api": ["d3.xml", "d3.select"], "updated_at": "2015-10-26T13:45:34Z", "description": "D3.xml Example"}, {"readme": "Google Map with several D3 generated layers:\n\n* Graticule\n* Countries\n* US Counties\n* GeoHash\n* Pins\n* Graph\n* Heat\n\n[GitHub](https://github.com/hpcc-systems/Visualization) \n\n[Test Page](http://rawgit.com/hpcc-systems/Visualization/v1.10.0-rc2/demos/dermatology.html) \n", "created_at": "2015-12-29T20:52:00Z", "api": [], "updated_at": "2015-12-31T15:43:08Z", "description": "Google Map + D3 Generated Layers"}, {"readme": "", "created_at": "2015-09-11T18:26:16Z", "api": ["d3.time.format", "d3.select", "d3.time.scale", "d3.scale.linear", "d3.scale.ordinal", "d3.svg.axis", "d3.layout.stack", "d3.nest", "d3.svg.area", "d3.csv", "d3.extent", "d3.max", "d3.mouse"], "updated_at": "2015-09-11T18:43:33Z", "description": "D3 Interactive Streamgraph"}, {"readme": "First try using http://blockbuilder.org, pretty sweet!\n\n\n\n\n\n\n\n\n\n\n", "created_at": "2015-09-16T21:54:00Z", "api": ["d3.select"], "updated_at": "2015-09-16T21:57:06Z", "description": "hello-d3-block-builder"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/4cfe56d4dfbf9001c5620ca384ec9426'>fresh block</a>\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/18bfab55bf5c8def68af6b71a9651d75'>fresh block</a>", "created_at": "2016-05-13T21:18:47Z", "api": ["d3.select", "d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie"], "updated_at": "2016-05-13T21:18:47Z", "description": "fresh block"}, {"readme": "", "created_at": "2012-08-16T19:47:53Z", "api": ["d3.min", "d3.max", "d3.select", "d3.scale.linear", "d3.svg.line.radial"], "updated_at": "2015-10-08T18:38:41Z", "description": "Simple d3 Radar Chart"}, {"readme": "", "created_at": "2015-04-27T14:44:01Z", "api": ["d3.scale.linear", "d3.svg.axis", "d3.select", "d3.csv", "d3.min", "d3.max", "d3.ascending"], "updated_at": "2015-08-29T14:20:01Z", "description": "D3 week 5"}, {"readme": "Workaround for issue described in [this example](http://bl.ocks.org/explunit/ab8cf15534f7fec5ac6d), uses Lodash `cloneDeep` to make each chart have it's own copy of the data.", "created_at": "2014-06-30T22:11:01Z", "api": ["d3.json", "d3.scale.category20c", "d3.scale.linear", "d3.select", "d3.layout.partition", "d3.svg.arc"], "updated_at": "2015-08-29T14:03:17Z", "description": "d3.layout.partition workaround"}, {"readme": "", "created_at": "2014-04-02T07:52:45Z", "api": ["d3.select"], "updated_at": "2016-04-27T08:32:29Z", "description": "D3.js Easing Checker"}, {"readme": "", "created_at": "2014-08-16T01:45:00Z", "api": ["d3.select", "d3.json", "d3.geo.transform", "d3.geo.path"], "updated_at": "2015-08-29T14:05:22Z", "description": "Leaflet + D3 test"}, {"readme": "hacky web audio api + d3.\n\n#### instructions\n\nallow mic access, talk at computer.\n\n[view here](http://bl.ocks.org/miketahani/bbbbc9c4f4ba5d9cfc53)", "created_at": "2015-11-02T18:32:30Z", "api": ["d3.select", "d3.scale.linear"], "updated_at": "2015-11-09T23:54:55Z", "description": "d3.unconf ticket"}, {"readme": "", "created_at": "2014-01-22T16:00:27Z", "api": ["d3.scale.linear", "d3.max", "d3.svg.axis", "d3.select"], "updated_at": "2016-01-04T03:19:15Z", "description": "D3.js visible text"}, {"readme": "Implements constrained zooming of an image constructed from a data-driven\nImageData object placed onto an HTML5 Canvas. Borrows heavily from \nhttps://gist.github.com/mbostock/3074470.", "created_at": "2013-12-20T02:14:34Z", "api": ["d3.scale.linear", "d3.svg.axis", "d3.behavior.zoom", "d3.select", "d3.json", "d3.rgb"], "updated_at": "2015-12-31T21:49:16Z", "description": "D3 Zoomable ImageData"}, {"readme": "", "created_at": "2015-03-29T15:08:56Z", "api": ["d3.csv"], "updated_at": "2015-08-29T14:17:58Z", "description": "Knight D3 Module 2"}, {"readme": "Implements multiple, stacked plots with brushing. This extends the example at \nhttp://bl.ocks.org/mbostock/1667367 and allows for multiple panels where each\nsubsequent panel zooms from the previous. Data points are also smoothed, permitting\ndata with over 100,000 points to have an overview with subsequent telescoping while\nmaintaining context.", "created_at": "2014-12-22T23:59:01Z", "api": ["d3.select", "d3.scale.linear", "d3.svg.axis", "d3.svg.brush", "d3.svg.area", "d3.max", "d3.min"], "updated_at": "2015-08-29T14:11:59Z", "description": "D3 Stacked Brush Plots"}, {"readme": "", "created_at": "2015-02-11T17:45:45Z", "api": ["d3.random.normal", "d3.select", "d3.range", "d3.layout.force", "d3.timer", "d3.behavior.drag", "d3.mouse"], "updated_at": "2015-08-29T14:15:15Z", "description": "WebGL + d3.layout.force"}, {"readme": "", "created_at": "2013-03-13T07:57:16Z", "api": ["d3.phylogram.build", "d3.phylogram.buildRadial", "d3.phylogram.rightAngleDiagonal", "d3.phylogram.radialRightAngleDiagonal", "d3.phylogram.coordinateToAngle", "d3.scale.linear", "d3.max", "d3.select", "d3.layout.cluster", "d3.phylogram.styleTreeNodes", "d3.layout.tree"], "updated_at": "2015-12-14T21:19:02Z", "description": "d3.phylogram.js, stackoverflow answer"}, {"readme": "### ?:\n\nJust playing with random shapes and data\n\n----------\n\n", "created_at": "2014-11-08T12:39:10Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:08:57Z", "description": "d3 | random shapes"}, {"readme": "", "created_at": "2015-11-07T06:21:34Z", "api": ["d3.select"], "updated_at": "2015-11-08T18:44:29Z", "description": "D3 Challenges (WIP)"}, {"readme": "## d3.legend \n\nd3.legend is a quick hack to add a legend to a `d3` chart.  Simply add a `g` and `.call(d3.legend)`.  Any elements that have a title set in the `\"data-legend\"` attribute will be included when `d3.legend` is called.  Each title will appear only once (even when multiple items define the same data-legend) as the process uses a set based on a existing names, not an array of all items.\n\n### Color\nBy default the color in the legend will try to match the fill attribute or the stroke attribute of the relevant items.  Color can be explicitly defined by attribute `\"data-legend-color\"`\n\n### Order\nThe order of items in the legend will be sorted using the top of the bounding box for each included item.  The order can be explicitly defined by attribute `\"data-legend-pos\"`\n\n### Padding\nPadding will be determined by attribute `\"data-style-padding\"` on the legend element.\nDefaults to  5.\n\n### Size\nSize of the box is determined by font size, as items are placed using `\"em\"` and the frame around the items is based on the bounding box.\n\n### This Example\nThis example takes an existing Gist and adds a legend by defining data-legend for each series and calling `d3.legend` on a `\"g\"` element.   To show the font-adjustment I change font-size after one second and call `d3.legend` again.\n\n\n## d3.legend \n\nd3.legend is a quick hack to add a legend to a `d3.graph`.  Simply add a `g` and `.call(d3.legend)`.  Any elements that has a title set in the `\"data-legend\"` attribute set will be included, when `d3.legend` is called.  Each title  will appear only once as the process uses a set based on a existing names, not an array of all items.\n\n### Color\nBy default the color in the legend will try to match the fill attribute or the stroke attribute of the relevant items.  Color can be explicitly defined by attribute `\"data-legend-color\"`\n\n### Order\nThe order of items in the legend will be sorted using the top of the bounding box for each included item.  The order can be explicitly defined by attribute `\"data-legend-pos\"`\n\n### Padding\nPadding will be determined by attribute `\"data-style-padding\"` on the legend element.\nDefaults to  5.\n\n### Size\nSize of the box is determined by font size, as items are placed using `\"em\"` and the frame around the items is based on the bounding box.\n\n### This Example\nThis example takes an existing Gist and adds a legend by defining data-legend for each series:\n```\n .attr(\"data-legend\",function(d) { return d.name})\n```\n\nAdding the legend is as simple as:\n```javascript\nlegend = svg.append(\"g\")\n  .attr(\"class\",\"legend\")\n  .attr(\"transform\",\"translate(50,30)\")\n  .style(\"font-size\",\"12px\")\n  .call(d3.legend)\n```\n\nTo show the font-adjustment I change font-size after one second and call `d3.legend` again.\n\n##Comments on the original gist\nThis line chart is constructed from a TSV file storing the daily average temperatures of New York, San Francisco and Austin over the last year. The chart employs [conventional margins](http://bl.ocks.org/3019563) and a number of D3 features:\n\n* [d3.tsv](https://github.com/mbostock/d3/wiki/CSV) - load and parse data\n* [d3.time.format](https://github.com/mbostock/d3/wiki/Time-Formatting) - parse dates\n* [d3.time.scale](https://github.com/mbostock/d3/wiki/Time-Scales) - *x*-position encoding\n* [d3.scale.linear](https://github.com/mbostock/d3/wiki/Quantitative-Scales) - *y*-position encoding\n* [d3.scale.category10](https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-category10), a [d3.scale.ordinal](https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-ordinal) - color encoding\n* [d3.extent](https://github.com/mbostock/d3/wiki/Arrays#wiki-d3_extent), [d3.min](https://github.com/mbostock/d3/wiki/Arrays#wiki-d3_min) and [d3.max](https://github.com/mbostock/d3/wiki/Arrays#wiki-d3_max) - compute domains\n* [d3.keys](https://github.com/mbostock/d3/wiki/Arrays#wiki-d3_keys) - compute column names\n* [d3.svg.axis](https://github.com/mbostock/d3/wiki/SVG-Axes) - display axes\n* [d3.svg.line](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-line) - display line shape", "created_at": "2012-10-19T13:59:56Z", "api": ["d3.select", "d3.entries", "d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.scale.category10", "d3.svg.axis", "d3.svg.line", "d3.tsv", "d3.keys", "d3.extent", "d3.min", "d3.max"], "updated_at": "2016-05-20T00:21:41Z", "description": "d3.legend example"}, {"readme": "", "created_at": "2013-02-08T16:00:34Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.geo.graticule", "d3.select", "d3.json", "d3.selectAll"], "updated_at": "2015-12-12T07:49:04Z", "description": "D3 Morphing Map Projections"}, {"readme": "I agree with Whitman: \u201cI exist as I am, that is enough\" \n\nThe rest is additional :)", "created_at": "2014-12-10T16:40:45Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:11:08Z", "description": "d3 | I am"}, {"readme": "## D3 Dynamic Array of Tables\n\nDemonstrates the the use of D3 to manage an array of tables. Via a button, the user will cycle through several steps which will mutate the underlying array of arrays, which at each step is fed to the table **update** function. For example, tables are added and removed from the array of tables, individual rows of tables are added and removed, and individual table cells are modified. The **update** function demonstrates the enter, exit and update patterns at the div/table level as well as at the table row level. \n\nFor **bl.ocks.org** users, the script should be viewed in its own window. See the script in action [here](http://bl.ocks.org/boeric/raw/e16ad218bc241dfd2d6e/)", "created_at": "2015-09-26T17:09:49Z", "api": ["d3.select", "d3.values"], "updated_at": "2016-05-18T15:27:40Z", "description": "D3 Dynamic Array of Tables"}, {"readme": "Various **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** modes with Stamen tiles from [http://maps.stamen.com/#toner/12/37.7706/-122.3782](http://maps.stamen.com/#toner/12/37.7706/-122.3782).\n\nClick the button to cycle through map modes to see the difference between Transform, Projection and Globe modes.", "created_at": "2014-07-27T02:43:46Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.carto.layer.csv", "d3.carto.layer.featureArray"], "updated_at": "2015-08-29T14:04:35Z", "description": "Stamen Tiles - d3.carto.map"}, {"readme": "Animation with D3 and SVG. Runs with 18 \u2013 20 FPS on a Retina MBP 13\".\n\nAlso with [Canvas](http://bl.ocks.org/herrstucki/dc5be7c1d700eb6ecf46) and [React](http://bl.ocks.org/herrstucki/40a7be58639daf5d510e).", "created_at": "2015-01-14T09:27:52Z", "api": ["d3.scale.ordinal", "d3.range", "d3.layout.grid", "d3.scale.linear", "d3.select", "d3.timer"], "updated_at": "2015-08-29T14:13:26Z", "description": "Animating Circles (D3 & SVG)"}, {"readme": "Without modifying the information in genes.json, use D3 to construct a pie chart that shows the relative fraction of genes in the forward and reverse directions. Your code must dynamically generate the pie chart from the data. In other words, if I modify the genes.json data file, the pie chart must update automatically. (15 points)\n\nforked from <a href='http://bl.ocks.org/scresawn/'>scresawn</a>'s block: <a href='http://bl.ocks.org/scresawn/53fe9d373ca3b3e20632f69c5169a59d'>final exam question 2</a>", "created_at": "2016-05-05T13:31:50Z", "api": ["d3.scale.category20b", "d3.select", "d3.svg.arc", "d3.layout.pie"], "updated_at": "2016-05-05T13:56:29Z", "description": "junk "}, {"readme": "Starte from http://bl.ocks.org/rveciana/2986e55a01c7008d4b5b\n\nStarted from http://bl.ocks.org/rveciana/2986e55a01c7008d4b5b\n\n\nThis an example using the [D3 trail layout](https://github.com/bmschmidt/D3-trail) made by [Benjamin Schmidt](https://github.com/bmschmidt).\nIn this case, the animated Hayian Typhoon track map is shown, with the colour changing with the typhoon class, as in [this example](http://bl.ocks.org/rveciana/10743959), but in an easier and cleaner way.\n\nThere is a blog entry explaining this example at [GeoExamples](http://geoexamples.blogspot.com/2014/07/using-d3-trail-layout-to-draw-hayian.html)\n\nforked from <a href='http://bl.ocks.org/rveciana/'>rveciana</a>'s block: <a href='http://bl.ocks.org/rveciana/2986e55a01c7008d4b5b'>D3 Trail Layout</a>", "created_at": "2015-12-13T16:24:29Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.json", "d3.scale.quantile", "d3.select", "d3.layout.trail"], "updated_at": "2015-12-13T16:25:57Z", "description": "D3 Trail Layout"}, {"readme": "", "created_at": "2012-05-11T06:05:12Z", "api": ["d3.format", "d3.max", "d3.scale.pow", "d3.scale.log", "d3.scale.linear", "d3.svg.axis", "d3.time.scale", "d3.select", "d3.svg.line"], "updated_at": "2016-01-03T15:12:49Z", "description": "Interactive Line Graph (D3)"}, {"readme": "Loading data into a [crossfilter](http://square.github.com/crossfilter/) and with [d3.csv](https://github.com/mbostock/d3/wiki/CSV) and displaying a few [Top-K lists](https://github.com/square/crossfilter/wiki/API-Reference#wiki-dimension_top)\n\nData derived from the [USDA National Nutrient Database](http://www.ars.usda.gov/Services/docs.htm?docid=8964).\n\nforked from <a href='http://bl.ocks.org/syntagmatic/'>syntagmatic</a>'s block: <a href='http://bl.ocks.org/syntagmatic/5123745'>Crossfilter with d3.csv</a>", "created_at": "2015-09-08T07:42:50Z", "api": ["d3.csv", "d3.select"], "updated_at": "2015-09-08T07:42:50Z", "description": "Crossfilter with d3.csv"}, {"readme": "This file shows how to use the *conicConformalPortugal* projection from [d3-composite-projections](http://rveciana.github.io/d3-composite-projections/). The example is the same as [the one at this block](http://bl.ocks.org/rveciana/b62832e7b32f9afc779c), but with this new composite projection gives a much better result.", "created_at": "2015-05-11T15:23:13Z", "api": ["d3.geo.conicConformalSpain", "d3.geo.path", "d3.select", "d3.json"], "updated_at": "2016-03-01T10:57:43Z", "description": "d3-composite-projections conicConformalSpain"}, {"readme": "Without modifying the information in genes.json, use D3 to construct a pie chart that shows the relative fraction of genes in the forward and reverse directions. Your code must dynamically generate the pie chart from the data. In other words, if I modify the genes.json data file, the pie chart must update automatically. (15 points)\n\nforked from <a href='http://bl.ocks.org/scresawn/'>scresawn</a>'s block: <a href='http://bl.ocks.org/scresawn/53fe9d373ca3b3e20632f69c5169a59d'>final exam question 2</a>\n\nforked from <a href='http://bl.ocks.org/cheneymb/'>cheneymb</a>'s block: <a href='http://bl.ocks.org/cheneymb/5a49289b11fb8d3b19d2cebad37bc8b4'>final exam question 2</a>", "created_at": "2016-05-05T13:45:44Z", "api": ["d3.svg.arc", "d3.layout.pie", "d3.select", "d3.json"], "updated_at": "2016-05-05T14:11:17Z", "description": "final exam question 2"}, {"readme": "This D3 example demonstrates constrained zooming, much like \nhttp://bl.ocks.org/tommct/5671250, but also illustrates the use of hierarchical\nordinal tick marks. It does this by using the normalized values that one gets\nwhen using a hierarchical partition layout.\n", "created_at": "2013-12-31T02:02:03Z", "api": ["d3.scale.linear", "d3.svg.axis", "d3.layout.partition", "d3.json", "d3.behavior.zoom", "d3.scale.ordinal", "d3.select", "d3.mouse", "d3.event.stopPropagation"], "updated_at": "2016-01-01T19:38:58Z", "description": "D3 Hierarchical Ordinal Ticks"}, {"readme": "This example shows how to make several SVG elements link to different things by constructing URLs from data properties. Each square links to a different Wikipedia page, and the link URL is generated dynamically from the data array.\n\nThis has the expected behavior of normal links when you [open it in a new window](http://bl.ocks.org/curran/raw/88d03aa54097367eaae1/). Clicking the rectangle doesn't work correctly in the bl.ocks viewer, because it is in an iFrame (open the debugging console to see the iFrame-related error), but this technique of adding links to visual marks should work fine in your own D3 projects.\n\nThis is addressing the thread [Hyperlinks - error \"undefined\"/ NaN](https://groups.google.com/forum/#!topic/d3-js/ZmbF354QFds) in the D3 Google Group.\n", "created_at": "2015-05-28T00:28:16Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:22:01Z", "description": "D3 Links Example"}, {"readme": "This map shows the approximate location of the cities in which the games of the 2014 World Cup hosted by Brazil will be played.\n\nTo see the name of the city click on one of the icons on the map.\n\nThe map data is all from Natural Earth and the icons from the Noun Project.\n\nIt was made with the intent of showing and learning how to do a few different simple geo d3.js things I couldn't find good examples of like:\n\n  -adding icons in png and svg.\n  -adding another geojon layer on my topojson jam.\n  -Some other stuff I can't think of.. let me know if it helped you in some way\n\nAdd some attribution for noun project icons.\n\nCreative Commons \u2013 Attribution (CC BY 3.0)\n\nSoccer Ball designed by Hernan D. Schlosman from the Noun Project\n\nWorld Cup trophy by Iain Hector from The Noun Project\n\nhttp://thenounproject.com/term/trophy/51440/\n\nhttp://thenounproject.com/term/soccer-ball/10684/ Designed by Mark Wehrhahn also might have been used\n\nhttp://creativecommons.org/licenses/by/3.0/us/legalcode\n", "created_at": "2014-06-12T19:12:17Z", "api": ["d3.geo.albers", "d3.geo.graticule", "d3.select", "d3.geo.path", "d3.json", "d3.selectAll"], "updated_at": "2015-08-29T14:02:31Z", "description": "World Cup Game Towns d3"}, {"readme": "A simple clock made with D3.\n\nAfter I'd made it I got a bit caught up in trying to make it look like Dieter Ram's Braun clock face adding a whole bunch fo extra stuff...\n\nIt's still not quite there.", "created_at": "2013-09-07T13:44:21Z", "api": ["d3.scale.linear", "d3.select", "d3.range"], "updated_at": "2015-12-22T12:58:53Z", "description": "Simple D3 clock"}, {"readme": "The Voronoi tesselation shows the closest point on the plane for a given set of points. This example updates the Voronoi diagram in response to mouse interaction! Colors by [Cynthia Brewer](http://colorbrewer.org/); algorithm by [Steven Fortune](http://ect.bell-labs.com/who/sjf/); implementation based on work by [Nicolas Garcia Belmonte](http://blog.thejit.org/2010/02/12/voronoi-tessellation/); interaction inspired by [Raymond Hill](http://www.raymondhill.net/blog/?p=9).\n\nThis example shows what voronoi tesselations look like drawn with various [d3 line interpolators](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-line_interpolate).", "created_at": "2013-12-20T19:04:22Z", "api": ["d3.range", "d3.geom.voronoi", "d3.select", "d3.mouse", "d3.svg.line", "d3.touches"], "updated_at": "2016-04-22T17:24:20Z", "description": "d3 voronoi interpolation!"}, {"readme": "Derived from the skew demo - http://calroc.github.com/aum-gravity/, made available in the aum-gravity github project - https://github.com/calroc/aum-gravity. The layout functionality was isolated and moved to separate files that are written as d3.layout plugins.\n\nInteractive version on bl.ocks - http://bl.ocks.org/4547392", "created_at": "2013-01-16T14:20:52Z", "api": ["d3.scale.linear", "d3.layout.line", "d3.layout.circle", "d3.layout.triangle", "d3.layout.randomspread", "d3.range", "d3.hsl", "d3.select"], "updated_at": "2015-12-11T04:48:49Z", "description": "D3 for layout management"}, {"readme": "This ranged bar chart uses D3 to  visualize the price range.\nIn the dataset Car&Vehicle will have a cost range from 55$ to 190$ \nTelevision & Video will have a cost range from 75$ to 190$  so on.\nFor demo check [here](http://bl.ocks.org/cyrilcherian/f6b8b9feb37fe51de3e7)", "created_at": "2015-12-05T08:25:24Z", "api": ["d3.range", "d3.scale.linear", "d3.scale.quantize", "d3.select", "d3.svg.axis"], "updated_at": "2015-12-08T08:41:03Z", "description": "D3 Ranged Bar Chart"}, {"readme": "This D3 example demonstrates using the *zoom* event and limits the bounds of the zooming\nto a specified domain. It is largely based on http://bl.ocks.org/jasondavies/3689931,\nbut with bounds. Most of this bounding is done in the *refresh* function. You need to zoom in before you can pan or zoom out.", "created_at": "2013-05-29T15:37:19Z", "api": ["d3.scale.linear", "d3.svg.axis", "d3.behavior.zoom", "d3.select", "d3.mouse", "d3.event.stopPropagation"], "updated_at": "2016-04-13T19:22:54Z", "description": "D3 Bounded Zoom"}, {"readme": "Quadtree-based feature clustering in **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nThis is an early example of how using the quadtrees generated with each layer could also be used with feature layers. This allows you to dynamically aggregate features based on zoom. Polygons are colored by their shared grouping at different zoom levels. This version uses centroids--the final version will likely either use bounding box solely or give the option for both.\n\nSee also [simple point clustering](http://bl.ocks.org/emeeks/7d5925cb7d9721c60360) and [more advanced point clustering that leverages circle-packing](http://bl.ocks.org/emeeks/540b1b884b80b14a44c6).\n\nThis also uses a [custom formatter](http://bl.ocks.org/emeeks/905bb4f399e0855e08fe) for the infoboxes to give you the name of an unclustered feature and the number of features in a clustered region.", "created_at": "2014-09-12T01:21:37Z", "api": ["d3.carto.map", "d3.select", "d3.carto.modal", "d3.carto.layer.geojson", "d3.scale.category20b", "d3.rgb"], "updated_at": "2015-08-29T14:06:21Z", "description": "Feature Clustering - d3.carto"}, {"readme": "Avoid restarting running transitions by either starting one just on the `.enter()` selection or by using `selection.filter()` to only select elements which are not in transit yet.\n\nAlternative implementations combining D3 with [React](http://bl.ocks.org/herrstucki/9205257) and [React TransitionGroup](http://bl.ocks.org/herrstucki/9205264).", "created_at": "2014-02-25T08:48:37Z", "api": ["d3.scale.linear", "d3.scale.sqrt", "d3.select"], "updated_at": "2015-08-29T13:56:43Z", "description": "Transitions with D3"}, {"readme": "Here is a demonstration of integrating d3 and x3dom to create a 3d bar plot of dynamic data. This example demonstrates the power of the d3 approach -- using x3dom for 3d visualization is just as concise and conceptually simple as using svg for 2d graphics.\n\nUse your mouse to change the viewing angle, pan, and zoom.\n\nNotes\n-----\nFiguring out the correct viewport position and orientation was challenging and involved a lot of matrix math. See the wikipedia page for rotation matrices for hints.\n\n\nLinks\n-----\n\n * Live demo of this file: http://bl.ocks.org/camio/5087116\n * X3D Reference: http://www.web3d.org/files/specifications/19775-1/V3.3/index.html\n * x3dom site: http://www.x3dom.org/\n\nAuthors\n-------\nDavid Sankel & Harry Voorhees\nStellar Science\n", "created_at": "2013-03-05T00:53:07Z", "api": ["d3.range", "d3.select"], "updated_at": "2015-12-14T12:29:05Z", "description": "d3 with x3dom Demo"}, {"readme": "", "created_at": "2014-07-27T21:06:18Z", "api": ["d3.dispatch", "d3.behavior.zoom", "d3.mouse", "d3.rebind", "d3.json", "d3.geo.orthographic", "d3.geo.albers", "d3.geo.mercator", "d3.geo.path", "d3.select", "d3.geo.graticule", "d3.geo.zoom", "d3.event.sourceEvent.preventDefault", "d3.selectAll"], "updated_at": "2015-08-29T14:04:36Z", "description": "d3.geo.zoom.js plugin first use"}, {"readme": "Perform keyboard combinations binding using Keith Cirkel's [jwerty](jwerty) in D3.js.\n\nIn this gist, use arrow keys to translate and `\u21e7+\u2191` (Shift + arrow-up) / `\u21e7+\u2193` (Shift + arrow-down) to rotate counterclockwise/clockwise.\n\nInspired by Tom MacWright's [gist](http://bl.ocks.org/tmcw/4444952) and Ian Johnson's [waves](http://bl.ocks.org/enjalot/1457934).\n\n[jwerty]: http://keithcirkel.co.uk/jwerty/ \"jwerty\"", "created_at": "2014-05-11T13:31:36Z", "api": ["d3.select", "d3.svg.line", "d3.timer"], "updated_at": "2015-11-08T12:56:52Z", "description": "D3 keybinding with jwerty"}, {"readme": "## D3 Key Function Demo\nThe script demonstrates the use of a key function when binding data to a D3 selection. The user will cycle through a sequence of steps that will mutate a data structure. For each step, <label> elements in the DOM will be updated accordingly. Red items are elements created initially, whereas black elements are added subsequently. The user can toggle the key function on or off at each step (and thereby switch between the default \"by index\" access and \"by key\" access). The user can also force a reordering of the DOM elements to match the selection order.\n\nA div on the right shows the **current content** of the data structure. A div at the bottom shows the **source code** that is about to be executed (using a bit of code introspection). \n\nFor **bl.ocks.org** users, the script should be viewed in its own window. See the script in action [here](http://bl.ocks.org/boeric/raw/8b34abda1d33b983b09b/)", "created_at": "2015-09-26T18:41:07Z", "api": ["d3.select", "d3.selectAll"], "updated_at": "2015-09-27T00:18:25Z", "description": "D3 Key Function Demo"}, {"readme": "This example belongs to [the presentation](rveciana.github.com/geoexamples/geoinquiets/d3js/index_en.html) made to the [OSGeo](http://www.osgeo.org/) local group in Barcelona [Geoinquiets](http://www.geoinquiets.cat/)\nThe example is an adaptation from [Mike Bostock](http://bost.ocks.org/mike/)'s [Symbol Map example](http://bl.ocks.org/mbostock/4342045)", "created_at": "2013-03-17T11:12:35Z", "api": ["d3.scale.sqrt", "d3.geo.mercator", "d3.geo.path", "d3.select", "d3.helper.tooltip", "d3.geo.albers", "d3.mouse"], "updated_at": "2015-12-15T01:39:02Z", "description": "D3 tutorial V: Adding tooltips"}, {"readme": "This is a world map in Albers projection w/ the center of the parallels at 11.5,-38 I think that means the cone like projection thing intersects the earth at these lats.  \n\nOne thing I couldn't figure out was how to fill the background of just the projected data blue.  Oh well I think I want to hightlight some of the cities where they'll be playing the world cup now....", "created_at": "2014-06-09T01:39:17Z", "api": ["d3.select", "d3.geo.albers", "d3.geo.graticule", "d3.geo.path", "d3.json", "d3.selectAll"], "updated_at": "2015-08-29T14:02:23Z", "description": "Albers for Brazil d3 Proj"}, {"readme": "As the name implies, the <a href=\"http://en.wikipedia.org/wiki/Universal_Transverse_Mercator\">Universal Transverse Mercator</a> (UTM) projection is based on the cylindrical <a href=\"http://en.wikipedia.org/wiki/Transverse_Mercator_projection\">Transverse Mercator</a> projection.\n\nThe UTM system divides the Earth between 80\u00b0S and 84\u00b0N latitude into 60 zones, each 6\u00b0 of longitude in width. The zones are numbered from 1 to 60 proceeding east from the anitmeridian (180\u00b0).\n\nThis rotating Transverse Mercator projection shows the 60 UTM zones around the Earth. The projection has constant scale along the changing central meridian, and regions near it are mapped with low distortion. Just like on the regular <a href=\"https://en.wikipedia.org/wiki/Mercator_projection\">Mercator projection</a>, areas further away from the central meridian are increasingly distorted. \n\nUTM is often used to show regions or countries with a greater north-south extent, like mainland Norway, which is usually depicted in UTM 33.\n\nMore information on <a href=\"http://blog.thematicmapping.org/2013/06/utm-zones-with-d3js.html\">thematic mapping blog</a>.\n\nBuilds on <a href=\"http://bl.ocks.org/mbostock/5731808\">http://bl.ocks.org/mbostock/5731808</a>", "created_at": "2013-06-26T12:02:37Z", "api": ["d3.scale.linear", "d3.geo.transverseMercator", "d3.geo.graticule", "d3.select", "d3.geo.path", "d3.json", "d3.timer"], "updated_at": "2016-04-14T13:11:04Z", "description": "UTM zones with D3.js"}, {"readme": "**Mouseover to draw circles!**\n\nThis is a quick proof-of-concept example demonstrating how to create a [canvas](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html) scenegraph in the DOM using custom namespaced elements. The scenegraph in this example consists of a simple container `sketch` element and a number of child `circle` elements:\n\n<pre>&lt;custom:sketch width=\"960\" height=\"500\">\n  &lt;custom:circle x=\"300\" y=\"400\" r=\"128\" strokeStyle=\"red\"/>\n  &lt;custom:circle x=\"302\" y=\"404\" r=\"129\" strokeStyle=\"red\"/>\n  \u2026\n&lt;/custom:sketch></pre>\n\nThe browser ignores these elements because they exist in our \"custom\" namespace. To render them, we use a timer that iterates over the child elements and draws them to a canvas element.\n\nWhy do this? Well, if you wanted your own *custom representation* tailored to a specific application or domain, you can! This example demonstrates how to use the DOM to implement your own element hierarchy and render it to canvas. If you're designing a *general-purpose* graphical representation, though, I recommend using [SVG](http://www.w3.org/TR/SVG/) instead. For comparison, see the original [OMG Particles!](http://bl.ocks.org/1062544) example.\n\nImplementation note: I'd prefer to use [DOM Mutation Events](http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mutationevents) to listen for changes to our custom elements, but browsers seem a bit sluggish in reporting them, particularly when elements are removed. If you have a slow-moving scene, you could probably get away with using mutation events rather than a timer that runs continuously. Alternatively, you could improve this example by stopping the timer after extended periods of activity.", "created_at": "2011-10-10T20:41:57Z", "api": ["d3.select", "d3.timer"], "updated_at": "2016-02-09T00:35:25Z", "description": "DOM-to-Canvas using D3"}, {"readme": "", "created_at": "2014-01-22T23:55:57Z", "api": ["d3.time.scale", "d3.svg.axis", "d3.select", "d3.time.format"], "updated_at": "2016-01-04T04:39:19Z", "description": "D3 time axis tick trouble"}, {"readme": "Estimated vs Actual CPU usage.", "created_at": "2013-10-31T14:59:27Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv"], "updated_at": "2015-12-27T02:19:03Z", "description": ""}, {"readme": "", "created_at": "2014-01-22T15:56:24Z", "api": ["d3.scale.linear", "d3.max", "d3.svg.axis", "d3.select"], "updated_at": "2016-01-04T03:19:16Z", "description": "D3.js non visible text"}, {"readme": "", "created_at": "2014-11-19T12:41:07Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv"], "updated_at": "2015-08-29T14:09:55Z", "description": "2014-11-19-Michael-Pearlson-HW4(Part1)"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-04-06T17:50:47Z", "api": ["d3.scale.category20", "d3.layout.force", "d3.json"], "updated_at": "2016-04-06T17:50:47Z", "description": "D3 Force Layout + Pixi.js Experiment"}, {"readme": "### Aim\nCreate and populate a html table form an array within an array (matrix)\n\n### Info and sources\nBased on [Nested Selections](http://bost.ocks.org/mike/nest/)", "created_at": "2014-04-02T16:34:27Z", "api": ["d3.select"], "updated_at": "2015-08-29T13:58:02Z", "description": "d3 | table data from matrix"}, {"readme": "A series of related examples:\n\n* [Canvas geometric zooming](http://bl.ocks.org/3680958)\n* [Canvas semantic zooming](http://bl.ocks.org/3681006)\n* **SVG geometric zooming**\n* [SVG semantic zooming](http://bl.ocks.org/3680957)\n", "created_at": "2015-02-20T08:18:24Z", "api": ["d3.random.normal", "d3.range", "d3.select", "d3.behavior.zoom"], "updated_at": "2015-08-29T14:15:48Z", "description": "D3 Zooming techniques"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-03-09T09:23:07Z", "api": ["d3.min", "d3.max", "d3.extent", "d3.sum", "d3.mean", "d3.median", "d3.quantile", "d3.bisect", "d3.bisectLeft", "d3.bisectRight", "d3.shuffle", "d3.set", "d3.keys", "d3.values", "d3.entries", "d3.map", "d3.range", "d3.permute", "d3.zip"], "updated_at": "2016-03-09T09:35:06Z", "description": "D3 Array Manipulation"}, {"readme": "", "created_at": "2013-09-21T03:11:35Z", "api": ["d3.select", "d3.json", "d3.geo.mercator", "d3.geo.path"], "updated_at": "2016-04-06T13:20:54Z", "description": "NYC Boroughs in d3"}, {"readme": "", "created_at": "2015-04-22T14:54:31Z", "api": ["d3.time.format", "d3.range", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.csv", "d3.map", "d3.max", "d3.select"], "updated_at": "2015-08-29T14:19:41Z", "description": "Knight D3 Module 6"}, {"readme": "", "created_at": "2015-05-07T21:09:38Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.min", "d3.max"], "updated_at": "2015-08-29T14:20:46Z", "description": "D3 week 6"}, {"readme": "Scott Murray Tutorial\n\nJerome Cukier's Tutorial", "created_at": "2016-02-05T02:01:28Z", "api": [], "updated_at": "2016-02-05T02:09:58Z", "description": "Week 4- D3 Tutorials"}, {"readme": "", "created_at": "2013-01-31T23:24:57Z", "api": ["d3.time.scale", "d3.select", "d3.svg.axis"], "updated_at": "2015-12-12T00:58:56Z", "description": "d3 minor lines 5"}, {"readme": "", "created_at": "2013-01-31T23:26:52Z", "api": ["d3.time.scale", "d3.select", "d3.svg.axis"], "updated_at": "2015-12-12T00:58:55Z", "description": "d3 minor lines 6"}, {"readme": "", "created_at": "2015-04-12T13:08:54Z", "api": ["d3.select", "d3.csv"], "updated_at": "2015-08-29T14:19:00Z", "description": "D3 week 3"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-01-15T23:02:28Z", "api": ["d3.select", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2016-01-15T23:05:53Z", "description": "piechart"}, {"readme": "", "created_at": "2012-07-13T18:19:41Z", "api": ["d3.time.scale", "d3.scale.linear", "d3.scale.category10", "d3.select", "d3.time.format", "d3.nest", "d3.min", "d3.max", "d3.scale.ordinal", "d3.svg.axis"], "updated_at": "2016-04-26T11:00:23Z", "description": "d3 Axys Integration"}, {"readme": "", "created_at": "2016-02-01T01:35:13Z", "api": ["d3.csv", "d3.scale.ordinal", "d3.scale.linear", "d3.max", "d3.svg.axis", "d3.select", "d3.svg.line"], "updated_at": "2016-02-01T01:37:13Z", "description": "d3 Pareto Chart Example"}, {"readme": "", "created_at": "2015-07-24T09:48:19Z", "api": ["d3.dispatch", "d3.format", "d3.scale.linear", "d3.select", "d3.behavior.drag", "d3.svg.axis", "d3.event.stopPropagation", "d3.interpolate", "d3.rebind", "d3.geo.albersUsa", "d3.geo.path", "d3.json", "d3.tsv", "d3.slider"], "updated_at": "2015-08-29T14:25:46Z", "description": "D3: Map Timeline"}, {"readme": "", "created_at": "2013-06-18T18:40:38Z", "api": ["d3.layout.treemap", "d3.select", "d3.scale.category20c", "d3.selectAll"], "updated_at": "2015-12-18T15:59:03Z", "description": "d3 meta-visualization"}, {"readme": "", "created_at": "2012-07-12T14:33:57Z", "api": ["d3.select", "d3.scale.linear", "d3.time.scale", "d3.svg.axis"], "updated_at": "2016-05-20T10:30:50Z", "description": "d3 rescale axis example"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-07T07:44:13Z", "api": ["d3.json", "d3.select"], "updated_at": "2015-12-07T07:48:34Z", "description": "MapboxGL & D3.js - point"}, {"readme": "", "created_at": "2015-05-03T00:10:31Z", "api": ["d3.format", "d3.select", "d3.csv"], "updated_at": "2015-08-29T14:20:24Z", "description": "multiple D3 charts"}, {"readme": "", "created_at": "2012-08-08T22:12:00Z", "api": ["d3.csv.parse", "d3.keys", "d3.select"], "updated_at": "2015-10-08T07:29:19Z", "description": "d3 CSV Upload"}, {"readme": "", "created_at": "2011-04-02T18:03:45Z", "api": ["d3.select", "d3.json", "d3.entries"], "updated_at": "2016-05-13T14:50:30Z", "description": "Google Maps + D3"}, {"readme": "Modified from the excellent example: https://gist.github.com/milroc/5522467", "created_at": "2013-12-04T16:58:34Z", "api": ["d3.dispatch", "d3.scale.ordinal", "d3.scale.linear", "d3.max", "d3.svg.axis", "d3.select", "d3.rebind", "d3.custom.barChart", "d3.range"], "updated_at": "2015-12-30T06:39:19Z", "description": "D3.js and Backbone"}, {"readme": "", "created_at": "2014-03-31T20:53:35Z", "api": ["d3.dispatch", "d3.scale.ordinal", "d3.scale.linear", "d3.max", "d3.svg.axis", "d3.select", "d3.rebind", "d3.custom.chart", "d3.range"], "updated_at": "2015-11-03T13:44:27Z", "description": "Backbone + reusable D3 charts"}, {"readme": "", "created_at": "2012-11-16T02:53:33Z", "api": ["d3.select", "d3.behavior.zoom", "d3.geo.albers", "d3.geo.path", "d3.simplify", "d3.json", "d3.scale.linear", "d3.svg.line", "d3.entries", "d3.values"], "updated_at": "2015-10-12T20:29:42Z", "description": "d3 topological simplification introspection"}, {"readme": "", "created_at": "2014-04-19T03:42:36Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:00:09Z", "description": "D3 Simple Example"}, {"readme": "", "created_at": "2014-11-19T08:18:29Z", "api": ["d3.layout.pie", "d3.svg.arc", "d3.select", "d3.ease", "d3.timer"], "updated_at": "2016-02-09T01:52:11Z", "description": "Arc Corners II"}, {"readme": "An example of multiple pie (donut) charts created with [D3](http://mbostock.github.com/d3/). The data is represented as a two-dimensional array of numbers; each row in the array is mapped to a pie chart. Thus, each pie represents the relative value of a number (such as 1,013) within its rows. Note that in this dataset, the totals for each row are not equal.\n", "created_at": "2011-10-21T22:11:27Z", "api": ["d3.scale.category20c", "d3.select", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2016-02-20T05:53:53Z", "description": "Pie Multiples"}, {"readme": "**Click play to animate.**\n\nMy quest to understand how transitions work under the hood, part 2: animating using [d3.interpolate](https://github.com/mbostock/d3/wiki/Transitions#interpolation) and [window.requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame).\n\nPart 2 here: [How D3 Transitions Work, Pt. 2: d3.interpolate with multiple elements](http://bl.ocks.org/sxywu/3a81930c054bb8ee39bf)", "created_at": "2015-08-14T07:18:27Z", "api": ["d3.select", "d3.interpolate"], "updated_at": "2015-08-29T14:27:22Z", "description": "How D3 Transitions Work, Pt. 1: d3.interpolate"}, {"readme": "Second demo of consuming Heroku DataClips with D3.js.\n\nData source: <https://dataclips.heroku.com/vgyygvzqtezwpmwpcmmjlluamjlk> (.json)", "created_at": "2013-06-05T20:04:11Z", "api": ["d3.time.format", "d3.layout.force", "d3.scale.category10", "d3.select", "d3.json"], "updated_at": "2015-12-18T03:18:56Z", "description": "DataClips + D3.js Force-Directed"}, {"readme": "D3.js pack layout with pie charts instead of circles\n\nIn response to: http://stackoverflow.com/questions/26830386/how-to-insert-pie-charts-in-pack-layout-in-d3-js", "created_at": "2014-11-09T18:39:50Z", "api": ["d3.scale.ordinal", "d3.layout.pack", "d3.sum", "d3.svg.arc", "d3.layout.pie", "d3.select"], "updated_at": "2015-08-29T14:09:04Z", "description": "D3.js pack layout with pie charts"}, {"readme": "An example of [d3.svg.ribbon](https://github.com/emeeks/d3.svg.ribbon) using Napoleon's March through Russia made famous by Minard's map. Dataset comes from Ben Schmidt's use of it in his excellent [d3.trail layout](https://github.com/bmschmidt/D3-trail).\n\nThe pattern for using d3.svg.ribbon with geodata is simply to factor the projection into the accessors:\n\n```\nprojection = d3.geo.equirectangular().translate([-3300,7800]).scale(8000);\nsizeScale = d3.scale.linear().domain([6000,340000]).range([1,10])\n\nribbon = d3.svg.ribbon()\n  .x(function(d) {return projection([d.lon, d.lat])[0]})\n  .y(function(d) {return projection([d.lon, d.lat])[1]})\n  .r(function(d) {return sizeScale(d.size)});\n```\n\nforked from <a href='http://bl.ocks.org/emeeks/'>emeeks</a>'s block: <a href='http://bl.ocks.org/emeeks/a0b5a95c999628547494'>Napoleon's March with d3.svg.ribbon</a>", "created_at": "2015-09-08T07:51:24Z", "api": ["d3.svg.line", "d3.scale.ordinal", "d3.geo.equirectangular", "d3.scale.linear", "d3.svg.ribbon", "d3.behavior.drag", "d3.nest", "d3.select"], "updated_at": "2015-09-08T07:51:24Z", "description": "Napoleon's March with d3.svg.ribbon"}, {"readme": "This is a simple d3.js tree diagram used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is derived from the Mike Bostock [Collapsible tree example](http://bl.ocks.org/mbostock/4339083) but it is a VERY cut down version without the ability to update (collapse).", "created_at": "2014-01-08T20:15:11Z", "api": ["d3.layout.tree", "d3.svg.diagonal", "d3.select"], "updated_at": "2016-01-02T15:29:09Z", "description": "Simple d3.js tree diagram"}, {"readme": "Example 3D scatter plot implemented using d3 and x3dom.", "created_at": "2013-07-12T17:25:08Z", "api": ["d3.select", "d3.scale.linear"], "updated_at": "2016-02-29T04:52:42Z", "description": "3D scatter plot using d3, x3dom"}, {"readme": "Canvas element styling with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** does not use d3.selectAll like [SVG element styling](http://bl.ocks.org/emeeks/f8c0220c54ec8347ea95) because these aren't SVG elements.\n\nThis relies on using cartoLayer.markerColor() and cartoLayer.markerSize() and setting them to function based on the data. If you don't set markerColor, then it will rely on CSS styling of the associated class.\n\n[This example is also available as a globe](http://bl.ocks.org/emeeks/aea3c7fc1acc0eca4d44).", "created_at": "2014-09-10T00:26:56Z", "api": ["d3.carto.map", "d3.scale.linear", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.carto.layer.csv"], "updated_at": "2015-08-29T14:06:16Z", "description": "Canvas Styling (Transform) - d3.carto"}, {"readme": "This an example using the [D3 trail layout](https://github.com/bmschmidt/D3-trail) made by [Benjamin Schmidt](https://github.com/bmschmidt).\nIn this case, the animated Hayian Typhoon track map is shown, with the colour changing with the typhoon class, as in [this example](http://bl.ocks.org/rveciana/10743959), but in an easier and cleaner way.\n\nThere is a blog entry explaining this example at [GeoExamples](http://geoexamples.blogspot.com/2014/07/using-d3-trail-layout-to-draw-hayian.html)", "created_at": "2014-07-07T18:22:08Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.json", "d3.scale.quantile", "d3.select", "d3.layout.trail"], "updated_at": "2015-08-29T14:03:37Z", "description": "D3 Trail Layout animated map"}, {"readme": "A demonstration of custom modal infoboxes from **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nIf you click on a site point (the pink circles) you'll see an infobox that reads something like \"Lugdunum Convenarum in modern day France\" whereas if you click on a country, you'll see an infobox that reads something like \"The country of Spain has a short name\".\n\nHow a modal handles the data in a datapoint for display is handled by defining a custom formatter for the modal, which requires that you create a new d3.carto.modal. The new modal is assigned to a d3.carto.layer using .modal() as shown in the example for the CSV Points and Feature Array layers.\n\nFormatters are defined using the standard D3 accessor syntax. The default formatter, demonstrated in the [basic modal example](http://bl.ocks.org/emeeks/433a9b04f82a1c78af4b). Since you know your data better than d3.carto does, you can specify how to parse what attributes in as specific a manner as you want. The function should return a string of HTML suitable to be dropped into the modal div.\n\nThe key lines for defining the modal and formatter are:\n```\n    csvModal = d3.carto.modal();\n    csvModal.formatter(\n      function(d) {return \"<h1>\" + d.label + \" in modern day \" + d.modern + \"</h1>\"}\n    )\n```\n\nand:\n```\n    featureModal = d3.carto.modal();\n    featureModal.formatter(\n      function(d) {return \"<p class='countryInfobox'>The country of \" + d.properties.name + \" has a short name</p>\"}\n    )\n```", "created_at": "2014-08-26T21:50:55Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.carto.layer.topojson", "d3.carto.modal", "d3.carto.layer.csv", "d3.carto.layer.featureArray"], "updated_at": "2015-08-29T14:05:45Z", "description": "Custom Infobox Formatter - d3.carto.map"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/dfm/'>dfm</a>'s block: <a href='http://bl.ocks.org/dfm/3914862'>XKCD-style plots in d3</a>", "created_at": "2016-05-06T15:10:02Z", "api": ["d3.range", "d3.scale.linear", "d3.select", "d3.svg.line", "d3.extent", "d3.interpolate", "d3.random.normal"], "updated_at": "2016-05-06T15:11:41Z", "description": "XKCD-style plots in d3"}, {"readme": "Circle-bound nodes in [d3.layout.force()](https://github.com/mbostock/d3/wiki/Force-Layout), using a variation of Mike Bostock's rectangular [Bounded Force Layout](http://bl.ocks.org/mbostock/1129492). Here we calculate the maximum and minimum `x` for a given `y` in the circle, and vice versa.", "created_at": "2013-07-14T05:51:40Z", "api": ["d3.select", "d3.range", "d3.layout.force"], "updated_at": "2015-12-19T17:39:18Z", "description": "Circle-bound D3 force layout"}, {"readme": "modified from [http://bl.ocks.org/mbostock/3795040](http://bl.ocks.org/mbostock/3795040)\nresponse to [this stack overflow question](http://stackoverflow.com/questions/25415885/d3-geo-spherical-arcs-rather-than-straight-lines-for-paralles)", "created_at": "2014-08-21T00:39:48Z", "api": ["d3.geo.orthographic", "d3.geo.path", "d3.geo.graticule", "d3.scale.linear", "d3.select", "d3.mouse", "d3.json"], "updated_at": "2015-08-29T14:05:29Z", "description": "Orthographic 'arc' using d3.graticule()"}, {"readme": "How to use [d3-tip](https://github.com/caged/d3-tip) with d3's [simple bar chart example](http://bl.ocks.org/mbostock/3885304).\n\n\nforked from <a href='http://bl.ocks.org/Caged/'>Caged</a>'s block: <a href='http://bl.ocks.org/Caged/6476579'>Using d3-tip to add tooltips to a d3 bar chart</a>\n\nforked from <a href='http://bl.ocks.org/wcjohnson11/'>wcjohnson11</a>'s block: <a href='http://bl.ocks.org/wcjohnson11/04feb3139aa6a857d67f756afa6abda1'>Using d3-tip to add tooltips to a d3 bar chart</a>\n\nforked from <a href='http://bl.ocks.org/aax951/'>aax951</a>'s block: <a href='http://bl.ocks.org/aax951/d7a90cc03d3e1bddffa5569cae11490d'>Using d3-tip to add tool</a>\n\nforked from <a href='http://bl.ocks.org/aax951/'>aax951</a>'s block: <a href='http://bl.ocks.org/aax951/40d4e8f220b5dfe0e6339b5a37d687bc'>Using d3-tip to add tool</a>", "created_at": "2016-04-18T12:24:03Z", "api": ["d3.select", "d3.format", "d3.scale.ordinal", "d3.scale.linear", "d3.svg.axis", "d3.tip", "d3.tsv", "d3.max"], "updated_at": "2016-04-18T12:24:03Z", "description": "Using d3-tip to add tool"}, {"readme": "## D3 Dynamic Array of Tables\n\nDemonstrates the the use of D3 to manage an array of tables. Via a button, the user will cycle through several steps which will mutate the underlying array of arrays, which at each step is fed to the table **update** function. For example, tables are added and removed from the array of tables, individual rows of tables are added and removed, and individual table cells are modified. The **update** function demonstrates the enter, exit and update patterns at the div/table level as well as at the table row level. \n\nFor **bl.ocks.org** users, the script should be viewed in its own window. See the script in action [here](http://bl.ocks.org/boeric/raw/e16ad218bc241dfd2d6e/)\n\nforked from <a href='http://bl.ocks.org/boeric/'>boeric</a>'s block: <a href='http://bl.ocks.org/boeric/e16ad218bc241dfd2d6e'>D3 Dynamic Array of Tables</a>", "created_at": "2016-04-26T15:31:23Z", "api": ["d3.select", "d3.values"], "updated_at": "2016-04-26T15:45:41Z", "description": "D3 Dynamic Array of Tables"}, {"readme": "Force layout test/experiment with images\n\nSources:\n- [Force Layout](https://github.com/mbostock/d3/wiki/Force-Layout)\n- [Force-based label placement](http://bl.ocks.org/MoritzStefaner/1377729)\n- [Collapsible force layout with directed paths and images/text in the nodes.](http://bl.ocks.org/djjupa/5653692)\n- [Labeled Force Layout](http://bl.ocks.org/mbostock/950642)\n", "created_at": "2014-11-30T11:40:31Z", "api": ["d3.layout.force", "d3.select", "d3.json", "d3.layout.tree"], "updated_at": "2015-08-29T14:10:33Z", "description": "d3 | Force layout with images"}, {"readme": "Loading multiple tile layers with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nEach layer is represented in the layer selector and can be hidden or displayed by clicking its name or the checkbox.", "created_at": "2014-07-12T19:33:28Z", "api": ["d3.geo.path", "d3.dispatch", "d3.quadTiles", "d3.rebind", "d3.selectAll", "d3.range", "d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.carto.layer.topojson"], "updated_at": "2015-08-30T21:38:39Z", "description": "Loading Tile Layers in d3.carto.map"}, {"readme": "This is an example of implimenting multiple HTML inputs using `<range>` input tags and using them to adjust a d3.js drawn svg element (a rectangle).\n\nIt is used as an example and described in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).", "created_at": "2014-04-14T09:48:12Z", "api": ["d3.select"], "updated_at": "2015-08-29T13:59:20Z", "description": "Multiple HTML inputs linked with d3.js "}, {"readme": "This is an example of implimenting an HTML input using a `<range>` input tag and using that to adjust multiple d3.js svg elements (spinning text!).\n\nIt is used as an example and described in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).", "created_at": "2014-04-14T09:58:08Z", "api": ["d3.select"], "updated_at": "2015-08-29T13:59:20Z", "description": "HTML input and multiple d3.js objects"}, {"readme": "This is a simple example of implimenting an HTML input using a `<range>` input tag and using that to adjust a d3.js drawn svg element (rotate text).\n\nIt is used as an example and described in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).", "created_at": "2014-04-14T09:51:42Z", "api": ["d3.select"], "updated_at": "2015-08-29T13:59:20Z", "description": "Interactive text rotation with d3.js"}, {"readme": "An example of [d3.layout.orbit](https://github.com/emeeks/d3.layout.orbit) that visualizes the D3 API.\n\nWhen you mouseover a node, it displays its label and centers the orbit layout on that node. It also draws spokes to children and parents where applicable.", "created_at": "2015-01-01T19:16:06Z", "api": ["d3.dispatch", "d3.rebind", "d3.layout.pie", "d3.json", "d3.scale.linear", "d3.layout.orbit", "d3.select", "d3.selectAll"], "updated_at": "2016-03-17T02:15:36Z", "description": "Orbital Layout of D3.js API"}, {"readme": "## Force Directed Graph with self sorting nodes - Inertial winnowing\n### Features  \n  - **_<a id=\"collisions\">Collisions between nodes</a>_**  \n  Based on [this](http://bl.ocks.org/mbostock/3231298) example but enhanced to simulate inertia.  The distance each node is moved away from the collision is proportional to their relative mass.  Since [gravity](https://github.com/mbostock/d3/wiki/Force-Layout#gravity) is switched on and [friction](https://github.com/mbostock/d3/wiki/Force-Layout#friction) is set for low damping, the heavier nodes will move towards the center of the graph and the smaller nodes pushed out of the way.  The mass is calculated assuming the nodes are spheres, using  r<sup>3</sup>, and the rebounds calculated according to relative \"mass\".  \n  \n```javascript\n  force.alpha(a/0.99*(1 - x))\n```  \n### d3 features  used\n  1.  [d3.layout.force](https://github.com/mbostock/d3/wiki/API-Reference#force)\n  2.  [Ordinal Scales](https://github.com/mbostock/d3/wiki/Ordinal-Scales)\n  1.  [d3.format](https://github.com/mbostock/d3/wiki/Formatting#d3_format)\n  1.  [d3.range](https://github.com/mbostock/d3/wiki/Arrays#d3_range)\n  1.  [d3.geom.quadtree](https://github.com/mbostock/d3/wiki/Quadtree-Geom)  \n  ", "created_at": "2015-08-28T19:37:54Z", "api": ["d3.select", "d3.format", "d3.layout.force", "d3.max", "d3.geom.quadtree", "d3.range", "d3.scale.category10"], "updated_at": "2015-08-31T16:51:43Z", "description": "self-sorting nodes in d3 fdg"}, {"readme": "### Aim\nUse input box to change visualisation  \n\n### Info and sources\nAdapted from [d3.js with Dynamic Data II](http://javadude.wordpress.com/2012/05/18/d3-js-with-dynamic-data-ii/)", "created_at": "2014-04-02T15:37:19Z", "api": ["d3.select"], "updated_at": "2015-08-29T13:58:02Z", "description": "D3 | Input box to create SVG shapes"}, {"readme": "***Actualization***\nThis behaviour has been corrected and now the example is valid, since the points are ordered the same way in both projections.\n\nFrom the mailing list:\n> OK, this has been fixed in release 3.1.4, so you'll no longer need the\nwork-around described in my previous email. Enjoy, and thank you for\nthe bug report!\n\n> http://bl.ocks.org/mbostock/580de8199ea3b85f822a\n\n\n***Initial message***\nThis example shows how a projection change must NOT be done.\nIt works properly when the D3 version is 3.0.8, but from 3.1.0, the change does strange things. \nJust change the D3 source at line 13 to https://raw.github.com/mbostock/d3/v3.1.2/d3.min.js to see the effects.\n\nI asked the question [at the D3 mailing list] (https://groups.google.com/forum/?fromgroups=#!topic/d3-js/9j37YsWU6bM).\n\nAs Mike Bostock answered:\n\n> The issue you are seeing is that projections apply adaptive resampling (as of D3 3.0, which was released last December). Therefore the number of control points for the same geometry may differ when different projections are used, and thus you cannot apply naive path interpolation to transition between two projections.\n\nMike Bostock [has a working example](http://bl.ocks.org/mbostock/3711652), and Jason David [has an other one] (https://www.jasondavies.com/maps/transition/)\n", "created_at": "2013-03-24T19:43:39Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.select", "d3.json", "d3.geo.albers"], "updated_at": "2015-12-15T08:48:56Z", "description": "Wrong way to transform a D3 projection"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/mccannf/'>mccannf</a>'s block: <a href='http://bl.ocks.org/mccannf/1629464'>D3 Drag Rectangle with drag handles</a>", "created_at": "2015-11-02T16:02:27Z", "api": ["d3.behavior.drag", "d3.select"], "updated_at": "2015-11-02T16:02:29Z", "description": "D3 Drag Rectangle with drag handles"}, {"readme": "Forked from Gregor Aisch's Block [simple tables in D3](https://gist.github.com/gka/17ee676dc59aa752b4e6). \n\nInspired by a question posted in the comments about using the cell values in a given row to color code the background of that cell.\n", "created_at": "2016-01-30T04:24:40Z", "api": ["d3.format", "d3.scale.linear", "d3.extent", "d3.select", "d3.keys"], "updated_at": "2016-01-30T23:16:47Z", "description": "(not quite) simple tables in D3"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nReplicate this CodePen [experiment](http://codepen.io/timelyportfolio/pen/vGwqzP) in R using `htmltools` from RStudio.  I think not enough people know how helpful `htmltools` can be.\n\n```\nlibrary(htmltools)\n\nbrowsable(\n  attachDependencies(\n    tagList(\n      tags$head(\n        tags$style(\n'\n.brush .extent {\n  stroke: #000;\n  fill-opacity: .125;\n  shape-rendering: crispEdges;\n}\n'\n        )\n      ),\n      tags$div(\n        HTML('Use <code>d3.svg.brush</code> to squish and stretch\n             with the <a href = \n             \"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/textLength\"\n             ><code>textLength</code></a> attribute'\n        )\n      ),\n      tag(\n        'svg',\n        list(\n          width=\"800px\",\n          height=\"100px\",\n          tag(\n            \"text\",\n            list(\n              x=\"0\", y=\"0\", dy=\"1em\", textLength=\"500px\",\n              lengthAdjust=\"spacingAndGlyphs\", \"font-size\"=\"3em\",\n              \"squish and stretch\"\n            )\n          )\n        )\n      ),\n      tags$script(\nHTML('\nvar svg = d3.select(\"svg\");\nvar width = svg.node().getBoundingClientRect().width;\nvar height = svg.node().getBoundingClientRect().height;\nvar x = d3.scale.linear()\n.range([0,width-1])\n.domain([0,width-1]);\n\nvar textel = svg.select(\"text\");\n\nfunction brush_fun() {\nvar x0 = brush.extent()[0];\nvar x1 = brush.extent()[1];\n\ntextel.transition().duration(1000)\n.attr(\"x\",x0)\n.attr(\"textLength\",x1-x0);\n};\n\nvar brush = d3.svg.brush()\n.x(x)\n.extent([0,width/2])\n.on(\"brush\", brush_fun);\n\nvar brush_g = svg.append(\"g\")\n.attr(\"class\", \"brush\")\n.call(brush);\n\nbrush_g.selectAll(\"rect\")\n.style(\"height\", height-2);\n\nbrush_fun();\n')        \n      )\n    ),\n    htmlDependency(\n      name=\"d3js\",\n      version=\"3.5.5\",\n      src=c(href=\"//cdnjs.cloudflare.com/ajax/libs/d3/3.5.5\"),\n      script=\"d3.min.js\"\n    )\n  )\n)\n```", "created_at": "2016-05-18T18:06:21Z", "api": ["d3.select", "d3.scale.linear", "d3.svg.brush"], "updated_at": "2016-05-18T18:13:00Z", "description": "d3 brush + svg textLength experiment in R"}, {"readme": "A difference chart of presidential approval ratings of the Obama and Bush (43) administrations. Difference charts graphically encode the variance between two time series (typically) coloring the variance to indicate which time series has a higher value during that period. All the examples I've seen of difference charts in D3 use clipping or convoluted mechanisms to create the difference area.\n\nHere's an example that just uses d3.svg.area and defines the y value as the maximum of the two time series points at that position and the y0 value as whichever time series you're using as the baseline. To give the chart the expected outlines, d3.svg.line is used to draw each time series on top of the difference areas.\n\nThis chart was used in my [exploration of figure/ground and metastability in data visualization](http://emeeks.github.io/gestaltdataviz/section4.html).", "created_at": "2015-04-15T15:47:43Z", "api": ["d3.scale.linear", "d3.select", "d3.json", "d3.extent", "d3.svg.axis", "d3.svg.line", "d3.svg.area"], "updated_at": "2016-03-17T02:11:25Z", "description": "Simple Difference Chart with d3.svg.area"}, {"readme": "Zoom in and zoom out to see dynamically clustered and merged features. Quadtree-based feature clustering in **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** that takes advantage of [topojson's](https://github.com/mbostock/topojson) built-in merging functionality.\n\nIn contrast to [feature clustering with GeoJSON features](http://bl.ocks.org/emeeks/1a75ec54489368b514f8), which create multipolygons from the clustered features, topojson layers create merged polygons from clustered features.\n\nThis also demonstrates map.clusteringTolerance() which allows you to increase or decrease the degree of clustering.\n\nSee also [simple point clustering](http://bl.ocks.org/emeeks/7d5925cb7d9721c60360) and [more advanced point clustering that leverages circle-packing](http://bl.ocks.org/emeeks/540b1b884b80b14a44c6).\n", "created_at": "2014-09-15T04:30:36Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer.topojson", "d3.scale.category20b", "d3.selectAll"], "updated_at": "2015-08-29T14:06:30Z", "description": "Topojson Merged Feature Clustering - d3.carto"}, {"readme": "Copying and changing a little an example of Automatic hexbinning in **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** allows for the creation of granular or high resolution heatmaps.\n\nThe map.createHexbinLayer function takes two variable: a point d3.carto.layer (either CSV or XY Array) and a resolution (in degrees). It creates a feature carto layer that automatically bins the points in the source layer and which you can then add to the map easily.\n\nIn this example, I generate two different hexbin resolutions: One at 2-degree and one at .75 degree, so that you can see how simple it is. The original point objects are found in the properties.node attribute of each hex feature and can be used to count the number or average the population, etc.\n\nThis requires a slightly modified [hexbin.js](https://github.com/emeeks/d3-plugins/blob/master/hexbin/hexbin.js) (also in this gist) to work.\n\nThis example has some data pulled from the SF data portal in particular, it's getting a csv of bike thefts from the SFPD incident  data from the past three months.  ", "created_at": "2014-11-06T01:11:51Z", "api": ["d3.values", "d3.range", "d3.carto.map", "d3.select", "d3.carto.layer.tile", "d3.json", "d3.carto.layer.xyArray", "d3.carto.layer.csv", "d3.scale.linear"], "updated_at": "2015-08-29T14:08:41Z", "description": "Bike theft d3.carto.map() hex binning copy"}, {"readme": "", "created_at": "2014-03-07T23:48:39Z", "api": ["d3.geo.tile", "d3.geo.mercator", "d3.geo.path", "d3.select", "d3.selectAll", "d3.json", "d3.svg.line", "d3.time.format", "d3.time.scale", "d3.svg.axis", "d3.svg.brush", "d3.mouse", "d3.time.hour.round"], "updated_at": "2015-08-29T13:57:09Z", "description": "OpenStreetMap + d3 tiles + brush slider"}, {"readme": "", "created_at": "2015-08-17T13:34:30Z", "api": ["d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.area", "d3.svg.line", "d3.extent", "d3.max", "d3.select", "d3.rebind", "d3.time.format", "d3.csv"], "updated_at": "2015-08-29T14:27:31Z", "description": "base chart using d3.rebind"}, {"readme": "Using d3timer to Centrally Control Movement\n\nThis is a follow-on from [\"Using attrTween in a Transition to Move an Element Using a Function\"](http://bl.ocks.org/cloudshapes/5662135).\n\nBoth this example, and the previous example show exactly the same kind of movement (although the movement here continues unless you explicitly click the \"Stop\" button). The animation is exactly the same, paths followed are the same etc.\n\nThe difference here is that this does not use transitions, it uses the [\"d3.timer\" functionality](https://github.com/mbostock/d3/wiki/Transitions#timers) to call a function that both determines how far around an iteration each element is and to move the element using the transform attribute.\n\nBut why on earth do this if we've just done the same thing using a transition? \n\nThe issue is one of control: with this approach we can do all kinds of calculations within the \"tickFn\" on multiple elements. If we wanted we could implement collision detection, manipulate the elements to follow all kinds of wacky routes, and more. This is the kind of thing the [\"force layout\"](https://github.com/mbostock/d3/wiki/Force-Layout) code does: uses a d3.timer and a tickFn to execute multiple operations on multiple elements before updating their positions.\n\nYou could take the previous example *and* also use a d3.timer function thereby combining the power of transitions and retaining some control, but it could get messy. For me at least.\n\n\n\n\n\n\n\n", "created_at": "2013-05-28T11:58:43Z", "api": ["d3.select", "d3.map", "d3.timer"], "updated_at": "2015-12-17T19:39:24Z", "description": "D3: Using d3timer to Centrally Control Movement"}, {"readme": "This is a map of brazil in which I loaded all the cities w/ datum to show what happens when you do this. If you open the javascript console you'll see that there's a giant object returned instead of each individual point like you may want. To do this use data() and enter i think.  Hopefully another example soon will show how to do that. But i think it's faster to load the data this way but you can't add classes to each thing based on it's properties like you might want all the cities outside of brazil a different color.\n\nAlso I think I could have rotated brazil to the middle of the map rather than rotating stuff but whatever. I think I looks alright as is.  I do want to look more into how to properly set up projections for different zoom levels though....", "created_at": "2014-06-09T15:47:29Z", "api": ["d3.geo.albers", "d3.geo.graticule", "d3.select", "d3.geo.path", "d3.json", "d3.selectAll"], "updated_at": "2015-08-29T14:02:24Z", "description": "d3 load data w/ datum()"}, {"readme": "", "created_at": "2014-12-09T17:52:52Z", "api": ["d3.select", "d3.json", "d3.geo.transform", "d3.geo.path"], "updated_at": "2015-11-05T18:41:35Z", "description": "Edge blur filter w/ D3"}, {"readme": "", "created_at": "2014-04-20T10:42:21Z", "api": ["d3.scale.linear", "d3.max", "d3.svg.axis", "d3.svg.line", "d3.select"], "updated_at": "2016-02-23T09:49:02Z", "description": "Line Chart with Grid [D3]"}, {"readme": "", "created_at": "2012-07-05T13:30:57Z", "api": ["d3.csv.parse", "d3.nest"], "updated_at": "2015-10-28T01:45:11Z", "description": "d3 csv nest simple example"}, {"readme": "Example for [Cooperative Brushing and Tooltips in D3](http://wrobstory.github.io/2013/11/D3-brush-and-tooltip.html). \n\nScatterplot only - no tooltips or brush. ", "created_at": "2013-11-24T17:35:37Z", "api": ["d3.scale.linear", "d3.max", "d3.svg.axis", "d3.select"], "updated_at": "2015-12-29T06:38:57Z", "description": "D3 Brush and Tooltip I"}, {"readme": "", "created_at": "2015-03-04T20:38:11Z", "api": ["d3.range", "d3.scale.linear", "d3.layout.force", "d3.select", "d3.rgb"], "updated_at": "2015-08-29T14:16:34Z", "description": "Angular D3 force directed graph"}, {"readme": "An example of [d3.svg.ribbon](https://github.com/emeeks/d3.svg.ribbon) using Napoleon's March through Russia made famous by Minard's map. Dataset comes from Ben Schmidt's use of it in his excellent [d3.trail layout](https://github.com/bmschmidt/D3-trail).\n\nThe pattern for using d3.svg.ribbon with geodata is simply to factor the projection into the accessors:\n\n```\nprojection = d3.geo.equirectangular().translate([-3300,7800]).scale(8000);\nsizeScale = d3.scale.linear().domain([6000,340000]).range([1,10])\n\nribbon = d3.svg.ribbon()\n  .x(function(d) {return projection([d.lon, d.lat])[0]})\n  .y(function(d) {return projection([d.lon, d.lat])[1]})\n  .r(function(d) {return sizeScale(d.size)});\n```", "created_at": "2015-08-23T17:34:13Z", "api": ["d3.svg.line", "d3.scale.ordinal", "d3.geo.equirectangular", "d3.scale.linear", "d3.svg.ribbon", "d3.behavior.drag", "d3.nest", "d3.select"], "updated_at": "2016-03-16T15:48:05Z", "description": "Napoleon's March with d3.svg.ribbon"}, {"readme": "### Aim\nPull in external data, using d3 to load and parse \n\nIt pulls in some data formatted in tsv (pinched from Mike's [Scatterplot](http://bl.ocks.org/mbostock/3887118)) and loads the data via d3. In this example listing the 'petalLength' column in a 'ul'.\n\n### Info and sources\nThis was a test after watching dashing [D3 tutorial Loading TSV Data From Server](https://www.dashingd3js.com/d3-screencasts/38-loading-data-from-server)\n\n#### Other sources: \n\n- [mbostock/d3/wiki/CSV](https://github.com/mbostock/d3/wiki/CSV)\n- [d3.tsv](http://bl.ocks.org/mbostock/3305937)\n- [Getting the Data](http://www.d3noob.org/2012/12/getting-data.html)", "created_at": "2014-03-19T16:51:09Z", "api": ["d3.select", "d3.tsv"], "updated_at": "2015-08-29T13:57:30Z", "description": "d3 | Loading external data (tsv)"}, {"readme": "Working from Mike's [tiles-clipped-to-a-polygon example](http://bl.ocks.org/mbostock/4150951), I extended it for a unique tileset in each of several polygons.", "created_at": "2013-12-17T17:02:54Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.geo.tile", "d3.select", "d3.json"], "updated_at": "2015-12-31T15:39:12Z", "description": "D3 Tileset Clipping by Country"}, {"readme": "An example of [d3.layout.timeline](https://github.com/emeeks/d3.layout.timeline) that generates random bands of data (with `s` and `e` somewhere between 1 & 40) and updates the timeline with the new band of data. A new band is generated every 500ms until 100 bands are generated.\n\nBands placed earlier are made more transparent than bands placed later.\n\nThis uses the layout's `extent` function to set the extent to a fixed [1,40] so that it does not dramatically resize in width as more elements are added. It also uses the `maxBandHeight` set to 20 to keep the timeline from dramatically resizing in height. Notice that there is no corresponding `minBandHeight` since there is no way to know how many lanes will be necessary to represent the data. `padding` is also used to give a small gap between lanes.", "created_at": "2015-09-12T01:12:35Z", "api": ["d3.scale.linear", "d3.min", "d3.max", "d3.layout.timeline", "d3.select", "d3.selectAll"], "updated_at": "2016-03-16T15:47:00Z", "description": "d3.layout.timeline with procedurally generated data"}, {"readme": "See it in action at: [bl.ocks.org](http://bl.ocks.org/3918637) (Note: bl.ocks.org link won't work for IE 8.)\n\n#Overview\nThis is a simple [D3](http://d3js.org/) constructed table that includes an inline CSS-based bar indicator for negative and positive values.  Since it is CSS and not SVG, it works on IE 8 (and maybe earlier) by including [Sizzle](http://sizzlejs.com/) and a shim from [Aight](https://github.com/shawnbot/aight).  Save it locally to test out IE 8 compatibility.\n\n", "created_at": "2012-10-19T14:54:11Z", "api": ["d3.format", "d3.sum", "d3.descending", "d3.scale.linear", "d3.max", "d3.select", "d3.selectAll"], "updated_at": "2015-10-11T20:58:20Z", "description": "D3 Table with Inline Bar Indicator"}, {"readme": "", "created_at": "2016-03-04T16:26:25Z", "api": ["d3.select"], "updated_at": "2016-05-11T16:14:45Z", "description": "D3: Split icons into columns"}, {"readme": "D3 US Map with Hover\n====================\n\nBasic US map using D3 and topojson.  Each state gets colored and neighbors should never be the same color.  Also has some mousein/mouseout functions for highlighting the state your cursor is over", "created_at": "2015-04-17T00:35:48Z", "api": ["d3.scale.sqrt", "d3.geo.path", "d3.scale.category20", "d3.select", "d3.max", "d3.selectAll"], "updated_at": "2015-08-29T14:19:20Z", "description": "D3 US Map with Hover"}, {"readme": "Example for [Cooperative Brushing and Tooltips in D3](http://wrobstory.github.io/2013/11/D3-brush-and-tooltip.html). \n\nThe completed chart, with both tooltips and brushing working cooperatively. You can start a brush-zoom on either the background or a data point. ", "created_at": "2013-11-23T07:56:20Z", "api": ["d3.select", "d3.mouse", "d3.scale.linear", "d3.max", "d3.svg.brush", "d3.svg.axis", "d3.helper.tooltip"], "updated_at": "2016-03-17T18:35:15Z", "description": "D3 Brush and Tooltip Complete"}, {"readme": "This is a simple d3.js tree diagram put together in response to a question on [Stack Overflow](http://stackoverflow.com/questions/27912763/creating-a-d3-js-collapsible-tree-from-csv-data)\n\nIt is aimed at providing some exposure to some d3.js functions and should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.", "created_at": "2015-01-16T18:23:43Z", "api": ["d3.layout.tree", "d3.svg.diagonal", "d3.select", "d3.csv"], "updated_at": "2016-01-31T14:46:02Z", "description": "d3.js tree from csv"}, {"readme": "## responsive layout with D3.js / D3.js\u3067\u30ec\u30b9\u30dd\u30f3\u30b7\u30d6\u30fb\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u5b9f\u73fe\u3059\u308b\n\n\u5225\u30a6\u30a4\u30f3\u30c9\u30a6\u3067\u958b\u3001\u6319\u52d5\u3092\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\nPlease check how it works to open new window with raw files.\n\n\u89e3\u8aac\u8a18\u4e8b\nhttp://visualizing.jp/responsive-d3/", "created_at": "2016-01-01T08:26:23Z", "api": ["d3.select", "d3.timer"], "updated_at": "2016-01-02T04:17:48Z", "description": "responsive layout with D3.js"}, {"readme": "An example of how to project coordinates of geodata features and then use those for d3.svg.line to take advantage of built-in line interpolators.", "created_at": "2014-09-01T16:41:25Z", "api": ["d3.json", "d3.geo.mercator", "d3.geo.path", "d3.select", "d3.svg.line"], "updated_at": "2015-08-29T14:05:57Z", "description": "Geodata to d3.svg.line interpolation"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/1627dc5aaca75bc77b84'>Intro to D3 Live Coding</a>", "created_at": "2016-03-10T01:30:14Z", "api": ["d3.select", "d3.scale.category20"], "updated_at": "2016-03-10T06:16:01Z", "description": "Intro to D3 Live Coding"}, {"readme": "Example for [Cooperative Brushing and Tooltips in D3](http://wrobstory.github.io/2013/11/D3-brush-and-tooltip.html). \n\nNote that the brush layer lives behind the data points, and therefore a brush cannot be started on the data point itself, only in the background layer. ", "created_at": "2013-11-24T18:38:38Z", "api": ["d3.select", "d3.mouse", "d3.scale.linear", "d3.max", "d3.svg.axis", "d3.svg.brush", "d3.helper.tooltip"], "updated_at": "2015-12-29T06:39:15Z", "description": "D3 Brush and Tooltip IV"}, {"readme": "This is a d3.js tree diagram that incldes an interactive element as used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nAny parent node can be clicked on to collapse the portion of the tree below it, on itself. Conversly, it can be clicked on again to regrow.\n\nIt is derived from the Mike Bostock [Collapsible tree example](http://bl.ocks.org/mbostock/4339083) but it is a slightly cut down version.", "created_at": "2014-01-11T18:50:12Z", "api": ["d3.layout.tree", "d3.svg.diagonal", "d3.select"], "updated_at": "2016-01-02T23:18:58Z", "description": "Interactive d3.js tree diagram"}, {"readme": "This script is another demonstration of the **update**, **enter**, and **exit** selections in D3. The script also makes use of **key functions** to bind data to each row, and **transitions** to animate opacity and delay the removal of rows. This script demonstrates *nested* data, where an array of values is bounded to each row (`<tr>`), and then a single value is bound to each cell (`<td>`) element in the row.\n\nEach row of the table has a unique letter key, which is displayed as the first cell. The remainder of the row is an array of random digits. At each iteration:\n\n1. A new set of letter keys is randomly selected from the alphabet.\n2. For each letter in the set, a new row with random data will be inserted in the table if the letter is not already in the table.\n3. Any row in the table with a key which is not in the new set is removed. \n4. The number of columns in the table is randomly adjusted. If the new number of columns is larger than the current table, random data is appended to each row. Otherwise, cells are deleted from each row.\n\n\nCells which remain between iterations are colored in blue, new cells are colored in green, and cells which are to be deleted are colored red before removal.", "created_at": "2014-04-28T20:55:27Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:00:41Z", "description": "D3 Dynamic Table  with Nested Data"}, {"readme": "# d3.austin() Meetup - March Demo\n\n## Data \n\n* [Election Results](http://traviselectionresults.com/enr/reports/display.do?criteria.electionId=20141216&electionId=20141216&tabType=P)\n* [Precinct Shapefiles](https://tax-office.traviscountytx.gov/images/tax_assessor/pdfs/voters/maps/VR_ElectionPrecinctShapeFile.zip)", "created_at": "2015-03-03T00:04:03Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.select", "d3.json"], "updated_at": "2015-08-29T14:16:27Z", "description": "d3.austin() Meetup - March Demo"}, {"readme": "", "created_at": "2013-09-05T17:02:36Z", "api": ["d3.geo.graticule", "d3.geo.azimuthalEqualArea", "d3.geo.path", "d3.behavior.drag", "d3.selectAll", "d3.select", "d3.json"], "updated_at": "2015-12-22T09:38:59Z", "description": "Using d3.behavior.drag with a map"}, {"readme": "# Automatic Scaling Features with D3\n\n![Thumbnail](./thumbnail.png)\n\nUse [`d3.geo.bounds`](https://github.com/mbostock/d3/wiki/Geo-Paths#wiki-path_bounds) and [`d3.geo.distance`](https://github.com/mbostock/d3/wiki/Geo-Paths#wiki-distance) to compute an approximate scale to display a complete feature.\n\n## References\n\n- [D3 Geo](https://github.com/mbostock/d3/wiki/Geo-Paths)\n- [TopoJSON](https://github.com/mbostock/topojson)\n- [Natural Earth](www.naturalearthdata.com)\n", "created_at": "2014-09-08T15:41:05Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.select", "d3.json", "d3.geo.bounds", "d3.geo.centroid", "d3.geo.distance"], "updated_at": "2015-08-29T14:06:12Z", "description": "Automatic Scaling Features with D3"}, {"readme": "Force layout test/experiment with images\n\nSources:\n- [Force Layout](https://github.com/mbostock/d3/wiki/Force-Layout)\n- [Force-based label placement](http://bl.ocks.org/MoritzStefaner/1377729)\n- [Collapsible force layout with directed paths and images/text in the nodes.](http://bl.ocks.org/djjupa/5653692)\n- [Labeled Force Layout](http://bl.ocks.org/mbostock/950642)\n\n\nforked from <a href='http://bl.ocks.org/eesur/'>eesur</a>'s block: <a href='http://bl.ocks.org/eesur/be2abfb3155a38be4de4'>d3 | Force layout with images</a>", "created_at": "2016-01-07T03:24:48Z", "api": ["d3.layout.force", "d3.select", "d3.json", "d3.layout.tree"], "updated_at": "2016-01-07T03:24:57Z", "description": "d3 | Force layout with images"}, {"readme": "", "created_at": "2013-01-31T22:38:26Z", "api": ["d3.csv", "d3.extent", "d3.time.scale", "d3.scale.linear", "d3.select", "d3.svg.line", "d3.svg.axis", "d3.time.format"], "updated_at": "2015-12-12T00:58:49Z", "description": "D3.js axis gridlines width > 1.0"}, {"readme": "", "created_at": "2013-02-01T04:00:20Z", "api": ["d3.time.scale", "d3.select", "d3.svg.axis"], "updated_at": "2015-12-12T01:09:01Z", "description": "d3.js major minor tick style 1"}, {"readme": "", "created_at": "2013-11-10T03:08:57Z", "api": ["d3.scale.linear", "d3.behavior.zoom", "d3.select"], "updated_at": "2015-12-27T21:39:09Z", "description": "dragging vs actually zooming with d3.behavior.zoom()"}, {"readme": "## hello markdown\n\n\n\n\n\n\n\n\n\n\n", "created_at": "2015-09-24T10:19:42Z", "api": ["d3.select", "d3.csv", "d3.descending"], "updated_at": "2015-09-24T10:55:10Z", "description": "d3.js external csv by yonit"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-11-18T07:09:32Z", "api": ["d3.select"], "updated_at": "2015-11-18T07:09:32Z", "description": "d3 non-binding api ordinal scale"}, {"readme": "Scatterplot of 2014 NCAA Passing Statistics\n\nData from http://www.sports-reference.com/cfb/years/2014-passing.html\n\nScatterplot based on http://bl.ocks.org/mbostock/3887118, tooltip example from http://www.d3noob.org/2013/01/adding-tooltips-to-d3js-graph.html", "created_at": "2014-12-15T16:33:03Z", "api": ["d3.scale.linear", "d3.svg.axis", "d3.scale.category20", "d3.select", "d3.csv", "d3.min", "d3.max"], "updated_at": "2015-08-29T14:11:28Z", "description": "D3 Scatterplot of 2014 NCAA Passing Statistics"}, {"readme": "", "created_at": "2014-06-06T16:13:27Z", "api": ["d3.scale.linear", "d3.svg.axis", "d3.select", "d3.svg.line", "d3.csv", "d3.json", "d3.range"], "updated_at": "2015-08-29T14:02:18Z", "description": "Scatterplot with Contour Lines (D3 + R)"}, {"readme": "This is a simple example of a [bullet chart](http://www.perceptualedge.com/articles/misc/Bullet_Graph_Design_Spec.pdf) derived from [Mike Bostock's example](http://bl.ocks.org/mbostock/4061961).", "created_at": "2013-06-28T18:41:53Z", "api": ["d3.select", "d3.scale.linear", "d3.timer.flush", "d3.bullet", "d3.json", "d3.selectAll", "d3.max"], "updated_at": "2015-12-19T02:59:06Z", "description": "Simple d3.js Bullet Chart example"}, {"readme": "", "created_at": "2012-08-30T11:21:08Z", "api": ["d3.scale.ordinal", "d3.range", "d3.scale.linear", "d3.scale.category20c", "d3.select", "d3.expose.call"], "updated_at": "2015-10-09T14:57:57Z", "description": "D3 Hive Plot (Areas) - std expose"}, {"readme": "", "created_at": "2012-08-30T18:05:23Z", "api": ["d3.scale.ordinal", "d3.range", "d3.scale.linear", "d3.scale.category20c", "d3.select"], "updated_at": "2015-10-09T15:57:55Z", "description": "D3 Hive Plot (Areas) - evil exposure"}, {"readme": "## D3 Dynamic Array of Tables\n\nDemonstrates the the use of D3 to manage an array of tables. Via a button, the user will cycle through several steps which will mutate the underlying array of arrays, which at each step is fed to the table **update** function. For example, tables are added and removed from the array of tables, individual rows of tables are added and removed, and individual table cells are modified. The **update** function demonstrates the enter, exit and update patterns at the div/table level as well as at the table row level. \n\nFor **bl.ocks.org** users, the script should be viewed in its own window. See the script in action [here](http://bl.ocks.org/boeric/raw/e16ad218bc241dfd2d6e/)\n\nforked from <a href='http://bl.ocks.org/boeric/'>boeric</a>'s block: <a href='http://bl.ocks.org/boeric/e16ad218bc241dfd2d6e'>D3 Dynamic Array of Tables</a>\n\nforked from <a href='http://bl.ocks.org/devssunil/'>devssunil</a>'s block: <a href='http://bl.ocks.org/devssunil/5485fa28d3fdd422930b53ab330f96e3'>D3 Dynamic Array of Tables</a>\n\nforked from <a href='http://bl.ocks.org/devssunil/'>devssunil</a>'s block: <a href='http://bl.ocks.org/devssunil/ce488bb628eb9e4468521b001f027a55'>D3 Dynamic Array of Tables</a>", "created_at": "2016-04-27T22:11:48Z", "api": ["d3.select", "d3.values"], "updated_at": "2016-04-27T22:11:48Z", "description": "D3 Dynamic Array of Tables"}, {"readme": "", "created_at": "2012-07-06T16:34:21Z", "api": ["d3.extent", "d3.time.format", "d3.select", "d3.scale.linear", "d3.time.scale", "d3.svg.axis"], "updated_at": "2015-10-06T22:17:57Z", "description": "d3 axis label prettified and using extent"}, {"readme": "Adapting [d3.geo.tile](https://github.com/d3/d3-plugins/tree/master/geo/tile) to show [OpenStreetMap vector tiles](http://openstreetmap.us/~migurski/vector-datasource/). Via Mike Bostock's [example](/mbostock/5616813).", "created_at": "2013-11-09T18:18:57Z", "api": ["d3.geo.tile", "d3.geo.mercator", "d3.geo.path", "d3.behavior.zoom", "d3.select", "d3.json", "d3.mouse", "d3.format"], "updated_at": "2015-12-27T20:59:09Z", "description": "Vector Tiles in D3, darkened"}, {"readme": "Please note, data will be randomised until December 2014. It is based on Ipsos MORI's long term Issues Index survey 1974 - 2014.  ", "created_at": "2014-09-29T11:07:31Z", "api": ["d3.time.format", "d3.bisector", "d3.time.scale", "d3.scale.linear", "d3.scale.ordinal", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.tsv", "d3.keys", "d3.extent", "d3.max", "d3.svg.brush", "d3.svg.area", "d3.mouse"], "updated_at": "2016-04-05T08:51:57Z", "description": "d3.js Multi-series line chart interactive"}, {"readme": "Manipulating a single SVG shape triggered via user input.\n\nAlso a good way to illustrate how SVG coordinate space works. Note you need to put the radius in to view the circle (otherwise it's at 0). \n\n```\n\nThe cx and cy attributes define the x and y coordinates of the center of the circle. \n\nIf cx and cy are omitted, the circle's center is set to (0,0)\n\nThe r attribute defines the radius of the circle\n\n```", "created_at": "2014-04-04T15:17:40Z", "api": ["d3.select"], "updated_at": "2015-08-29T13:58:07Z", "description": "d3 | manipulating a single SVG shape"}, {"readme": "", "created_at": "2011-12-16T22:45:23Z", "api": ["d3.scale.linear", "d3.select", "d3.layout.stack"], "updated_at": "2015-09-28T19:48:42Z", "description": "Dynamic Stacked Bar Chart using d3.js"}, {"readme": "## D3 Based Real Time Chart\n\nThe real time chart is a resuable Javascript component that accepts real time data. The chart's time domain is moving with the passage of time, which means that any data placed in the chart eventually will age out and leave the chart. In addition to the main chart, the component also manages a \"focus\" window with a viewport (d3.brush) that can moved and sized to view an arbitrary portion of the time series data. \n\nThe component adheres to the pattern described in [Towards Reusable Chart](http://bost.ocks.org/mike/chart/). \n\nThe following options are currently supported:\n\n- **width** and **height** in pixels (Number)\n- **border** (Boolean)\n- **title**, **xTitle**, **yTitle** (String)\n- **barWidth** in pixels (Number)\n\nFuture options will include:\n\n- **Scale** domain of real time data (currently a domain of [0, 100] is assumed for the y scale)\n- Use of SVG **rects, circles, paths** etc. to represent data (in addition to bars)\n\nUse the component like so:\n\n```\n// create the real time chart\nvar chart = realTimeChart()\n    .title(\"Chart Title\")\n    .yTitle(\"Y Scale\")\n    .xTitle(\"X Scale\")\n    .border(true)\n    .width(600)\n    .height(290)\n    .barWidth(1)\n    .initialData(data);\n\n// invoke the chart\nvar chartDiv = d3.select(\"#viewDiv\").append(\"div\")\n    .attr(\"id\", \"chartDiv\")\n    .call(chart);\n\n// create new data item and inject into chart\nvar now = new Date();\nvar obj = {\n  value: 50\n  time: now,\n  color: \"red\",\n  ts: now.getTime(),\n  interval: timeout\n};\n\n// send the datum to the chart\nchart.datum(obj);\n\n```\n", "created_at": "2015-11-15T21:32:52Z", "api": ["d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.area", "d3.svg.line", "d3.svg.brush", "d3.random.normal", "d3.range", "d3.select"], "updated_at": "2015-11-15T22:30:34Z", "description": "D3 Based Real Time Chart"}, {"readme": "#zui53 Zoom Adaptation of [Mike Bostock's Line Chart](https://gist.github.com/mbostock/3902569)\nI have not seen anyone pair [zui53](https://github.com/florianguenther/zui53) with so I thought I would experiment by adding the zoom and drag functionality to this line chart.  I also wanted to test my skills by using a long form csv dataset with two series.  zui53 zoom and drag does not work in Internet Explorer.  Works best when opened in [full window](http://bl.ocks.org/timelyportfolio/raw/5149102/)\n\nOriginal Readme.md is below\n***\nA [line chart](../3883245) with mouseover so that you can read the *y*-value based on the closest *x*-value. The *x*-value is found using d3.mouse and scale.invert. The *y*-value is then found by bisecting the data.", "created_at": "2013-03-13T03:10:56Z", "api": ["d3.selectAll", "d3.time.format", "d3.bisector", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.scale.category20", "d3.csv", "d3.keys", "d3.nest", "d3.extent", "d3.mouse", "d3.select"], "updated_at": "2015-12-14T21:09:09Z", "description": "zui53 and d3 line chart"}, {"readme": "Example of map explained in maptimeLex [Introduction to D3.js Web Mapping Through 7 Simple Maps](https://github.com/maptimelex/d3-mapping).", "created_at": "2015-06-24T15:27:23Z", "api": ["d3.select", "d3.geo.albers", "d3.geo.path"], "updated_at": "2015-08-29T14:23:38Z", "description": "A D3 map using queue.js"}, {"readme": "How to use [d3-tip](https://github.com/caged/d3-tip) with d3's [simple bar chart example](http://bl.ocks.org/mbostock/3885304).\n\n\nforked from <a href='http://bl.ocks.org/Caged/'>Caged</a>'s block: <a href='http://bl.ocks.org/Caged/6476579'>Using d3-tip to add tooltips to a d3 bar chart</a>\n\nforked from <a href='http://bl.ocks.org/wcjohnson11/'>wcjohnson11</a>'s block: <a href='http://bl.ocks.org/wcjohnson11/04feb3139aa6a857d67f756afa6abda1'>Using d3-tip to add tooltips to a d3 bar chart</a>", "created_at": "2016-04-18T12:00:05Z", "api": ["d3.format", "d3.scale.ordinal", "d3.scale.linear", "d3.svg.axis", "d3.tip", "d3.select", "d3.tsv", "d3.max"], "updated_at": "2016-04-18T12:00:05Z", "description": "Using d3-tip to add tooltips to a d3 bar chart"}, {"readme": "How to use [d3-tip](https://github.com/caged/d3-tip) with d3's [simple bar chart example](http://bl.ocks.org/mbostock/3885304).\n\n\nforked from <a href='http://bl.ocks.org/Caged/'>Caged</a>'s block: <a href='http://bl.ocks.org/Caged/6476579'>Using d3-tip to add tooltips to a d3 bar chart</a>", "created_at": "2016-03-24T14:02:40Z", "api": ["d3.format", "d3.scale.ordinal", "d3.scale.linear", "d3.svg.axis", "d3.tip", "d3.select", "d3.tsv", "d3.max"], "updated_at": "2016-03-24T14:02:41Z", "description": "Using d3-tip to add tooltips to a d3 bar chart"}, {"readme": "How to use [d3-tip](https://github.com/caged/d3-tip) with d3's [simple bar chart example](http://bl.ocks.org/mbostock/3885304).\n\n\nforked from <a href='http://bl.ocks.org/Caged/'>Caged</a>'s block: <a href='http://bl.ocks.org/Caged/6476579'>Using d3-tip to add tooltips to a d3 bar chart</a>\n\nforked from <a href='http://bl.ocks.org/wcjohnson11/'>wcjohnson11</a>'s block: <a href='http://bl.ocks.org/wcjohnson11/04feb3139aa6a857d67f756afa6abda1'>Using d3-tip to add tooltips to a d3 bar chart</a>\n\nforked from <a href='http://bl.ocks.org/aax951/'>aax951</a>'s block: <a href='http://bl.ocks.org/aax951/d7a90cc03d3e1bddffa5569cae11490d'>Using d3-tip to add tool</a>", "created_at": "2016-04-18T12:07:18Z", "api": ["d3.format", "d3.scale.ordinal", "d3.scale.linear", "d3.svg.axis", "d3.tip", "d3.select", "d3.tsv", "d3.max"], "updated_at": "2016-04-18T12:07:18Z", "description": "Using d3-tip to add tool"}, {"readme": "try techniques discussed in this [`d3` issue](https://github.com/d3/d3-selection/issues/52), but the speed is about the same, so I think I missed the point.  The huge speed boost comes with the updating and not the initial creation.\n\nforked from <a href='http://bl.ocks.org/jrbalsano/'>jrbalsano</a>'s block: <a href='http://bl.ocks.org/jrbalsano/5de7fd6b94be178f8727'>D3 Scatterplot Rendering - 2</a>\n", "created_at": "2016-05-12T18:15:22Z", "api": ["d3.select"], "updated_at": "2016-05-12T19:03:51Z", "description": "D3 Scatterplot Rendering - 2 (forked)"}, {"readme": "Easy example on how to put marker on a d3.js map.\n\nYou got 2 options:\n- using d3.geo.path() which does all the work for you\n- using svg circles and translating them via projection(d.geometry.coordinates)", "created_at": "2015-11-20T12:47:57Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.geo.graticule", "d3.select", "d3.json"], "updated_at": "2015-11-21T12:10:34Z", "description": "d3.js map with markers"}, {"readme": "How to center on a point with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)**.\n\nThe centerOn function can take \"latlong\" coordinates, which are latitude and longitude in XY order, or \"scaled\" coordinates, which are XY coordinates in the scaled space on the map. You can get latlong from d3.geo.centroid() and scaled from d3.geo.path.centroid().", "created_at": "2014-07-12T19:46:14Z", "api": ["d3.carto.map", "d3.select"], "updated_at": "2015-08-29T14:03:54Z", "description": "Center on a Point - d3.carto.map"}, {"readme": "This is a d3.js bar chart as used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is derived from the Mike Bostock's [Bar Chart example](http://bl.ocks.org/mbostock/3885304) but it is a slightly cut down version.\n\nforked from <a href='http://bl.ocks.org/d3noob/'>d3noob</a>'s block: <a href='http://bl.ocks.org/d3noob/8952219'>Simple d3.js bar chart</a>", "created_at": "2016-05-16T15:08:10Z", "api": ["d3.time.format", "d3.scale.ordinal", "d3.scale.linear", "d3.svg.axis", "d3.select", "d3.csv", "d3.max"], "updated_at": "2016-05-16T15:17:44Z", "description": "Simple d3.js bar chart"}, {"readme": "### Aim\nPull in dynamic data into a d3 visualisation via input box\n\n### Info and sources\nAdapted from [d3.js with Dynamic Data tutorial](http://javadude.wordpress.com/2012/05/17/d3-js-with-dynamic-data/)\n\n\nforked from <a href='http://bl.ocks.org/eesur/'>eesur</a>'s block: <a href='http://bl.ocks.org/eesur/9910343'>Input field dynamic text with D3</a>\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/097db9b7cc475d786ae0'>Input field dynamic text with D3</a>", "created_at": "2015-12-01T23:41:54Z", "api": ["d3.select"], "updated_at": "2015-12-01T23:42:05Z", "description": "Input field dynamic text with D3"}, {"readme": "This is a follow on from the [simple d3.js graph](http://bl.ocks.org/d3noob/b3ff6ae1c120eea654b5) used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is aimed at exploring some features of d3.js and should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.", "created_at": "2014-06-20T21:02:21Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.area", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-03-11T03:25:07Z", "description": "d3.js Graph with many features"}, {"readme": "", "created_at": "2013-05-13T22:05:04Z", "api": ["d3.csv", "d3.select"], "updated_at": "2016-03-03T06:03:17Z", "description": "d3.csv very simple example"}, {"readme": "This example belongs to [the presentation](rveciana.github.com/geoexamples/geoinquiets/d3js/index_en.html) made to the [OSGeo](http://www.osgeo.org/) local group in Barcelona [Geoinquiets](http://www.geoinquiets.cat/)\nThe example is an adaptation from [Mike Bostock](http://bost.ocks.org/mike/)'s [Symbol Map example](http://bl.ocks.org/mbostock/4342045)", "created_at": "2013-03-17T10:43:27Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.select", "d3.json"], "updated_at": "2015-12-15T01:38:58Z", "description": "D3 tutorial II: Setting projection"}, {"readme": "", "created_at": "2016-01-12T20:10:02Z", "api": ["d3.select", "d3.scale.linear", "d3.json"], "updated_at": "2016-01-12T20:10:02Z", "description": "Multiple polygons with d3.js"}, {"readme": "", "created_at": "2014-03-28T21:46:08Z", "api": ["d3.json", "d3.select", "d3.geo.orthographic", "d3.geo.path"], "updated_at": "2015-08-29T13:57:52Z", "description": "D3 Orthographic Projection with TopoJSON"}, {"readme": "This is a follow on from the [simple d3.js graph](http://bl.ocks.org/d3noob/b3ff6ae1c120eea654b5) used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt adds points to a simple line graph to produce a hybrid line / scatterplot graph. It should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.\n\nforked from <a href='http://bl.ocks.org/d3noob/'>d3noob</a>'s block: <a href='http://bl.ocks.org/d3noob/38744a17f9c0141bcd04'>Simple scatterplot with d3.js</a>\n\nforked from <a href='http://bl.ocks.org/nguyenbq/'>nguyenbq</a>'s block: <a href='http://bl.ocks.org/nguyenbq/a350280a02c8105529d0'>Simple scatterplot with d3.js</a>", "created_at": "2016-02-24T21:47:59Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-02-24T21:47:59Z", "description": "Simple scatterplot with d3.js"}, {"readme": "Automatic voronoi generation in **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** allows for the creation of regions from point data.\n\nThe map.createVoronoiLayer function takes two variable: a point d3.carto.layer (either CSV or XY Array) and a margin (in degrees). It creates a feature carto layer that splits the area of the points into regions.\n\nThis will have issues if you pass point data that has more than one point at the same XY location.", "created_at": "2014-09-16T11:31:03Z", "api": ["d3.carto.map", "d3.select", "d3.carto.layer", "d3.carto.layer.csv", "d3.scale.linear"], "updated_at": "2015-08-29T14:06:31Z", "description": "Automated Voronoi Layer - d3.carto"}, {"readme": "", "created_at": "2013-09-07T04:14:51Z", "api": ["d3.select", "d3.range"], "updated_at": "2016-03-07T03:26:41Z", "description": "7th Grade Graphs with D3"}, {"readme": "", "created_at": "2013-08-01T15:06:48Z", "api": ["d3.svg.arc", "d3.select", "d3.interpolateString"], "updated_at": "2016-04-14T21:59:18Z", "description": "d3.js Loading Spinner Icon"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/nivas8292/'>nivas8292</a>'s block: <a href='http://bl.ocks.org/nivas8292/222939d7c74c5de09387'>Zoom and Brush in d3</a>", "created_at": "2015-11-19T22:28:51Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.area", "d3.select", "d3.svg.brush", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2015-11-19T22:28:53Z", "description": "Zoom and Brush in d3"}, {"readme": "", "created_at": "2015-10-28T01:45:11Z", "api": ["d3.csv.parse", "d3.nest"], "updated_at": "2015-10-28T01:45:11Z", "description": "d3 csv nest simple example"}, {"readme": "", "created_at": "2012-10-26T17:20:30Z", "api": ["d3.dispatch", "d3.touches", "d3.mouse", "d3.event.stopPropagation", "d3.rebind", "d3.geo.mercator", "d3.geo.path", "d3.select", "d3.behavior.zoom", "d3.range"], "updated_at": "2015-10-12T02:48:07Z", "description": "Preliminary Geo Drawing in d3"}, {"readme": "Simple D3 Bar Chart with Transitions - Bootcamp 2016\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\n\n\nforked from <a href='http://bl.ocks.org/mukhtyar/'>mukhtyar</a>'s block: <a href='http://bl.ocks.org/mukhtyar/89e0407a1828d59c72e7'>Simple D3 Bar Chart</a>", "created_at": "2016-03-24T20:12:45Z", "api": ["d3.select"], "updated_at": "2016-03-24T21:47:38Z", "description": "Simple D3 Bar Chart with Transitions"}, {"readme": "This example shows the county boundaries for Illinois. In red we see the [google.maps.Data()][1] layer in blue a [D3.geo.path()][2] with [mercator projection][3]. \n\nThe google data layer is an object which displays in the same canvas as any google overlay (polygons, markers, polylines, etc) while the D3.geo.path() shows up in an SVG container I overlap on top of the google container. \n\n  [1]: https://developers.google.com/maps/documentation/javascript/3.exp/reference#Data\n  [2]: https://github.com/mbostock/d3/wiki/Geo-Paths\n  [3]: https://github.com/mbostock/d3/wiki/Geo-Projections#wiki-mercator", "created_at": "2014-07-07T02:39:43Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.select"], "updated_at": "2015-08-29T14:03:36Z", "description": "D3 vs Google Data Projection"}, {"readme": "An example of [d3.layout.orbit](https://github.com/emeeks/d3.layout.orbit) that visualizes the D3 API.\n\nWhen you mouseover a node, it displays its label and centers the orbit layout on that node. It also draws spokes to children and parents where applicable.", "created_at": "2015-11-08T15:00:38Z", "api": ["d3.dispatch", "d3.rebind", "d3.layout.pie", "d3.json", "d3.scale.linear", "d3.layout.orbit", "d3.select", "d3.selectAll"], "updated_at": "2015-11-08T15:00:38Z", "description": "Orbital Layout of D3.js API"}, {"readme": "Testing out [aframe.io](https://aframe.io/) with [d3.js](http://d3js.org). use **WASD** keys to \"walk\" around the space.\n\nSince AFrame works with DOM elements, you can use d3's selection API to generate and modify 3D elements, as well as handle \"mouse\" events (including the VR friendly \"fuse cursor\") as if it was SVG.\n\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/enjalot/'>enjalot</a>'s block: <a href='http://bl.ocks.org/enjalot/8be32e6f1f32920ba841'>aframe + d3 test</a>", "created_at": "2015-12-21T19:29:07Z", "api": ["d3.scale.linear", "d3.max", "d3.select"], "updated_at": "2016-01-23T18:41:57Z", "description": "aframe + d3 test: text labels"}, {"readme": "Example for [Cooperative Brushing and Tooltips in D3](http://wrobstory.github.io/2013/11/D3-brush-and-tooltip.html). \n\nNote that the brush layer is appended *after* the data, and therefore mouseover events do not trigger the tooltip. Only when you start brushing do the tooltips appear. ", "created_at": "2013-11-24T18:19:33Z", "api": ["d3.select", "d3.mouse", "d3.scale.linear", "d3.max", "d3.svg.axis", "d3.svg.brush", "d3.helper.tooltip"], "updated_at": "2015-12-29T06:39:08Z", "description": "D3 Brush and Tooltip III"}, {"readme": "Except for the code segments that render the magnifying glass (as circle or path), this is essentially a copy of Mike Bostock's [Fisheye Distortion](http://bost.ocks.org/mike/fisheye/) example.\n\nThe motivation for this was largely aesthetical but also a bit functional. When using the Fisheye as an aid to viewing large datasets, I often find myself experimenting with the degree and radius of the distortion. In such cases, I find it helpful to see the exact reach of the distortion and then decide the best configuration for a particular dataset.", "created_at": "2014-01-26T19:02:56Z", "api": ["d3.extent", "d3.rebind", "d3.scale.category20", "d3.fisheye.circular", "d3.layout.force", "d3.select", "d3.json", "d3.mouse"], "updated_at": "2016-01-04T14:59:06Z", "description": "Encircling D3's Fisheye Distortion"}, {"readme": "", "created_at": "2014-06-10T04:27:16Z", "api": ["d3.scale.ordinal", "d3.scale.linear", "d3.svg.axis", "d3.select", "d3.max"], "updated_at": "2015-08-29T14:02:25Z", "description": "D3 with random color generator"}, {"readme": "Canvas element styling with **[d3.carto.map](https://github.com/emeeks/d3-carto-map)** does not use d3.selectAll like [SVG element styling](http://bl.ocks.org/emeeks/f8c0220c54ec8347ea95) because these aren't SVG elements. Here we see 6000+ cities between 50k and 1m population each styled based on various attributes.\n\nThis relies on using cartoLayer.markerColor() and cartoLayer.markerSize() and setting them to function based on the data. If you don't set markerColor, then it will rely on CSS styling of the associated class.\n\n[This example is also available in transform mode](http://bl.ocks.org/emeeks/e6f72fbca42e77be0eb3).", "created_at": "2014-09-09T20:07:50Z", "api": ["d3.carto.map", "d3.scale.linear", "d3.select", "d3.carto.layer.tile", "d3.carto.layer.geojson", "d3.carto.layer.csv"], "updated_at": "2015-08-29T14:06:16Z", "description": "Styling Canvas Elements - d3.carto"}, {"readme": "**Input a set of comma-delimited numbers, and press play to animate.**\n\nMy quest to understand how transitions work under the hood, part 2: animate multiple elements with different ending x-positions using [d3.interpolate](https://github.com/mbostock/d3/wiki/Transitions#interpolation) and [window.requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame).\n\nPart 1 here: [How D3 Transitions Work, Pt. 1: d3.interpolate](http://bl.ocks.org/sxywu/33bc932b850792e832f8)", "created_at": "2015-08-16T08:32:49Z", "api": ["d3.select", "d3.interpolate"], "updated_at": "2015-10-21T01:36:06Z", "description": "How D3 Transitions Work, Pt. 2: d3.interpolate with multiple elements"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/vjpgo/'>vjpgo</a>'s block: <a href='http://bl.ocks.org/vjpgo/4689130'>d3.js major minor tick style 3</a>\n\nforked from <a href='http://bl.ocks.org/ashtonburg/'>ashtonburg</a>'s block: <a href='http://bl.ocks.org/ashtonburg/60e84ea5cdffa49356e4'>d3.js major minor tick style 3</a>\n\nforked from <a href='http://bl.ocks.org/ashtonburg/'>ashtonburg</a>'s block: <a href='http://bl.ocks.org/ashtonburg/384dd445a6a7ae9f6086'>d3.js major minor tick style 3</a>", "created_at": "2016-02-18T16:23:39Z", "api": ["d3.scale.linear", "d3.select", "d3.svg.axis"], "updated_at": "2016-02-18T16:23:39Z", "description": "d3.js major minor tick style 3"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/vjpgo/'>vjpgo</a>'s block: <a href='http://bl.ocks.org/vjpgo/4689130'>d3.js major minor tick style 3</a>", "created_at": "2016-02-18T15:47:08Z", "api": ["d3.time.scale", "d3.select", "d3.svg.axis"], "updated_at": "2016-02-18T15:47:08Z", "description": "d3.js major minor tick style 3"}, {"readme": "This is a code excerpt from the book, D3 on Angular. [http://leanpub.com/d3angularjs](http://leanpub.com/d3angularjs)", "created_at": "2014-03-14T20:31:36Z", "api": ["d3.scale.category10", "d3.select", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2015-09-24T04:16:32Z", "description": "A modest real time data dashboard using Angular + D3"}, {"readme": "Quinto ejemplo del taller *Mapas web interactivos con D3.js* en el programa de las [9as Jornadas SIG Libre ](http://www.sigte.udg.edu/jornadassiglibre/programa/talleres/).\n \nEn este ejemplo se a\u00f1ade una animaci\u00f3n [al ejemplo anterior](http://bl.ocks.org/rveciana/20f120d7ab0580f9a8c5) al layout de forma que los sectores se dibujan de forma consecutiva.\n \nLos datos son de la encuesta GAD3, del 9-13 de enero de 2015. Fuente: [Wikipedia](http://es.wikipedia.org/wiki/Anexo:Sondeos_de_intenci%C3%B3n_de_voto_para_las_elecciones_generales_de_Espa%C3%B1a_de_2015) ", "created_at": "2015-02-11T08:45:59Z", "api": ["d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv", "d3.rgb", "d3.interpolate"], "updated_at": "2015-08-29T14:15:14Z", "description": "JSL 2015: Pie layout animado"}, {"readme": "This is a scatter plot of the [Iris data set](https://archive.ics.uci.edu/ml/datasets/Iris).\n\nThis is an experiment to see how far one can go in generalizing D3 visualization patterns. The main file of interest here is [reactivis.js](#reactivis.js). For example, a single code path creates all scales (x, y, size, color) and sets up their reactive dependencies. This is a proof-of-concept for a larger scale project that aims to provide a base layer for many different D3 visualizations.\n\nNotice that if you [open this in a new window](http://bl.ocks.org/curran/raw/9aafca5fba0c7fde13aa/), it responds when you resize the browser window. This is coded in such a way that the visualization size can be controlled via CSS.\n\nThe code for this is derived from [example 106](http://curran.github.io/screencasts/introToD3/examples/viewer/#/106) of the screencast [Introduction to D3.js](https://www.youtube.com/watch?v=8jvoTV54nXw).\n", "created_at": "2015-05-15T21:38:18Z", "api": ["d3.extent", "d3.svg.axis", "d3.select", "d3.scale.category10", "d3.format", "d3.csv"], "updated_at": "2015-08-29T14:21:18Z", "description": "Generalizing D3 patterns ad infinitum"}, {"readme": "This example belongs to [the presentation](rveciana.github.com/geoexamples/geoinquiets/d3js/index_en.html) made to the [OSGeo](http://www.osgeo.org/) local group in Barcelona [Geoinquiets](http://www.geoinquiets.cat/)\nThe example is an adaptation from [Mike Bostock](http://bost.ocks.org/mike/)'s [Symbol Map example](http://bl.ocks.org/mbostock/4342045)\n\nForked from <a href='http://bl.ocks.org/rveciana/'>rveciana</a>'s block: <a href='http://bl.ocks.org/rveciana/5181105'>D3 tutorial V: Adding tooltips</a> in order to retrieve relevant gist files via `rawgit`.", "created_at": "2016-04-07T15:42:17Z", "api": ["d3.scale.sqrt", "d3.geo.mercator", "d3.geo.path", "d3.select", "d3.helper.tooltip", "d3.geo.albers", "d3.mouse"], "updated_at": "2016-04-07T15:45:03Z", "description": "D3 tutorial V: Adding tooltips"}, {"readme": "## A Lesson in Binding Data\n\nIn an effort incrementally introduce complexity, data is bound one `datum` at a time with a `for` loop to blend the **declarative/functional** paradigm of D3 and the **imperative/procedural** paradigm of standard Javascript.\n\nIn this example we can see how D3's data binding functions (`data()` and `datum()`) create a closure encapsulating the state of variables at the time the data is bound.\n\n---\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/Jay-Oh-eN/'>Jay-Oh-eN</a>'s block: <a href='http://bl.ocks.org/Jay-Oh-eN/522d3842f27e2581f0d9'>Foundations of D3: Data Binding Scope</a>\n\nforked from <a href='http://bl.ocks.org/margeigh/'>margeigh</a>'s block: <a href='http://bl.ocks.org/margeigh/9d0251925a6bf6409533'>Foundations of D3: Data Binding Scope</a>", "created_at": "2016-02-26T03:29:23Z", "api": ["d3.select", "d3.selectAll"], "updated_at": "2016-02-26T03:29:23Z", "description": "Foundations of D3: Data Binding Scope"}, {"readme": "## A Lesson in Binding Data\n\nIn an effort incrementally introduce complexity, data is bound one `datum` at a time with a `for` loop to blend the **declarative/functional** paradigm of D3 and the **imperative/procedural** paradigm of standard Javascript.\n\nIn this example we can see how D3's data binding functions (`data()` and `datum()`) create a closure encapsulating the state of variables at the time the data is bound.\n\n---\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2015-12-09T01:05:50Z", "api": ["d3.select", "d3.selectAll"], "updated_at": "2015-12-09T20:30:44Z", "description": "Foundations of D3: Data Binding Scope"}, {"readme": "## D3 Dynamic Array of Tables\n\nDemonstrates the the use of D3 to manage an array of tables. Via a button, the user will cycle through several steps which will mutate the underlying array of arrays, which at each step is fed to the table **update** function. For example, tables are added and removed from the array of tables, individual rows of tables are added and removed, and individual table cells are modified. The **update** function demonstrates the enter, exit and update patterns at the div/table level as well as at the table row level. \n\nFor **bl.ocks.org** users, the script should be viewed in its own window. See the script in action [here](http://bl.ocks.org/boeric/raw/e16ad218bc241dfd2d6e/)\n\nforked from <a href='http://bl.ocks.org/boeric/'>boeric</a>'s block: <a href='http://bl.ocks.org/boeric/e16ad218bc241dfd2d6e'>D3 Dynamic Array of Tables</a>\n\nforked from <a href='http://bl.ocks.org/devssunil/'>devssunil</a>'s block: <a href='http://bl.ocks.org/devssunil/5485fa28d3fdd422930b53ab330f96e3'>D3 Dynamic Array of Tables</a>", "created_at": "2016-04-26T15:45:43Z", "api": ["d3.select", "d3.values"], "updated_at": "2016-04-26T16:12:33Z", "description": "D3 Dynamic Array of Tables"}, {"readme": "This example illustrates a simple trackball approach for rotating an orthographic globe '\nwith [D3 3.0](https://github.com/mbostock/d3/wiki/Upgrading-to-3.0).  \n\nThe idea is to express a click on the sphere in spherical coordinates with one rotation\naxis horizontal on the page, and one axis vertical.  Then when we move the mouse, we\njust rotate the underlying sphere so that the point of initial click stays underneath the\nmouse.  When the globe is oriented in its original location (i.e. rotation(0,0),\nwith the north pole at the top of the page and the equator aligned with the \nhorizontal canvas axis, it's easy, since D3's longitude rotation equals trackball\nrotation around the vertical axis, and the subsequently applied latitude rotation \ncorresponds to trackball rotation around the horizontal axis.\n\nBut when the sphere is already rotated, it's not easy to infer what the combined rotation\nshould be.  Ideally we want a way of composing two rotations, but I'm not aware that\nyou can do that currently in D3?\n\nSo I did some math (actually sagemath.org did most of it for me) to work out the product\nof the original rotation matrix plus the new trackball motion, and derived an\nequivalent single rotation would be.  This gives a more intuitive feel regardless of the\nposition of the globe.\n\nCompare with the original example I started from at \nhttp://mbostock.github.io/d3/talk/20111018/azimuthal.html\nand see what happens when you first rotate the globe so the north pole is approximately \nfacing you.  Subsequent trackball movements then become completely non-intuitive.\n\n(You can reproduce the same behavior in the original source here by uncommenting one\nof the three behaviors in the mousemove() routine.)", "created_at": "2013-06-06T13:26:18Z", "api": ["d3.geo.orthographic", "d3.select", "d3.geo.path", "d3.json", "d3.mouse", "d3.event.preventDefault"], "updated_at": "2015-12-18T03:58:53Z", "description": "D3 3D globe trackball rotation"}, {"readme": "## D3 Based Real Time Chart\n\nThe real time chart is a resuable Javascript component that accepts real time data. The chart's time domain is moving with the passage of time, which means that any data placed in the chart eventually will age out and leave the chart. In addition to the main chart, the component also manages a \"focus\" window with a viewport (d3.brush) that can moved and sized to view an arbitrary portion of the time series data. \n\nThe component adheres to the pattern described in [Towards Reusable Chart](http://bost.ocks.org/mike/chart/). \n\nThe following options are currently supported:\n\n- **width** and **height** in pixels (Number)\n- **border** (Boolean)\n- **title**, **xTitle**, **yTitle** (String)\n- **barWidth** in pixels (Number)\n\nFuture options will include:\n\n- **Scale** domain of real time data (currently a domain of [0, 100] is assumed for the y scale)\n- Use of SVG **rects, circles, paths** etc. to represent data (in addition to bars)\n\nUse the component like so:\n\n```\n// create the real time chart\nvar chart = realTimeChart()\n    .title(\"Chart Title\")\n    .yTitle(\"Y Scale\")\n    .xTitle(\"X Scale\")\n    .border(true)\n    .width(600)\n    .height(290)\n    .barWidth(1)\n    .initialData(data);\n\n// invoke the chart\nvar chartDiv = d3.select(\"#viewDiv\").append(\"div\")\n    .attr(\"id\", \"chartDiv\")\n    .call(chart);\n\n// create new data item and inject into chart\nvar now = new Date();\nvar obj = {\n  value: 50\n  time: now,\n  color: \"red\",\n  ts: now.getTime(),\n  interval: timeout\n};\n\n// send the datum to the chart\nchart.datum(obj);\n\n```\n", "created_at": "2015-09-27T02:46:29Z", "api": ["d3.scale.linear", "d3.random.normal", "d3.range", "d3.select", "d3.time.scale", "d3.svg.axis", "d3.svg.area", "d3.svg.line", "d3.svg.brush"], "updated_at": "2015-11-15T21:32:52Z", "description": "D3 Based Real Time Chart"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nThis is an example of a graphic created in Adobe Illustrator and imported into a D3 based page. This is a followup of an earlier block \"Adobe SVG to D3\". The earlier block explains more about the mechanics of bringing in a new SVG element.  \n\nThis block creates four copies of the original star graphic SVG and shows how to access each one as if it were a D3 based SVG element. The styling colors are changed and the movement of each is distinct as well as capturing mouse events for each SVG.\n\nThis graphic although simple is a good example of one that you would not want to have to code the path yourself. Very easy to do in Adobe Illustrator but very painfull to get right if you were trying to code it manually. \n", "created_at": "2015-10-17T23:21:14Z", "api": ["d3.select", "d3.xml"], "updated_at": "2015-10-17T23:21:30Z", "description": "Adobe SVG to D3 w/ Mods"}, {"readme": "D3 matrix (based on http://bost.ocks.org/mike/miserables/), and using the same data as (http://bl.ocks.org/tomshanley/raw/de3ee03f25aa9f134ecf/)\n\nIncorporates:\n\n* tabletop.js (https://github.com/jsoma/tabletop) to pull the node and link data from Google Sheets.\n* ShortestPathCalculator.js (https://github.com/julianbrowne/dijkstra) to calculate shortest path between the selected node and the others, for sorting purposes.\n\nBy selecting a service or life event, sorts the nodes by how close each node is to the selected in terms of links. Lines are drawn to delineate between each group of nodes (ie those that directly linked, those that 1 node away, and so on).\n", "created_at": "2016-01-15T03:08:12Z", "api": ["d3.select", "d3.layout.force", "d3.scale.ordinal", "d3.scale.linear", "d3.scale.category10", "d3.range", "d3.ascending", "d3.svg.line", "d3.selectAll"], "updated_at": "2016-03-29T00:32:51Z", "description": "D3 matrix, with sort and grouping"}, {"readme": "Timeline for d3 - proof-of-concept\n----------------------------------\n\nThis chart shows events, that have a defined start and/or end\nin the time continuum in form of a timeline or timechart.\nEvents can be instants (one date only) or intervals (start date\nand end date).\n\nThe timeline consists of two bands.\n\nThe upper band shows the timeline items with data within the selected timeline interval.\nThe lower band is the navigation band; it just shows the distribution of the items.\nThe numbers in the lower band show the start, the length, and the end of the selected interval, respectively.\nClick on the lower band and drag to create a brush and select an interval.\n\nClick on the brush and drag to move the interval.\nClick on the left or right border of the brush and drag to resize the interval.\nClick on the lower band outside the brush to restore the original view.\nMouseover an item to show a tooltip.\n\n\nAcknowledgements\n----------------\n\nThis work was inspired by\n\n'Simile Timeline' by 'David Fran\u00e7ois Huynh'\n(http://www.simile-widgets.org/timeline/) and\n'Swimlane Chart using d3.js' by Bill Bunkat\n(http://bl.ocks.org/bunkat/1962173).\n\n\nThe file structure\n------------------\n\nAny csv data file with the following line structure will do:\n\nstart,end,label\n...,...,...\n\nThe first line contains the field names.\nThe field names 'start', 'end', and 'label' in the first line are required.\nThe following lines contain the data.\n\nIntervals have a 'start', an 'end', and a label.\nThe following example describes the lifespan of the philosopher Kant:\n1724,1804,Kant\n\nInstants have a 'start', an EMPTY 'end', and a label.\nThe second comma is required to mark the 'end' field\nand to designate this event as a point. The following example\ngives the publication date of the 'Critique of Pure Reason' by Kant:\n1781,,Critique of Pure Reason\n\nOptional additional fields (i.e., 'description', 'image', 'link', etc.)\nare not used in this version, but will be in future versions.\n\n'start' and 'end' either conform to the ISO data format YYYY-MM-DD\nor contain full years (that is: with century).\nBC dates and dates between 0..99 AD are handled correctly.\nFor more information on 'start' and 'end' see the\ncomment of the function 'parseDate'.\n'label' ist a plain string. Example:\n\nstart,end,label\n800 BC,701 BC,Homer\n4 BC,65,Seneca\n55,135,Epictetus\n1469,1527,Machiavelli\n1781,,Critique of Pure Reason\n...\n\n\nLimitations\n-----------\n\nI have developed this version as an exercise to learn a little bit of d3\nand as a proof-of-concept for doing timelines.\n\nThis timeline doesn't look especially 'pretty'. I have chosen theses items\n(some poets and philosophers, some philosophical works) to show how a relatively\nlong time span is displayed and how BC dates are handled.\nThe dates are from the English Wikipedia\nShorter intervals make for 'nicer' timelines, as you can see for yourself,\nif you use the brush.\n\n\nCreate your own timelines\n-------------------------\n\nTo create your own timeline, you need\n\n1.  A data file (see 'The file structure' above).\n\n2.  The file 'timeline.js'; download and put into your working directory\n    or on your path.\n\n3.  The file 'timeline.css'; download and put into your working directory\n    or on your path; change settings according to your preferences.\n\n4.  Use 'index.html' (without comments) as a template\n    and put in your filenames and paths.\n     \n\nFeedback\n--------\n\nI'm still a d3 newbie. So feedback on doing things more the 'd3 way' is very welcome.\nComments, suggestions, and bug reports are welcome, too.", "created_at": "2013-05-18T06:24:15Z", "api": ["d3.csv", "d3.select", "d3.min", "d3.max", "d3.time.scale", "d3.svg.axis", "d3.svg.brush", "d3.time.format"], "updated_at": "2016-04-12T12:52:58Z", "description": "Timeline for d3 - proof-of-concept"}, {"readme": "This is part of a series of examples that describe the basic operation of \nthe [D3.js](http://d3js.org) [force layout](https://github.com/mbostock/d3/wiki/Force-Layout).\nEventually they may end up in a blog post that wraps everything together.\nIf you missed the beginning of the series, here's a link to \n[first example](http://jsdatav.is/visuals.html?id=11550728).\n\nAn [earlier example](http://jsdatav.is/visuals.html?id=83515b77c2764837aac2)\nintroduced `linkDistance` as a key parameter for force layouts. It\nsets the desired distance between any connected nodes. The force\nlayout includes an additional parameter that serves to modify the\n`linkDistance`. That parameter is `linkStrength`. The default `linkStrength`\nvalue is 1.0, which maintains the full effect of `linkDistance`.\nBy setting the value of `linkStrength` less than 1, though, the\ndistance constraint can be relaxed.\n\nIn this example the red link has a `linkStrength` of 0.1, while all the\nother links retain the default value of 1.0. Use the controls in the\nupper left to run the layout and see the effect of this reduced link\nstrength.\n\n> Note: the force that's drawing the nodes together in this case is\n`gravity`, which the [next example](http://jsdatav.is/visuals.html?id=191a8a302a363ac6a4b0)\nconsiders in more detail. The links with a default strength are able\nto resist gravity more than the red link.\n", "created_at": "2014-05-13T12:17:33Z", "api": ["d3.select", "d3.layout.force"], "updated_at": "2015-09-23T11:42:43Z", "description": "Understanding D3.js Force Layout - 7: linkStrength"}, {"readme": "", "created_at": "2015-07-31T01:59:11Z", "api": ["d3.min", "d3.max", "d3.extent"], "updated_at": "2015-08-29T14:26:19Z", "description": "d3 min, max, extent, sort"}, {"readme": "This variation of a [donut chart](/mbostock/3887193) demonstrates how to update values. Clicking on the radio buttons changes the displayed metric.\n\nNext: [Animation](/mbostock/1346410)", "created_at": "2011-11-07T22:23:54Z", "api": ["d3.scale.category20", "d3.layout.pie", "d3.svg.arc", "d3.select", "d3.tsv", "d3.selectAll"], "updated_at": "2016-02-09T00:49:17Z", "description": "Pie Chart Update, I"}, {"readme": "This example demonstrates using a data-join with a key function to update a pie chart.\n\nNext: [Animated Data-Join](/mbostock/5682158)<br>\nPrevious: [Missing Data](/mbostock/5681842)\n", "created_at": "2013-05-30T23:06:16Z", "api": ["d3.scale.category20", "d3.layout.pie", "d3.svg.arc", "d3.select", "d3.tsv", "d3.nest"], "updated_at": "2016-02-09T02:04:47Z", "description": "Pie Chart Update, IV"}, {"readme": "", "created_at": "2014-01-14T21:58:36Z", "api": ["d3.select", "d3.layout.pie", "d3.svg.arc", "d3.range", "d3.scale.linear", "d3.interpolate"], "updated_at": "2016-01-03T06:59:13Z", "description": ""}, {"readme": "", "created_at": "2011-10-28T22:14:57Z", "api": ["d3.selectAll", "d3.ascending"], "updated_at": "2016-02-09T00:45:55Z", "description": "D3 and Custom Data Attributes"}, {"readme": "This example belongs to [the presentation](rveciana.github.com/geoexamples/geoinquiets/d3js/index_en.html) made to the [OSGeo](http://www.osgeo.org/) local group in Barcelona [Geoinquiets](http://www.geoinquiets.cat/)\nThe example is an adaptation from [Mike Bostock](http://bost.ocks.org/mike/)'s [Symbol Map example](http://bl.ocks.org/mbostock/4342045)", "created_at": "2013-03-17T10:45:38Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.select", "d3.json", "d3.geo.albers"], "updated_at": "2015-12-15T01:38:58Z", "description": "D3 tutorial III: Projection transition"}, {"readme": "This example belongs to [the presentation](rveciana.github.com/geoexamples/geoinquiets/d3js/index_en.html) made to the [OSGeo](http://www.osgeo.org/) local group in Barcelona [Geoinquiets](http://www.geoinquiets.cat/)\nThe example is an adaptation from [Mike Bostock](http://bost.ocks.org/mike/)'s [Symbol Map example](http://bl.ocks.org/mbostock/4342045)", "created_at": "2013-03-17T11:10:04Z", "api": ["d3.scale.sqrt", "d3.geo.mercator", "d3.geo.path", "d3.select", "d3.geo.albers"], "updated_at": "2015-12-15T01:39:01Z", "description": "D3 tutorial IV: Adding points"}, {"readme": "", "created_at": "2012-07-06T09:14:13Z", "api": ["d3.time.format", "d3.csv", "d3.nest"], "updated_at": "2015-10-06T21:58:09Z", "description": "d3 sortKeys in nest function"}, {"readme": "", "created_at": "2015-02-18T06:51:56Z", "api": ["d3.ns.qualify", "d3.select"], "updated_at": "2015-08-29T14:15:41Z", "description": "d3-jetpack with transitioning translate "}, {"readme": "Playing with lines\n==================\n\nType two integers per line in the text area, and a line will be drawn on the right.\n", "created_at": "2015-09-26T20:41:58Z", "api": ["d3.select", "d3.selectAll", "d3.svg.line"], "updated_at": "2015-09-26T20:42:34Z", "description": "path from numbers in d3"}, {"readme": "", "created_at": "2015-08-27T04:00:32Z", "api": ["d3.format", "d3.layout.pack", "d3.select", "d3.json"], "updated_at": "2015-08-27T04:04:50Z", "description": "D3 pack layout margin demo"}, {"readme": "This animated bar chart is adapted from [Mike Bostock's sample bar chart](http://bl.ocks.org/mbostock/3885304) to allow redrawing and animated transitions.\n", "created_at": "2014-08-29T23:07:06Z", "api": ["d3.scale.ordinal", "d3.scale.linear", "d3.svg.axis", "d3.select", "d3.tsv", "d3.max"], "updated_at": "2016-04-21T08:36:44Z", "description": "D3 Bar Chart Update Pattern"}, {"readme": "Implements constrained zooming of an image put onto an HTML5 Canvas.", "created_at": "2013-12-19T22:07:12Z", "api": ["d3.scale.linear", "d3.svg.axis", "d3.behavior.zoom", "d3.select"], "updated_at": "2016-03-18T23:52:37Z", "description": "D3 Constrained Zoom Canvas Image"}, {"readme": "", "created_at": "2015-07-20T11:03:24Z", "api": ["d3.dispatch", "d3.select", "d3.selectAll", "d3.scale.threshold", "d3.rgb", "d3.geo.path", "d3.timer", "d3.format", "d3.geo.albers"], "updated_at": "2015-09-28T15:40:21Z", "description": "canvas-based-wind-with-d3"}, {"readme": "", "created_at": "2012-07-08T11:41:53Z", "api": ["d3.min", "d3.select", "d3.range", "d3.geom.voronoi", "d3.geom.polygon", "d3.mouse", "d3.selectAll"], "updated_at": "2015-10-06T23:37:55Z", "description": "d3 bootstrap popovers (exhibit A)"}, {"readme": "", "created_at": "2013-12-02T10:24:38Z", "api": ["d3.select", "d3.scale.sqrt", "d3.json", "d3.selectAll", "d3.csv"], "updated_at": "2015-12-30T00:09:09Z", "description": "SK-BB '13: D3 + Leaflet"}, {"readme": "Working from Mike's [tiles-clipped-to-a-polygon example](http://bl.ocks.org/mbostock/4150951), I extended it for a unique tileset in each of several polygons.", "created_at": "2013-12-14T03:26:29Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.geo.tile", "d3.select", "d3.json"], "updated_at": "2015-12-31T07:39:11Z", "description": "Tour de Stamen in D3"}, {"readme": "", "created_at": "2014-01-03T21:08:36Z", "api": ["d3.select"], "updated_at": "2016-01-02T03:49:16Z", "description": "simulando tabs (con botones) usando d3.js"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)  from this original jsfiddle:  http://jsfiddle.net/Qh9X5/154/", "created_at": "2015-11-10T17:57:17Z", "api": ["d3.scale.category20", "d3.layout.pie", "d3.svg.arc", "d3.select", "d3.values"], "updated_at": "2015-11-10T18:09:02Z", "description": "Concentric rings with pie layout"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-05-16T02:43:46Z", "api": ["d3.select", "d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.interpolate"], "updated_at": "2016-05-16T02:43:46Z", "description": "fresh block"}, {"readme": "", "created_at": "2012-12-17T21:30:08Z", "api": ["d3.select"], "updated_at": "2015-12-09T20:18:37Z", "description": "Something about d3 I did not understand."}, {"readme": "", "created_at": "2013-09-25T14:26:22Z", "api": ["d3.select", "d3.max", "d3.min", "d3.scale.linear"], "updated_at": "2015-12-23T21:59:52Z", "description": "HTML: D3 scatter, data from cartodb"}, {"readme": "", "created_at": "2014-01-19T07:07:06Z", "api": [], "updated_at": "2016-01-03T18:19:13Z", "description": "D3.js\u306e\u3072\u306a\u5f62"}, {"readme": "This is pretty much just stealing http://bl.ocks.org/mbostock/3757110 which I want to hack to make some visualizations around the black sea (Sochi) region highlighting non-olympic news.", "created_at": "2014-02-08T00:09:22Z", "api": ["d3.geo.azimuthalEquidistant", "d3.geo.path", "d3.geo.graticule", "d3.select", "d3.json"], "updated_at": "2015-08-29T13:56:10Z", "description": "Start of Olympic D3 map hack"}, {"readme": "", "created_at": "2014-07-24T13:00:35Z", "api": ["d3.select", "d3.hsl", "d3.mouse", "d3.selection.prototype.transition.bind"], "updated_at": "2016-04-22T07:11:24Z", "description": "3D Surface Plot in D3.js"}, {"readme": "", "created_at": "2015-01-28T18:07:36Z", "api": ["d3.geo.albers", "d3.select", "d3.json"], "updated_at": "2015-08-29T14:14:18Z", "description": "Morph Montana into Idaho with D3"}, {"readme": "", "created_at": "2011-12-19T22:51:31Z", "api": ["d3.select", "d3.svg.line", "d3.svg.arc"], "updated_at": "2016-04-18T13:17:11Z", "description": "google style gauges using javascript d3.js"}, {"readme": "Crude implementation of ACO in D3js, based on the awesome work of [Joel Wenzel et al](http://joel.inpointform.net/software-development/traveling-salesman-ant-colony-optimization-javascript-solution/).", "created_at": "2014-06-28T10:09:52Z", "api": ["d3.select", "d3.behavior.drag"], "updated_at": "2015-12-20T16:40:03Z", "description": "Ant Colony Optimization in D3.js"}, {"readme": "[Kufic calligraphy](http://www.kufic.info/default.htm) has impressed me since long ago. This example is from the walls of the [Gudi Khatun Mausoleum](http://en.wikipedia.org/wiki/Garabaghlar_Mausoleum) in [Nakhchivan, Azerbaijan](https://maps.google.es/maps?q=Nakhchivan&hl=ca&ie=UTF8&sll=38.377416,27.132204&sspn=0.026847,0.038581&t=h&hnear=Nax%C3%A7%C4%B1van,+Nakhchivan+Autonomous+Republic,+Azerbaidjan&z=13).\n\n![Gudi Khatun Mausoleum](http://static.panoramio.com/photos/large/2149671.jpg \"Gudi Khatun\")\n\n\nThe text is animated in the correct order to understand how the words are ordered. The meaning of the text is\n> There is no God but God, and Muhammad is His prophet. May God bless him.\n\nFirst, I made the SVG image from the pictures I found. The elements must be lines so they can be animated this way. That's why kufic calligraphy is good for the example, since all the strokes have the same width. \n\nOnce the SVG was made, I rotated and scaled, and added to the HTML. Every path was assigned an id of the form *id=\"p14\"*, where the number has to go in the order we want to draw the strokes.\n\nThe function *drawStroke* selects the stroke and changes the *stroke-dashoffset* as shown in [this example](http://www.alolo.co/blog/2013/11/14/progressively-draw-svg-paths-with-d3js).\n\n\n\n", "created_at": "2013-11-26T19:08:21Z", "api": ["d3.select"], "updated_at": "2015-12-29T11:29:11Z", "description": "Animated arabic kufic calligraphy with D3"}, {"readme": "", "created_at": "2014-01-14T21:42:43Z", "api": ["d3.select", "d3.layout.pie", "d3.svg.arc", "d3.range"], "updated_at": "2016-01-03T06:59:07Z", "description": ""}, {"readme": "How to use [d3-tip](https://github.com/caged/d3-tip) with d3's [simple bar chart example](http://bl.ocks.org/mbostock/3885304).\n\n\nforked from <a href='http://bl.ocks.org/Caged/'>Caged</a>'s block: <a href='http://bl.ocks.org/Caged/6476579'>Using d3-tip to add tooltips to a d3 bar chart</a>", "created_at": "2016-04-04T18:50:08Z", "api": ["d3.format", "d3.scale.ordinal", "d3.scale.linear", "d3.svg.axis", "d3.tip", "d3.select", "d3.tsv", "d3.max"], "updated_at": "2016-04-04T18:50:08Z", "description": "Using d3-tip to add tooltips to a d3 bar chart"}, {"readme": "This is a code excerpt from the book, D3 on Angular. http://leanpub.com/d3angularjs", "created_at": "2014-03-14T19:20:19Z", "api": ["d3.json", "d3.scale.category10", "d3.select", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2015-08-29T13:57:22Z", "description": "Loading data into Angular, Part III"}, {"readme": "A first draft of [**d3.svg.circularBrush**](https://github.com/emeeks/d3.svg.circularbrush) which allows you to select cyclical ranges. It's patterned after d3.svg.brush, so you drag the resize handles to change the extent or drag the extent to move it around the selection surface. In this case it's mapped to an array of 24 values (1-24), each represented in a pie arc, thus implying a clock. By dragging and resizing the brush, you select the corresponding arcs.\n\nCyclical time is an obvious application for a brush like this, allowing you to select a period of time such as \"between 10PM and 2AM\" to filter your results by.\n", "created_at": "2014-12-30T20:20:57Z", "api": ["d3.dispatch", "d3.svg.arc", "d3.select", "d3.scale.linear", "d3.rebind", "d3.mouse", "d3.svg.circularbrush", "d3.layout.pie", "d3.selectAll"], "updated_at": "2016-03-17T02:16:16Z", "description": "Circular Brush 1"}, {"readme": "", "created_at": "2013-10-14T20:39:38Z", "api": ["d3.svg.arc", "d3.layout.pie", "d3.select"], "updated_at": "2015-12-25T13:09:23Z", "description": "Chart"}, {"readme": "So fun, right? But think twice before you use gratuitous enter animations; they can be annoying! The motion is distracting if you\u2019re reading text elsewhere on the page. And, if you\u2019re looking at the visualization, the animation forces you to wait. Instead, use animation to facilitate by making it easier to follow data across views, or as a form of visual explanation. For more details, read [Object Constancy](http://bost.ocks.org/mike/constancy/).", "created_at": "2012-12-19T23:21:34Z", "api": ["d3.range", "d3.scale.category20", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.interpolate"], "updated_at": "2016-02-09T02:12:20Z", "description": "The Amazing Pie"}, {"readme": "", "created_at": "2013-01-23T05:29:58Z", "api": ["d3.scale.ordinal", "d3.scale.linear", "d3.svg.arc", "d3.layout.pie", "d3.keys", "d3.values", "d3.select"], "updated_at": "2015-12-11T12:39:00Z", "description": "Regional breakdowns by month (CartoDB + D3)"}, {"readme": "This is a code excerpt from the book, D3 on Angular. http://leanpub.com/d3angularjs", "created_at": "2014-03-13T20:23:44Z", "api": ["d3.json", "d3.scale.category10", "d3.select", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2015-08-29T13:57:21Z", "description": "Loading data into Angular, Part II"}, {"readme": "Experimenting with transformations and d3 geo stuff in general.  I like the way the north pole ", "created_at": "2014-06-06T05:55:07Z", "api": ["d3.geo.gnomonic", "d3.geo.path", "d3.geo.graticule", "d3.select", "d3.json", "d3.selectAll"], "updated_at": "2015-08-29T14:02:17Z", "description": "Basic d3 Animations gnomic south pole"}, {"readme": "This is a code excerpt from the book, D3 on Angular. [http://leanpub.com/d3angularjs](http://leanpub.com/d3angularjs)", "created_at": "2014-03-13T19:32:55Z", "api": ["d3.scale.category10", "d3.select", "d3.layout.pie", "d3.svg.arc", "d3.json"], "updated_at": "2015-08-29T13:57:21Z", "description": "Loading data into Angular, Part I"}, {"readme": "This is a simple example of implimenting an HTML input using a `<range>` input tag and using that to adjust a d3.js drawn svg element (a circle).\n\nIt is used as an example and described in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).", "created_at": "2014-04-14T09:42:35Z", "api": ["d3.select"], "updated_at": "2015-08-29T13:59:20Z", "description": "Linking HTML input and d3.js"}, {"readme": "This is a code excerpt from the book, D3 on Angular. http://leanpub.com/d3angularjs", "created_at": "2014-03-14T19:55:52Z", "api": ["d3.scale.category10", "d3.select", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2015-08-29T13:57:22Z", "description": "Loading data into Angular using the $http service"}, {"readme": "This is a simple d3.js tree diagram, arranged so that the tree is vertical, as used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is derived from the Mike Bostock [Collapsible tree example](http://bl.ocks.org/mbostock/4339083) but it is a VERY cut down version without the ability to update (collapse).", "created_at": "2014-01-08T23:42:30Z", "api": ["d3.layout.tree", "d3.svg.diagonal", "d3.select"], "updated_at": "2016-01-18T19:46:00Z", "description": "Simple vertical d3.js tree diagram "}, {"readme": "Using d3.js and TopoJson to draw the map of Tunisia. Done by Mohamed Ali Jamaoui. To know more about Tunisia check this Wiki http://en.wikipedia.org/wiki/Tunisia  ", "created_at": "2014-01-31T14:16:07Z", "api": ["d3.geo.path", "d3.select", "d3.json", "d3.geo.bounds", "d3.sum", "d3.geo.mercator"], "updated_at": "2015-08-29T13:55:52Z", "description": "Map of Tunisia with d3.js "}, {"readme": "This is a simple line graph designed to allow investigation of aspects of using d3.js and is used as a teaching aid.\n\nIt is the baseline example graph used in the [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks) book.\n\nEdit: June 2014\n\nI am going through a process of updating the code resources for the book and the latest (but not particularly different) example of this graph is [here](http://bl.ocks.org/d3noob/b3ff6ae1c120eea654b5).", "created_at": "2012-12-30T19:02:34Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-04-25T20:47:55Z", "description": "Simple line graph in d3.js"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/vjpgo/'>vjpgo</a>'s block: <a href='http://bl.ocks.org/vjpgo/4689130'>d3.js major minor tick style 3</a>\n\nforked from <a href='http://bl.ocks.org/ashtonburg/'>ashtonburg</a>'s block: <a href='http://bl.ocks.org/ashtonburg/60e84ea5cdffa49356e4'>d3.js major minor tick style 3</a>\n\nforked from <a href='http://bl.ocks.org/ashtonburg/'>ashtonburg</a>'s block: <a href='http://bl.ocks.org/ashtonburg/384dd445a6a7ae9f6086'>d3.js major minor tick style 3</a>\n\nforked from <a href='http://bl.ocks.org/ashtonburg/'>ashtonburg</a>'s block: <a href='http://bl.ocks.org/ashtonburg/4384949715de645a77ef'>d3.js major minor tick style 3</a>", "created_at": "2016-02-18T16:23:42Z", "api": ["d3.scale.linear", "d3.select", "d3.svg.axis"], "updated_at": "2016-02-18T17:14:02Z", "description": "d3.js major minor tick style 3"}, {"readme": "Without modifying the information in genes.json, use D3 to construct a pie chart that shows the relative fraction of genes in the forward and reverse directions. Your code must dynamically generate the pie chart from the data. In other words, if I modify the genes.json data file, the pie chart must update automatically. (15 points)\n\nforked from <a href='http://bl.ocks.org/scresawn/'>scresawn</a>'s block: <a href='http://bl.ocks.org/scresawn/53fe9d373ca3b3e20632f69c5169a59d'>final exam question 2</a>", "created_at": "2016-05-05T13:31:50Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.csv"], "updated_at": "2016-05-05T13:31:52Z", "description": "final exam question 2"}, {"readme": "", "created_at": "2015-05-24T11:23:46Z", "api": ["d3.csv", "d3.layout.pie", "d3.svg.arc", "d3.select", "d3.interpolate"], "updated_at": "2015-08-29T14:21:48Z", "description": "Pie layout"}, {"readme": "\n\nforked from <a href='http://bl.ocks.org/vjpgo/'>vjpgo</a>'s block: <a href='http://bl.ocks.org/vjpgo/4689130'>d3.js major minor tick style 3</a>", "created_at": "2016-02-18T17:10:13Z", "api": ["d3.scale.linear", "d3.svg.axis", "d3.select"], "updated_at": "2016-02-18T17:10:14Z", "description": "d3.js major minor tick style 3"}, {"readme": "Answer to a [question on stackoverflow](http://stackoverflow.com/questions/14646656/drawing-already-projected-geojson-map-in-d3-js). I used the answers to [another question](http://stackoverflow.com/questions/14492284/center-a-map-in-d3-given-a-geojson-object) to centre and scale the map", "created_at": "2013-04-08T11:19:43Z", "api": ["d3.select", "d3.json", "d3.geo.projection", "d3.geo.path"], "updated_at": "2015-12-15T22:49:58Z", "description": "Identity projection of map in d3.js"}, {"readme": "[Data from the World Bank](http://data.worldbank.org/data-catalog) ([download](http://databank.worldbank.org/databank/download/POP.csv)). Uses [d3js](http://d3js.org/).", "created_at": "2012-11-30T23:35:43Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.select", "d3.format", "d3.csv"], "updated_at": "2015-10-13T10:07:59Z", "description": "Country Populations"}, {"readme": "## A Lesson in Binding Data\n\nIn an effort incrementally introduce complexity, data is bound one `datum` at a time with a `for` loop to blend the **declarative/functional** paradigm of D3 and the **imperative/procedural** paradigm of standard Javascript.\n\nIn this example we can see how D3's data binding functions (`data()` and `datum()`) create a closure encapsulating the state of variables at the time the data is bound.\n\n---\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/Jay-Oh-eN/'>Jay-Oh-eN</a>'s block: <a href='http://bl.ocks.org/Jay-Oh-eN/522d3842f27e2581f0d9'>Foundations of D3: Data Binding Scope</a>", "created_at": "2016-02-26T03:26:04Z", "api": ["d3.select", "d3.selectAll"], "updated_at": "2016-02-26T03:26:04Z", "description": "Foundations of D3: Data Binding Scope"}, {"readme": "## A Lesson in Binding Data\n\nIn an effort incrementally introduce complexity, data is bound one `datum` at a time with a `for` loop to blend the **declarative/functional** paradigm of D3 and the **imperative/procedural** paradigm of standard Javascript.\n\nIn this example we can see how D3's data binding functions (`data()` and `datum()`) create a closure encapsulating the state of variables at the time the data is bound.\n\n---\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/Jay-Oh-eN/'>Jay-Oh-eN</a>'s block: <a href='http://bl.ocks.org/Jay-Oh-eN/522d3842f27e2581f0d9'>Foundations of D3: Data Binding Scope</a>\n\nforked from <a href='http://bl.ocks.org/margeigh/'>margeigh</a>'s block: <a href='http://bl.ocks.org/margeigh/9d0251925a6bf6409533'>Foundations of D3: Data Binding Scope</a>\n\nforked from <a href='http://bl.ocks.org/margeigh/'>margeigh</a>'s block: <a href='http://bl.ocks.org/margeigh/201b1e8e5a25dfcf76d4'>Foundations of D3: Data Binding Scope</a>\n\nforked from <a href='http://bl.ocks.org/margeigh/'>margeigh</a>'s block: <a href='http://bl.ocks.org/margeigh/26b6602160cd14c7e143'>Foundations of D3: Data Binding Scope</a>", "created_at": "2016-02-26T03:41:33Z", "api": ["d3.select", "d3.selectAll"], "updated_at": "2016-02-26T03:41:33Z", "description": "Foundations of D3: Data Binding Scope"}, {"readme": "This is a code excerpt from the book D3 on Angular. [http://leanpub.com/d3angularjs](http://leanpub.com/d3angularjs)\n\nThe data was scraped from Wikipedia on 3/15/2014:  [https://en.wikipedia.org/wiki/List_of_The_Walking_Dead_episodes](https://en.wikipedia.org/wiki/List_of_The_Walking_Dead_episodes)", "created_at": "2014-03-16T23:22:26Z", "api": ["d3.scale.category10", "d3.csv", "d3.select", "d3.scale.linear", "d3.format", "d3.time.format", "d3.svg.axis", "d3.extent", "d3.max"], "updated_at": "2015-08-29T13:57:26Z", "description": "Using Angular expressions for D3 accessors"}, {"readme": "# Programmatically Control a d3 brush\nForked from Mike Bostock's [focus+context zoom gist](https://gist.github.com/mbostock/1667367) to demonstrate how we can drive a d3 brush with code.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>anybody know how to brush with code in <a href=\"https://twitter.com/hashtag/d3js?src=hash\">#d3js</a>?</p>&mdash; klr (@timelyportfolio) <a href=\"https://twitter.com/timelyportfolio/status/509701031585148928\">September 10, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nSo I found [this discussion](https://groups.google.com/forum/#!topic/d3-js/vNaR-vJ9hMg), but I could not find an example demonstrating the steps proposed by Athan Reines.\n\n<pre>\nFor auto-redraw such that the focus of a 1D brush matches the graphed domain, you need to do as follows:\n\n(1) Apply the brush scale to the graphed domain (i.e., the brush extent) --> store in var brushExtent; (units: pixels)\n(2) Within the brush element (class='brush'), select the <rect> with class='extent'.\n(3) If the brush is horizontal (i.e., for the x-axis), set the 'x' attribute to the first value in brushExtent. This moves the start position of the focus <rect> to match the graphed domain. If the brush is vertical (i.e., for the y-axis), set the 'y' attribute to the second value in brushExtent.\n(4) Next, set the 'width' attribute of the extent to brushExtent[1] - brushExtent[0]. The end of the brush focus is brushExtent[1], but the length of the focus is this minus the offset introduced by brushExtent[0]. (If a y-axis brush, switch [0] and [1]).\n\n(*) The extent should now programmatically match the graphed domain.\n\nI use this procedure as part of a resize function. Hope this works. \n\n-KG\n</pre>\n\nI do not follow the steps exactly.  Here is the code that drives our brush when a button is clicked.\n\n```\n  function drawBrush() {\n    // our year will this.innerText\n    console.log(this.innerText)\n\n    // define our brush extent to be begin and end of the year\n    brush.extent([new Date(this.innerText + '-01-01'), new Date(this.innerText + '-12-31')])\n\n    // now draw the brush to match our extent\n    // use transition to slow it down so we can see what is happening\n    // remove transition so just d3.select(\".brush\") to just draw\n    brush(d3.select(\".brush\").transition());\n\n    // now fire the brushstart, brushmove, and brushend events\n    // remove transition so just d3.select(\".brush\") to just draw\n    brush.event(d3.select(\".brush\").transition().delay(1000))\n  }\n```\n\n<hr/>\n### Original Readme.md\nThis examples demonstrates how to use D3's brush component to implement focus + context zooming. Click and drag in the small chart below to pan or zoom.\n\nforked from <a href='http://bl.ocks.org/timelyportfolio/'>timelyportfolio</a>'s block: <a href='http://bl.ocks.org/timelyportfolio/5c136de85de1c2abb6fc'>demo programmatic control of a d3 brush</a>", "created_at": "2016-02-10T12:44:41Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.brush", "d3.svg.area", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-02-10T12:44:42Z", "description": "demo programmatic control of a d3 brush"}, {"readme": "# Programmatically Control a d3 brush\nForked from Mike Bostock's [focus+context zoom gist](https://gist.github.com/mbostock/1667367) to demonstrate how we can drive a d3 brush with code.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>anybody know how to brush with code in <a href=\"https://twitter.com/hashtag/d3js?src=hash\">#d3js</a>?</p>&mdash; klr (@timelyportfolio) <a href=\"https://twitter.com/timelyportfolio/status/509701031585148928\">September 10, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nSo I found [this discussion](https://groups.google.com/forum/#!topic/d3-js/vNaR-vJ9hMg), but I could not find an example demonstrating the steps proposed by Athan Reines.\n\n<pre>\nFor auto-redraw such that the focus of a 1D brush matches the graphed domain, you need to do as follows:\n\n(1) Apply the brush scale to the graphed domain (i.e., the brush extent) --> store in var brushExtent; (units: pixels)\n(2) Within the brush element (class='brush'), select the <rect> with class='extent'.\n(3) If the brush is horizontal (i.e., for the x-axis), set the 'x' attribute to the first value in brushExtent. This moves the start position of the focus <rect> to match the graphed domain. If the brush is vertical (i.e., for the y-axis), set the 'y' attribute to the second value in brushExtent.\n(4) Next, set the 'width' attribute of the extent to brushExtent[1] - brushExtent[0]. The end of the brush focus is brushExtent[1], but the length of the focus is this minus the offset introduced by brushExtent[0]. (If a y-axis brush, switch [0] and [1]).\n\n(*) The extent should now programmatically match the graphed domain.\n\nI use this procedure as part of a resize function. Hope this works. \n\n-KG\n</pre>\n\nI do not follow the steps exactly.  Here is the code that drives our brush when a button is clicked.\n\n```\n  function drawBrush() {\n    // our year will this.innerText\n    console.log(this.innerText)\n\n    // define our brush extent to be begin and end of the year\n    brush.extent([new Date(this.innerText + '-01-01'), new Date(this.innerText + '-12-31')])\n\n    // now draw the brush to match our extent\n    // use transition to slow it down so we can see what is happening\n    // remove transition so just d3.select(\".brush\") to just draw\n    brush(d3.select(\".brush\").transition());\n\n    // now fire the brushstart, brushmove, and brushend events\n    // remove transition so just d3.select(\".brush\") to just draw\n    brush.event(d3.select(\".brush\").transition().delay(1000))\n  }\n```\n\n<hr/>\n### Original Readme.md\nThis examples demonstrates how to use D3's brush component to implement focus + context zooming. Click and drag in the small chart below to pan or zoom.", "created_at": "2014-09-10T19:06:52Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.brush", "d3.svg.area", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-04-26T10:57:54Z", "description": "demo programmatic control of a d3 brush"}, {"readme": "A difference chart of presidential approval ratings of the Obama and Bush (43) administrations. Difference charts graphically encode the variance between two time series (typically) coloring the variance to indicate which time series has a higher value during that period. All the examples I've seen of difference charts in D3 use clipping or convoluted mechanisms to create the difference area.\n\nHere's an example that just uses d3.svg.area and defines the y value as the maximum of the two time series points at that position and the y0 value as whichever time series you're using as the baseline. To give the chart the expected outlines, d3.svg.line is used to draw each time series on top of the difference areas.\n\nThis chart was used in my [exploration of figure/ground and metastability in data visualization](http://emeeks.github.io/gestaltdataviz/section4.html).\n\nforked from <a href='http://bl.ocks.org/emeeks/'>emeeks</a>'s block: <a href='http://bl.ocks.org/emeeks/02d6acaed240ba0a504e'>Simple Difference Chart with d3.svg.area</a>", "created_at": "2015-09-08T07:51:33Z", "api": ["d3.scale.linear", "d3.select", "d3.json", "d3.extent", "d3.svg.axis", "d3.svg.line", "d3.svg.area"], "updated_at": "2015-09-08T07:51:33Z", "description": "Simple Difference Chart with d3.svg.area"}, {"readme": "This variation of a [donut chart](/mbostock/3887193) demonstrates how to update values. Clicking on the radio buttons changes the displayed metric.\n\nNext: [Animation](/mbostock/1346410)", "created_at": "2013-06-17T18:06:10Z", "api": ["d3.scale.category20", "d3.layout.pie", "d3.svg.arc", "d3.select", "d3.tsv", "d3.selectAll"], "updated_at": "2015-12-18T14:39:13Z", "description": ""}, {"readme": "This variation of a [donut chart](/mbostock/3887193) demonstrates how to update values. Clicking on the radio buttons changes the displayed metric.\n\nNext: [Animation](/mbostock/1346410)\n\nforked from <a href='http://bl.ocks.org/mbostock/'>mbostock</a>'s block: <a href='http://bl.ocks.org/mbostock/1346395'>Pie Chart Update, I</a>", "created_at": "2016-05-12T18:05:08Z", "api": ["d3.scale.category20", "d3.layout.pie", "d3.svg.arc", "d3.select", "d3.tsv", "d3.selectAll"], "updated_at": "2016-05-12T18:05:09Z", "description": "Pie Chart Update, I"}, {"readme": "Simple Backbone + D3.js + Crossfilter example", "created_at": "2013-12-10T03:58:39Z", "api": ["d3.dispatch", "d3.scale.ordinal", "d3.scale.linear", "d3.max", "d3.svg.axis", "d3.format", "d3.select", "d3.rebind", "d3.custom.barChart"], "updated_at": "2015-12-30T21:09:13Z", "description": "backbone with d3.js and crossfilter"}, {"readme": "## Force Directed Graph with self sorting nodes  \n  The nodes arrange themselves by size, with the larger nodes migrating toward the center.\n### Features  \n  - **_<a id=\"metrics\">Metrics display and inputs</a>_**  \n  The _metrics panel_ across the top of the svg element gives a live display of the layout state.  The inputs on the left allow for the number of nodes and the force gravity and the friction to be adjusted live.  The current `alpha` value for the layout is displayed along with instantaneous and averaged tick time and the average calculation rate of the layout.  Changing any of the inputs re-starts the layout. \n  - _**<a id=\"gravity\">Accelerated annealing</a>**_  \n  The annealing calc is done every tick but, until alpha drops below 0.05, the viz is only updated every nth tick (n is currently 4).  This delivers significant reductions in the time to reach equilibrium (roughly a factor of 2). \n  - **_<a id=\"force\">Force dynamics</a>_**  \n  The force dynamics are a function of alpha, with two phases.  The initial phase has zero charge, low gravity and low damping.  This is designed to maximise mixing and sorting.  The second phase has a higher gravity and a large, negative charge and much higher damping, this is designed to clean up and stabilise the presentation of the nodes. \n  - **_<a id=\"collisions\">Controlling shape</a>_**  \nIf the nodes are all created on [0,0], then a circular shape results but it tends to be asymmetrical, with most of the smaller nodes thrown to one side.  This is due to extreme sensitivity to the distance from the center of the gravity field.  \n\n   ![](https://rawgit.com/cool-Blue/37d16cd71dd52bd655b4/raw/827ca53c2af0ccb7f66dc9a00d3aa8c998c38ed6/asymsort.png)\n\n    By creating the nodes on two points (randomly biased between the two) not only is the shape controlled but the efficiency of the sorting is markedly improved.  \n\n   ![](https://rawgit.com/cool-Blue/37d16cd71dd52bd655b4/raw/08e12d8eaf879165656e7d67f4716840d161a067/controlledshape.png)  \n    \n\n  - **_<a id=\"collisions\">Collisions between nodes</a>_**  \n  Based on [this](http://bl.ocks.org/mbostock/3231298) example but enhanced to sort the radial position of the nodes based on size, with larger nodes closer to the center.  Every collision is used as an opportunity to correct the relative positions. If they are out of position then the radial ordinates of the colliding nodes (in polar coordinates) are swapped.  The sorting efficiency is therefore reliant on good mixing in the collisions.  In order to maximise the mixing, the nodes are all created at the same point in the center of the graph.  When the nodes are swapped, the velocity of the bigger node is preserved while the smaller node is accelerated.  Thus, the sorting efficiency is enhanced because the smaller nodes are flung out from the collision point.  The mass is calculated assuming the nodes are spheres, using  r<sup>3</sup>, and the rebounds calculated according to relative \"mass\".  \n\n### d3 features  used\n  1.  [d3.layout.force](https://github.com/mbostock/d3/wiki/API-Reference#force)\n  2.  [Ordinal Scales](https://github.com/mbostock/d3/wiki/Ordinal-Scales)\n  1.  [d3.format](https://github.com/mbostock/d3/wiki/Formatting#d3_format)\n  1.  [d3.range](https://github.com/mbostock/d3/wiki/Arrays#d3_range)\n  1.  [d3.geom.quadtree](https://github.com/mbostock/d3/wiki/Quadtree-Geom)  \n  ", "created_at": "2015-09-02T20:20:23Z", "api": ["d3.select", "d3.format", "d3.scale.linear", "d3.layout.force", "d3.max", "d3.svg.axis", "d3.scale.ordinal", "d3.range", "d3.layout.histogram", "d3.geom.quadtree", "d3.scale.category10"], "updated_at": "2015-09-05T09:33:11Z", "description": "self sorting nodes in d3 fdg IV"}, {"readme": "This example creates a fixed network graph with dynamic labels using d3.js. The network layout and placement of the nodes and edges was calculated in Gephi and then exported as the graph.json file.\n\nThis was inspired from these gists by Mike Bostock: [Force-Directed Graph](http://bl.ocks.org/mbostock/1021953), [Multi-Foci Force Layout](http://bl.ocks.org/mbostock/1021953)", "created_at": "2014-03-13T10:59:52Z", "api": ["d3.select", "d3.json", "d3.layout.force"], "updated_at": "2015-08-29T13:57:20Z", "description": "Gephi + d3.js. Fixed network, dynamic labels."}, {"readme": "Please note, data will be randomised until December 2014. It is based on Ipsos MORI's long term Issues Index survey 1974 - 2014.  \n\nforked from <a href='http://bl.ocks.org/DStruths/'>DStruths</a>'s block: <a href='http://bl.ocks.org/DStruths/9c042e3a6b66048b5bd4'>d3.js Multi-series line chart interactive</a>", "created_at": "2016-02-24T16:16:20Z", "api": ["d3.time.format", "d3.bisector", "d3.time.scale", "d3.scale.linear", "d3.scale.ordinal", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.tsv", "d3.keys", "d3.extent", "d3.max", "d3.svg.brush", "d3.svg.area", "d3.mouse"], "updated_at": "2016-02-24T16:16:20Z", "description": "d3.js Multi-series line chart interactive"}, {"readme": "", "created_at": "2013-09-06T06:21:18Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.select"], "updated_at": "2015-12-22T10:38:59Z", "description": "d3.js mailing list..\r\n\r\nhttps://groups.google.com/forum/#!topic/d3-js/MkQsSJDFyms"}, {"readme": "This example was inspired by patricksurry's\n[D3JS quadtree nearest neighbor algorithm](https://gist.github.com/patricksurry/6478178)\nand finds the k-nearest neighbors (shown red) of a new point (shown yellow) using D3's [Quadtrees](https://github.com/mbostock/d3/wiki/Quadtree-Geom).\nOrange points are visited but not selected.\nk is fixed to 10 for this demo.\n\nChoose a new point to classify by clicking on the diagram.\n\nThe algorithm is based on one very simple but effective incremental approach first proposed by Hjaltason and Samet in their [Ranking in Spatial Databases](http://dl.acm.org/citation.cfm?id=718930) in 1995.\n\nThis is the very first version of the implementation. I would appreciate feedback on how to improve the implementation.", "created_at": "2014-01-30T14:20:16Z", "api": ["d3.range", "d3.geom.quadtree", "d3.scale.linear", "d3.select", "d3.mouse", "d3.selectAll"], "updated_at": "2015-10-28T21:02:11Z", "description": "k-nearest-neighbor search using D3 quadtrees"}, {"readme": "This is Bostock's [interactive Reingold-Tilford Tree](http://bl.ocks.org/mbostock/4339083) with data representing the rules of a simple [sklearn decision tree](http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier). Click on nodes to expand or collapse.\n\nFor more, see the [complete write-up](http://planspace.org/20151129-see_sklearn_trees_with_d3/).\n\n\nforked from <a href='http://bl.ocks.org/ajschumacher/'>ajschumacher</a>'s block: <a href='http://bl.ocks.org/ajschumacher/65eda1df2b0dd2cf616f'>Interactive D3 view of sklearn decision tree</a>", "created_at": "2015-12-02T02:24:35Z", "api": ["d3.layout.tree", "d3.svg.diagonal", "d3.select", "d3.json"], "updated_at": "2015-12-02T02:24:36Z", "description": "Interactive D3 view of sklearn decision tree"}, {"readme": "", "created_at": "2012-11-01T14:58:28Z", "api": ["d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.svg.area.radial", "d3.select", "d3.csv"], "updated_at": "2015-10-12T07:48:06Z", "description": "D3 Pie charts with grid lines"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-05-16T22:22:43Z", "api": ["d3.select", "d3.scale.ordinal", "d3.svg.arc", "d3.layout.pie", "d3.interpolate"], "updated_at": "2016-05-16T22:22:43Z", "description": "fresh block"}, {"readme": "", "created_at": "2013-02-04T16:52:17Z", "api": ["d3.select", "d3.svg.arc", "d3.layout.pie", "d3.csv"], "updated_at": "2015-12-12T03:38:45Z", "description": "Many, many pie charts"}, {"readme": "an updated look at `README.md` files from [bl.ocks.org](http://bl.ocks.org/) that contain links to other bl.ocks. These data gathered in early May 2016.\n\nclick on a node to view that bl.ock  \n\ncommunity detection done with the [jLouvain](https://github.com/upphiminn/jLouvain) library\n\nsource data and scripts used to generate the graph data are at [this repository](https://github.com/micahstubbs/readme-vis)\n\na lineage of bl.ocks that informed this idea:\n\n* [Adding links to objects](http://bl.ocks.org/d3noob/8150631) from [d3noob](http://bl.ocks.org/d3noob)\n* [Canvas Links + SVG Nodes](http://bl.ocks.org/micahstubbs/5246b8a643393f0753a11b98129a3237) from [micahstubbs](http://bl.ocks.org/micahstubbs)\n* [Blocks Graph I Readme Mentions](http://bl.ocks.org/micahstubbs/8a173cfcb9171627c7f1) from [micahstubbs](http://bl.ocks.org/micahstubbs)\n* [all the blocks](http://bl.ocks.org/enjalot/6ac67b0d8ed673c9aa61) from [enjalot](http://bl.ocks.org/enjalot)\n* [Networks - Graphs 7](http://bl.ocks.org/emeeks/f2f6883ac7c965d09b90) from [emeeks](http://bl.ocks.org/emeeks)\n* [Blocks Graph](http://bl.ocks.org/curran/1da93bab4cdc708f41ae) from [curran](http://bl.ocks.org/curran)\n* [Blocks Graph Edges Only](http://bl.ocks.org/curran/daf6bc9db8b0a28e3973) from [curran](http://bl.ocks.org/curran)\n* [Blocks Graph with Links](http://bl.ocks.org/curran/be4a45ec74357e7d9b10) from [curran](http://bl.ocks.org/curran)\n* [Dynamic Size](http://bl.ocks.org/curran/db1e524cae5e4344b2e6) from [curran](http://bl.ocks.org/curran)\n* [Ch. 11, Fig. 10 - D3.js in Action](http://bl.ocks.org/emeeks/e330141d1279c6115a3a) from [emeeks](http://bl.ocks.org/emeeks)\n\n\n", "created_at": "2016-05-11T07:10:39Z", "api": ["d3.select", "d3.min", "d3.json", "d3.scale.ordinal", "d3.scale.category20", "d3.layout.force", "d3.geom.voronoi", "d3.selectAll"], "updated_at": "2016-05-11T17:36:24Z", "description": "Blocks Graph IV - d3.oakland talk"}, {"readme": "Without modifying the information in genes.json, use D3 to construct a pie chart that shows the relative fraction of genes in the forward and reverse directions. Your code must dynamically generate the pie chart from the data. In other words, if I modify the genes.json data file, the pie chart must update automatically. (15 points)\n\nforked from <a href='http://bl.ocks.org/scresawn/'>scresawn</a>'s block: <a href='http://bl.ocks.org/scresawn/53fe9d373ca3b3e20632f69c5169a59d'>final exam question 2</a>\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/0e47490515380fe464762d02a8550f6e'>final exam question 2</a>", "created_at": "2016-05-05T13:04:14Z", "api": ["d3.json", "d3.scale.category20c", "d3.select", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2016-05-05T14:07:54Z", "description": "final exam question 2"}, {"readme": "A donut chart of world religions with a color legend. This is example 28 from the screencast [Splitting Charts](https://github.com/curran/screencasts/tree/gh-pages/splittingCharts). \n\n * Data from [Pew Research Center Global Religious Landscape data set](https://github.com/curran/screencasts/tree/gh-pages/splittingCharts/datasets)\n * Using [d3-legend](https://github.com/susielu/d3-legend)\n\nforked from <a href='http://bl.ocks.org/curran/'>curran</a>'s block: <a href='http://bl.ocks.org/curran/1c23d9c7070deb6f8488'>Religions Pie Chart</a>\n\n<!-- Start of SimpleHitCounter Code -->\n<div align=\"center\"><a href=\"http://www.simplehitcounter.com\" target=\"_blank\"><img src=\"http://simplehitcounter.com/hit.php?uid=1980284&f=16777215&b=0\" border=\"0\" height=\"18\" width=\"83\" alt=\"web counter\"></a></div>\n<!-- End of SimpleHitCounter Code -->", "created_at": "2015-11-21T04:55:11Z", "api": ["d3.select", "d3.scale.ordinal", "d3.scale.category10", "d3.svg.axis", "d3.layout.pie", "d3.svg.arc", "d3.legend.color", "d3.csv"], "updated_at": "2015-11-22T18:35:52Z", "description": "Religions Donut Chart"}, {"readme": "A simple demo showing the information [d3.touches](https://github.com/emeeks/gexfd3) stores in its array for Chapter 12 of [D3.js in Action](http://manning.com/meeks/).", "created_at": "2014-08-12T00:12:02Z", "api": ["d3.select", "d3.event.preventDefault", "d3.event.stopPropagation", "d3.touches"], "updated_at": "2015-08-29T14:05:09Z", "description": "d3.touches array data on touch"}, {"readme": "", "created_at": "2013-01-23T19:32:02Z", "api": ["d3.scale.ordinal", "d3.scale.linear", "d3.svg.arc", "d3.layout.pie", "d3.keys", "d3.values", "d3.select"], "updated_at": "2015-12-11T14:08:53Z", "description": "Regional breakdowns by month (CartoDB + D3)"}, {"readme": "### Aim\nPull in dynamic data into a d3 visualisation via input box\n\n### Info and sources\nAdapted from [d3.js with Dynamic Data tutorial](http://javadude.wordpress.com/2012/05/17/d3-js-with-dynamic-data/)\n", "created_at": "2014-04-01T08:44:34Z", "api": ["d3.select"], "updated_at": "2015-08-29T13:57:58Z", "description": "Input field dynamic text with D3"}, {"readme": "This is the code for Chapter 7, Figure 3 from [D3.js in Action](http://manning.com/meeks/) demonstrating how to load GeoJSON data and render it using **d3.geo.path()** and **d3.geo.projection()**.", "created_at": "2014-11-18T04:36:45Z", "api": ["d3.json", "d3.geo.mercator", "d3.geo.path", "d3.select"], "updated_at": "2016-03-18T03:30:18Z", "description": "Ch. 7, Fig. 3 - D3.js in Action"}, {"readme": "", "created_at": "2014-11-20T03:34:13Z", "api": ["d3.layout.pie", "d3.svg.arc", "d3.select", "d3.ease", "d3.timer"], "updated_at": "2016-02-09T01:52:09Z", "description": "Arc Corners III"}, {"readme": "On hover, these arcs extend outward slightly and darken. Increasing the outer radius of the hovered arc temporarily exaggerates its area, but is useful for emphasis.\n\nNote that the padding between adjacent arcs remains constant when arcs extend or contract. This is achieved by specifying an explicit arc.padRadius that is the same for all arcs, rather than relying on the default behavior which depends on the arc\u2019s inner and outer radii.\n", "created_at": "2014-12-01T19:49:51Z", "api": ["d3.layout.pie", "d3.svg.arc", "d3.select", "d3.interpolate"], "updated_at": "2016-02-09T01:52:01Z", "description": "Extending Arcs"}, {"readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "created_at": "2016-05-05T13:44:05Z", "api": ["d3.scale.category20c", "d3.select", "d3.layout.pie", "d3.svg.arc"], "updated_at": "2016-05-05T13:52:45Z", "description": "fresh block"}, {"readme": "This is the code for Chapter 11, Figure 14 from [D3.js in Action](http://manning.com/meeks/) demonstrating **d3.svg.brush()** XY-brushing that uses **d3.geom.quadtree()** to dramatically improve spatial query performance.", "created_at": "2014-11-19T05:25:24Z", "api": ["d3.range", "d3.geom.quadtree", "d3.select", "d3.svg.brush", "d3.scale.identity", "d3.selectAll"], "updated_at": "2016-03-17T02:25:28Z", "description": "Ch. 11, Fig. 14 - D3.js in Action"}, {"readme": "", "created_at": "2012-07-12T09:01:36Z", "api": ["d3.csv", "d3.nest"], "updated_at": "2015-10-07T03:18:06Z", "description": "d3 nested nest from csv data"}, {"readme": "This is the code for Chapter 5, Figure 21 from [D3.js in Action](http://manning.com/meeks/) showing how to use **d3.layout.stack()** to create a streamgraph.", "created_at": "2014-11-17T16:28:46Z", "api": ["d3.csv", "d3.scale.linear", "d3.scale.category10", "d3.svg.area", "d3.layout.stack", "d3.select"], "updated_at": "2016-03-18T03:33:40Z", "description": "Ch. 5, Fig. 21 - D3.js in Action"}, {"readme": "", "created_at": "2012-08-15T16:17:25Z", "api": ["d3.dispatch", "d3.functor", "d3.rebind", "d3.scale.linear", "d3.select", "d3.json", "d3.csv", "d3.layout.cloud"], "updated_at": "2016-04-12T09:46:18Z", "description": "Topic Clouds using D3 Word Cloud Layout"}, {"readme": "", "created_at": "2013-01-31T22:34:09Z", "api": ["d3.csv", "d3.extent", "d3.time.scale", "d3.scale.linear", "d3.select", "d3.svg.line", "d3.svg.axis", "d3.time.format"], "updated_at": "2015-12-12T00:58:49Z", "description": "D3.js axis gridlines width < 1.0"}, {"readme": "", "created_at": "2012-07-25T13:21:20Z", "api": ["d3.nest", "d3.sum", "d3.select", "d3.csv"], "updated_at": "2016-04-07T02:03:58Z", "description": "D3 using nest on csv data"}, {"readme": "", "created_at": "2013-02-01T04:08:17Z", "api": ["d3.time.scale", "d3.select", "d3.svg.axis"], "updated_at": "2016-02-18T15:34:44Z", "description": "d3.js major minor tick style 3"}, {"readme": "", "created_at": "2014-02-17T03:38:35Z", "api": ["d3.select"], "updated_at": "2015-08-29T13:56:25Z", "description": "data matrix --> \"html table\" using d3.js"}, {"readme": "", "created_at": "2014-08-21T01:33:44Z", "api": ["d3.format", "d3.scale.category20", "d3.select", "d3.sankey", "d3.keys", "d3.nest", "d3.behavior.drag", "d3.rgb", "d3.selectAll"], "updated_at": "2015-08-29T14:05:29Z", "description": "color your d3 sankey using rCharts"}, {"readme": "This is a follow on from the [simple d3.js graph](http://bl.ocks.org/d3noob/b3ff6ae1c120eea654b5) used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt demonstrates the rotation of the x axis text along with the formatting of that text in a non-standard manner. It should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.", "created_at": "2014-06-21T19:02:26Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2015-08-29T14:02:52Z", "description": "d3.js graph with rotated axis text"}, {"readme": "This is a follow on from the [simple d3.js graph](http://bl.ocks.org/d3noob/b3ff6ae1c120eea654b5) used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt is aimed at exploring some features of d3.js and should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.\n\nforked from <a href='http://bl.ocks.org/d3noob/'>d3noob</a>'s block: <a href='http://bl.ocks.org/d3noob/e1aa61856118edfa624d'>d3.js Graph with many features</a>", "created_at": "2016-03-03T13:24:57Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.area", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-03-03T13:24:59Z", "description": "d3.js Graph with many features"}, {"readme": "", "created_at": "2014-04-29T12:51:57Z", "api": ["d3.select"], "updated_at": "2015-08-29T14:00:42Z", "description": "D3 Merging Enter Selection with Update Selection"}, {"readme": "", "created_at": "2015-03-27T02:12:32Z", "api": ["d3.csv"], "updated_at": "2015-08-29T14:17:48Z", "description": "Employment Project Data Load with D3"}, {"readme": "", "created_at": "2013-04-12T13:39:14Z", "api": ["d3.custom.barChart", "d3.select", "d3.range", "d3.dispatch", "d3.scale.ordinal", "d3.scale.linear", "d3.max", "d3.svg.axis", "d3.rebind"], "updated_at": "2016-05-02T21:24:47Z", "description": "D3.js Reusable Bar Chart with Angularjs"}, {"readme": "", "created_at": "2013-12-23T13:47:22Z", "api": ["d3.max", "d3.scale.linear", "d3.format", "d3.select", "d3.selectAll"], "updated_at": "2016-01-01T05:19:04Z", "description": "Text on horizontal bar chart - d3"}, {"readme": "", "created_at": "2012-05-03T12:08:11Z", "api": ["d3.layout.force", "d3.json", "d3.geo.albersUsa", "d3.select", "d3.scale.linear"], "updated_at": "2015-11-18T09:35:40Z", "description": "D3 Dorling cartogram with rectangular states"}, {"readme": "", "created_at": "2015-08-09T12:07:00Z", "api": ["d3.behavior.drag", "d3.select"], "updated_at": "2015-08-29T14:27:00Z", "description": "D3 Drag Rectangle with drag handles"}, {"readme": "", "created_at": "2014-09-12T21:48:48Z", "api": ["d3.scale.ordinal", "d3.set", "d3.keys", "d3.merge", "d3.layout.grid", "d3.select", "d3.scale.linear", "d3.extent"], "updated_at": "2015-08-29T14:06:22Z", "description": "dimple d3.js meets seaborn in  R"}, {"readme": "This is a follow on from the [simple d3.js graph](http://bl.ocks.org/d3noob/b3ff6ae1c120eea654b5) used as an example in the book [D3 Tips and Tricks](https://leanpub.com/D3-Tips-and-Tricks).\n\nIt demonstrates the loading of new data and updating a graph on a button press. It should be taken in context with the text of the [book](https://leanpub.com/D3-Tips-and-Tricks) which can be downloaded for free from Leanpub.\n\nforked from <a href='http://bl.ocks.org/d3noob/'>d3noob</a>'s block: <a href='http://bl.ocks.org/d3noob/7030f35b72de721622b8'>Update d3.js data with button press</a>", "created_at": "2016-05-02T12:31:28Z", "api": ["d3.time.format", "d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.svg.line", "d3.select", "d3.csv", "d3.extent", "d3.max"], "updated_at": "2016-05-02T12:31:28Z", "description": "Update d3.js data with button press"}, {"readme": "This is a code excerpt from the book, D3 on Angular. http://leanpub.com/d3angularjs", "created_at": "2014-03-11T22:11:34Z", "api": ["d3.json", "d3.geo.mercator", "d3.geo.path", "d3.select"], "updated_at": "2015-08-29T13:57:16Z", "description": "Using D3 to load data from within Angular."}, {"readme": "", "created_at": "2014-09-11T18:02:03Z", "api": ["d3.ascending", "d3.scale.category10", "d3.parcoords", "d3.select", "d3.selectAll"], "updated_at": "2016-04-26T08:10:13Z", "description": "R + d3.js Parallel Coordinates of partykit"}, {"readme": "", "created_at": "2013-07-12T21:11:42Z", "api": ["d3.select", "d3.horizon", "d3.time.scale", "d3.svg.axis", "d3.extent", "d3.scale.linear"], "updated_at": "2015-12-19T16:59:08Z", "description": "d3 horizon with axis from rCharts"}, {"readme": "## DESCRIPTION\nA simple d3.js slider", "created_at": "2013-07-11T22:09:35Z", "api": ["d3.scale.linear", "d3.dispatch", "d3.select", "d3.behavior.drag", "d3.mouse", "d3.event.sourceEvent.preventDefault"], "updated_at": "2015-12-19T15:58:49Z", "description": "A Simple HTML Slider With D3"}, {"readme": "This is the code for Chapter 5, Figure 17 from [D3.js in Action](http://manning.com/meeks/) that shows how to use **d3.svg.diagonal.radial()** and its **.projection()** function to create circular dendrograms. This also implements **d3.behavior.zoom()** so that you can pan the canvas by dragging.", "created_at": "2014-11-17T16:25:29Z", "api": ["d3.json", "d3.nest", "d3.scale.category10", "d3.layout.tree", "d3.svg.diagonal.radial", "d3.select", "d3.selectAll", "d3.behavior.zoom"], "updated_at": "2016-03-18T03:33:53Z", "description": "Ch. 5, Fig. 17 - D3.js in Action"}, {"readme": "This example demonstrate how to remap D3 events. MouseWheel event is used to pan the chart in x and y directions. This example was created as an answer to [this SO question](http://stackoverflow.com/questions/28603796/d3-remap-mousewheel-to-be-panning-gesture-instead-of-zoom-gesture) (Refer to it for detailed explanation).", "created_at": "2015-02-20T01:49:26Z", "api": ["d3.random.normal", "d3.range", "d3.behavior.zoom", "d3.select", "d3.transform", "d3.event.stopPropagation"], "updated_at": "2015-08-29T14:15:47Z", "description": "D3.js: Panning with mouse wheel"}, {"readme": "This an example using the [D3 trail layout](https://github.com/bmschmidt/D3-trail) made by [Benjamin Schmidt](https://github.com/bmschmidt).\n\nThe final example, with the typhoon icon moving along the path and the date for each frame shown.\n\nThere is a blog entry explaining this example at [GeoExamples](http://geoexamples.blogspot.com/2014/07/using-d3-trail-layout-to-draw-hayian.html)", "created_at": "2014-07-07T18:32:15Z", "api": ["d3.geo.mercator", "d3.geo.path", "d3.json", "d3.scale.quantile", "d3.select", "d3.layout.trail"], "updated_at": "2015-08-29T14:03:37Z", "description": "D3 Trail Layout animated map with icon"}]