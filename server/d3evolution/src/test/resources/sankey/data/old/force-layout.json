{
"links": [{"source": "ImSraone_216ee9834f42bdfaffae", "links": [{"target_end_line": 196, "source_start_line": 1, "source_end_line": 191, "source_confidence": 99, "target_start_line": 1, "target_confidence": 99}], "target": "msqr_3202712", "value": 196}, {"source": "jwarburg_357d91975a97e9f68208", "links": [{"target_end_line": 55, "source_start_line": 1, "source_end_line": 55, "source_confidence": 99, "target_start_line": 1, "target_confidence": 99}], "target": "tmcw_3426132", "value": 55}, {"source": "pnavarrc_4142064", "links": [{"target_end_line": 42, "source_start_line": 1, "source_end_line": 42, "source_confidence": 69, "target_start_line": 1, "target_confidence": 82}], "target": "tmcw_3426132", "value": 42}, {"source": "jwarburg_357d91975a97e9f68208", "links": [{"target_end_line": 42, "source_start_line": 1, "source_end_line": 42, "source_confidence": 82, "target_start_line": 1, "target_confidence": 69}], "target": "pnavarrc_4142064", "value": 42}, {"source": "emeeks_d25690581801fc0c1cfd", "links": [{"target_end_line": 21, "source_start_line": 11, "source_end_line": 20, "source_confidence": 87, "target_start_line": 12, "target_confidence": 77}, {"target_end_line": 62, "source_start_line": 43, "source_end_line": 60, "source_confidence": 87, "target_start_line": 45, "target_confidence": 77}, {"target_end_line": 45, "source_start_line": 26, "source_end_line": 43, "source_confidence": 87, "target_start_line": 28, "target_confidence": 77}, {"target_end_line": 9, "source_start_line": 1, "source_end_line": 9, "source_confidence": 87, "target_start_line": 1, "target_confidence": 77}, {"target_end_line": 21, "source_start_line": 11, "source_end_line": 20, "source_confidence": 87, "target_start_line": 12, "target_confidence": 77}, {"target_end_line": 62, "source_start_line": 43, "source_end_line": 60, "source_confidence": 87, "target_start_line": 45, "target_confidence": 77}, {"target_end_line": 45, "source_start_line": 26, "source_end_line": 43, "source_confidence": 87, "target_start_line": 28, "target_confidence": 77}, {"target_end_line": 9, "source_start_line": 1, "source_end_line": 9, "source_confidence": 87, "target_start_line": 1, "target_confidence": 77}, {"target_end_line": 21, "source_start_line": 11, "source_end_line": 20, "source_confidence": 87, "target_start_line": 12, "target_confidence": 77}, {"target_end_line": 62, "source_start_line": 43, "source_end_line": 60, "source_confidence": 87, "target_start_line": 45, "target_confidence": 77}, {"target_end_line": 45, "source_start_line": 26, "source_end_line": 43, "source_confidence": 87, "target_start_line": 28, "target_confidence": 77}, {"target_end_line": 9, "source_start_line": 1, "source_end_line": 9, "source_confidence": 87, "target_start_line": 1, "target_confidence": 77}, {"target_end_line": 21, "source_start_line": 11, "source_end_line": 20, "source_confidence": 87, "target_start_line": 12, "target_confidence": 77}, {"target_end_line": 62, "source_start_line": 43, "source_end_line": 60, "source_confidence": 87, "target_start_line": 45, "target_confidence": 77}, {"target_end_line": 45, "source_start_line": 26, "source_end_line": 43, "source_confidence": 87, "target_start_line": 28, "target_confidence": 77}, {"target_end_line": 9, "source_start_line": 1, "source_end_line": 9, "source_confidence": 87, "target_start_line": 1, "target_confidence": 77}], "target": "jalapic_528b427834c7004dba89", "value": 55}, {"source": "Rico3734_fa14dff4959ccb0886a9", "links": [{"target_end_line": 11, "source_start_line": 9, "source_end_line": 17, "source_confidence": 69, "target_start_line": 3, "target_confidence": 35}, {"target_end_line": 19, "source_start_line": 21, "source_end_line": 27, "source_confidence": 69, "target_start_line": 13, "target_confidence": 35}, {"target_end_line": 11, "source_start_line": 9, "source_end_line": 17, "source_confidence": 69, "target_start_line": 3, "target_confidence": 35}, {"target_end_line": 19, "source_start_line": 21, "source_end_line": 27, "source_confidence": 69, "target_start_line": 13, "target_confidence": 35}], "target": "mbostock_3305937", "value": 16}, {"source": "Rico3734_2d06a6aadbb4af3398ba", "links": [{"target_end_line": 11, "source_start_line": 15, "source_end_line": 23, "source_confidence": 62, "target_start_line": 3, "target_confidence": 35}, {"target_end_line": 19, "source_start_line": 27, "source_end_line": 33, "source_confidence": 62, "target_start_line": 13, "target_confidence": 35}, {"target_end_line": 11, "source_start_line": 15, "source_end_line": 23, "source_confidence": 62, "target_start_line": 3, "target_confidence": 35}, {"target_end_line": 19, "source_start_line": 27, "source_end_line": 33, "source_confidence": 62, "target_start_line": 13, "target_confidence": 35}], "target": "mbostock_3305937", "value": 16}, {"source": "fabid_0c4cf357ab5ed3e90382", "links": [{"target_end_line": 19, "source_start_line": 41, "source_end_line": 49, "source_confidence": 33, "target_start_line": 11, "target_confidence": 34}, {"target_end_line": 7, "source_start_line": 1, "source_end_line": 11, "source_confidence": 33, "target_start_line": 1, "target_confidence": 34}, {"target_end_line": 19, "source_start_line": 41, "source_end_line": 49, "source_confidence": 33, "target_start_line": 11, "target_confidence": 34}, {"target_end_line": 7, "source_start_line": 1, "source_end_line": 11, "source_confidence": 33, "target_start_line": 1, "target_confidence": 34}], "target": "mbostock_3305937", "value": 20}, {"source": "Rico3734_fa14dff4959ccb0886a9", "links": [{"target_end_line": 50, "source_start_line": 21, "source_end_line": 28, "source_confidence": 61, "target_start_line": 43, "target_confidence": 30}, {"target_end_line": 11, "source_start_line": 9, "source_end_line": 13, "source_confidence": 61, "target_start_line": 2, "target_confidence": 30}, {"target_end_line": 50, "source_start_line": 21, "source_end_line": 28, "source_confidence": 61, "target_start_line": 43, "target_confidence": 30}, {"target_end_line": 11, "source_start_line": 9, "source_end_line": 13, "source_confidence": 61, "target_start_line": 2, "target_confidence": 30}], "target": "fabid_0c4cf357ab5ed3e90382", "value": 18}, {"source": "Rico3734_2d06a6aadbb4af3398ba", "links": [{"target_end_line": 50, "source_start_line": 27, "source_end_line": 34, "source_confidence": 55, "target_start_line": 43, "target_confidence": 30}, {"target_end_line": 11, "source_start_line": 15, "source_end_line": 19, "source_confidence": 55, "target_start_line": 2, "target_confidence": 30}, {"target_end_line": 50, "source_start_line": 27, "source_end_line": 34, "source_confidence": 55, "target_start_line": 43, "target_confidence": 30}, {"target_end_line": 11, "source_start_line": 15, "source_end_line": 19, "source_confidence": 55, "target_start_line": 2, "target_confidence": 30}], "target": "fabid_0c4cf357ab5ed3e90382", "value": 18}, {"source": "dmijalkovic_52fb07194d4b2988cafb", "links": [{"target_end_line": 12, "source_start_line": 18, "source_end_line": 25, "source_confidence": 17, "target_start_line": 7, "target_confidence": 53}, {"target_end_line": 7, "source_start_line": 3, "source_end_line": 7, "source_confidence": 17, "target_start_line": 3, "target_confidence": 53}, {"target_end_line": 12, "source_start_line": 18, "source_end_line": 25, "source_confidence": 17, "target_start_line": 7, "target_confidence": 53}, {"target_end_line": 7, "source_start_line": 3, "source_end_line": 7, "source_confidence": 17, "target_start_line": 3, "target_confidence": 53}], "target": "yassineAlouini_fdbca6ea6f4416e6b328", "value": 13}, {"source": "diskmanti_bc208f5266e4ffd5484a", "links": [{"target_end_line": 11, "source_start_line": 1, "source_end_line": 11, "source_confidence": 97, "target_start_line": 1, "target_confidence": 97}], "target": "serouvivek_6dd7b5b74b81badaebe3397dddf74260", "value": 11}, {"source": "Rico3734_3a387f8041e1dc31d718", "links": [{"target_end_line": 11, "source_start_line": 1, "source_end_line": 11, "source_confidence": 97, "target_start_line": 1, "target_confidence": 97}], "target": "serouvivek_6dd7b5b74b81badaebe3397dddf74260", "value": 11}, {"source": "Rico3734_3a387f8041e1dc31d718", "links": [{"target_end_line": 11, "source_start_line": 1, "source_end_line": 11, "source_confidence": 97, "target_start_line": 1, "target_confidence": 97}], "target": "diskmanti_bc208f5266e4ffd5484a", "value": 11}],
"nodes": [{"code": "<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width:100%; height: 100% }\n  </style>\n</head>\n\n<body>\n  <script>\n    // Feel free to change or delete any of the code you see!\n    var svg = d3.select(\"body\").append(\"svg\")\n    svg.append(\"rect\")\n      .attr({x: 100, y: 10, width: 700, height: 480})\n      .style({ fill: \"#a72d1a\"})\n      .transition().duration(3000).ease(\"bounce\")\n      .style({ fill: \"#5db9e3\"})\n\n    console.log(\"you are now rocking with d3\", d3);\n  </script>\n</body>\n", "description": "d3", "created_at": "2016-04-15T09:19:07Z", "updated_at": "2016-04-15T09:19:07Z", "api": ["d3.select"], "readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/anonymous/'>anonymous</a>'s block: <a href='http://bl.ocks.org/anonymous/0bff3139b4ff3fa3eb3f96dfb126ac4e'>d3</a>", "uid": "serouvivek_6dd7b5b74b81badaebe3397dddf74260"}, {"code": "<html>\n<head>\n  <title>Drawing a simple network without filtering</title>\n  <meta charset=\"utf-8\" />\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n</head>\n<style>\n  svg {\n    height: 500px;\n    width: 500px;\n    border: 1px solid gray;\n  }\n</style>\n<body>\n\n<div id=\"viz\">\n  <svg>\n  </svg>\n</div>\n</body>\n  <footer>\n<script>\n\nd3.csv(\"firm.csv\",function(error,data) {dataViz(data)});\n\nfunction dataViz(incData) {\n\n  var nodeHash = {};\n  var nodes = [];\n  var edges = [];\n\n  incData.forEach(function (edge) {\n    if (!nodeHash[edge.source]) {\n      nodeHash[edge.source] = {id: edge.source, label: edge.source};\n      nodes.push(nodeHash[edge.source]);\n    }\n    if (!nodeHash[edge.target]) {\n      nodeHash[edge.target] = {id: edge.target, label: edge.target};\n      nodes.push(nodeHash[edge.target]);\n    }\n    edges.push({source: nodeHash[edge.source], target: nodeHash[edge.target], weight: edge.weight});\n  });\n\n  var force = d3.layout.force().nodes(nodes).links(edges)\n  .size([500,500])\n  .charge(-200)\n  .linkDistance(100)\n  .on(\"tick\", updateNetwork);\n\n  d3.select(\"svg\").selectAll(\"line\")\n  .data(edges)\n  .enter()\n  .append(\"line\")\n  .style(\"stroke-width\", \"1px\")\n  .style(\"stroke\", \"#CC9999\");\n\n  d3.select(\"svg\").selectAll(\"circle\")\n  .data(nodes)\n  .enter()\n  .append(\"circle\")\n  .style(\"fill\", \"#996666\")\n  .attr(\"r\", 5);\n\n  force.start();\n\n  function updateNetwork() {\n    d3.select(\"svg\").selectAll(\"line\")\n      .attr(\"x1\", function (d) {return d.source.x})\n      .attr(\"x2\", function (d) {return d.target.x})\n      .attr(\"y1\", function (d) {return d.source.y})\n      .attr(\"y2\", function (d) {return d.target.y});\n\n    d3.select(\"svg\").selectAll(\"circle\")\n      .attr(\"cx\", function (d) {return d.x})\n      .attr(\"cy\", function (d) {return d.y});\n  }\n\n\n\n}\n</script>\n  </footer>\n\n</html>\n", "description": "Networks - Intro 2", "created_at": "2015-07-25T23:50:11Z", "updated_at": "2016-03-17T02:07:45Z", "api": ["d3.csv", "d3.layout.force", "d3.select"], "readme": "Intro Example 2 for [How to Create Effective Network Data Visualization](http://elijahmeeks/networkviz/)\n\nHere's the same network dataset from the last example laid out as a network. The force-directed layout that D3 uses (d3.layout.force) expects arrays of nodes and arrays of edges. In order to create those necessary arrays, we walk through the edgelist in firm.csv and create the referenced nodes from the source and target id values in the edge list.\n\nThe resulting ball of spaghetti is all too common in finished network data visualization. Compared to the earlier bar charts, this is a horrible data visualization product and says nothing, other than perhaps \"this is complex\" but mostly, \"the person who created this is more interested in technology than they are in communication.\"", "uid": "emeeks_d25690581801fc0c1cfd"}, {"code": "<html>\n<head>\n  <title>Drawing a simple network without filtering</title>\n  <meta charset=\"utf-8\" />\n<script src=\"http://d3js.org/d3.v3.min.js\" type=\"text/JavaScript\"></script>\n</head>\n<style>\n  svg {\n    height: 500px;\n    width: 500px;\n    border: 1px solid gray;\n  }\n</style>\n<body>\n\n<div id=\"viz\">\n  <svg>\n  </svg>\n</div>\n</body>\n  <footer>\n<script>\n\nd3.csv(\"firm.csv\",function(error,data) {dataViz(data)});\n\nfunction dataViz(incData) {\n\n  var nodeHash = {};\n  var nodes = [];\n  var edges = [];\n\n  // create node array - from edgelist\n  incData.forEach(function (edge) {\n    if (!nodeHash[edge.source]) {\n      nodeHash[edge.source] = {id: edge.source, label: edge.source};\n      nodes.push(nodeHash[edge.source]);\n    }\n    if (!nodeHash[edge.target]) {\n      nodeHash[edge.target] = {id: edge.target, label: edge.target};\n      nodes.push(nodeHash[edge.target]);\n    }\n    edges.push({source: nodeHash[edge.source], target: nodeHash[edge.target], weight: edge.weight});  //create edge array\n  });\n\n  // requires array of nodes with positions to use as input \n  var force = d3.layout.force().nodes(nodes).links(edges)\n  .size([500,500])\n  .charge(-200) //how much to attract/repel\n  .linkDistance(100)\n  .on(\"tick\", updateNetwork);\n\n  d3.select(\"svg\").selectAll(\"line\")\n  .data(edges)\n  .enter()\n  .append(\"line\")\n  .style(\"stroke-width\", \"1px\")\n  .style(\"stroke\", \"#CC9999\");\n\n  d3.select(\"svg\").selectAll(\"circle\")\n  .data(nodes)\n  .enter()\n  .append(\"circle\")\n  .style(\"fill\", \"#996666\")\n  .attr(\"r\", 5);\n\n  force.start();  // start animation of forced layout\n\n  function updateNetwork() {\n    d3.select(\"svg\").selectAll(\"line\")\n      .attr(\"x1\", function (d) {return d.source.x})\n      .attr(\"x2\", function (d) {return d.target.x})\n      .attr(\"y1\", function (d) {return d.source.y})\n      .attr(\"y2\", function (d) {return d.target.y});\n\n    d3.select(\"svg\").selectAll(\"circle\")\n      .attr(\"cx\", function (d) {return d.x})\n      .attr(\"cy\", function (d) {return d.y});\n  }\n\n\n\n}\n</script>\n  </footer>\n\n</html>\n", "description": "Networks - Intro 2", "created_at": "2015-11-08T22:11:50Z", "updated_at": "2015-11-08T22:14:58Z", "api": ["d3.csv", "d3.layout.force", "d3.select"], "readme": "Intro Example 2 for [How to Create Effective Network Data Visualization](http://elijahmeeks/networkviz/)\n\nHere's the same network dataset from the last example laid out as a network. The force-directed layout that D3 uses (d3.layout.force) expects arrays of nodes and arrays of edges. In order to create those necessary arrays, we walk through the edgelist in firm.csv and create the referenced nodes from the source and target id values in the edge list.\n\nThe resulting ball of spaghetti is all too common in finished network data visualization. Compared to the earlier bar charts, this is a horrible data visualization product and says nothing, other than perhaps \"this is complex\" but mostly, \"the person who created this is more interested in technology than they are in communication.\"", "uid": "jalapic_528b427834c7004dba89"}, {"code": "<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\nbody {\n  font: 10px sans-serif;\n}\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n.point {\n  fill: steelblue;\n  stroke: #000;\n}\n\n</style>\n<body>\n<script src=\"//d3js.org/d3.v3.min.js\"></script>\n<script>\n\nvar margin = {top: 20, right: 20, bottom: 30, left: 40},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\nvar x = d3.scale.linear()\n    .range([0, width]);\n\nvar y = d3.scale.linear()\n    .range([height, 0]);\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nd3.tsv(\"data.tsv\", function(error, data) {\n  if (error) throw error;\n\n  // Coerce the data to numbers.\n  data.forEach(function(d) {\n    d.x = +d.x;\n    d.y = +d.y;\n  });\n\n  // Compute the scales\u2019 domains.\n  x.domain(d3.extent(data, function(d) { return d.x; })).nice();\n  y.domain(d3.extent(data, function(d) { return d.y; })).nice();\n\n  // Add the x-axis.\n  svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.svg.axis().scale(x).orient(\"bottom\"));\n\n  // Add the y-axis.\n  svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(d3.svg.axis().scale(y).orient(\"left\"));\n\n  // Add the points!\n  svg.selectAll(\".point\")\n      .data(data)\n    .enter().append(\"circle\")\n      .attr(\"class\", \"point\")\n      .attr(\"r\", 4.5)\n      .attr(\"cx\", function(d) { return x(d.x); })\n      .attr(\"cy\", function(d) { return y(d.y); });\n});\n\n</script>\n", "description": "d3.tsv", "created_at": "2012-08-09T17:06:48Z", "updated_at": "2016-03-29T01:11:27Z", "api": ["d3.scale.linear", "d3.select", "d3.tsv", "d3.extent", "d3.svg.axis"], "readme": "D3 2.10 adds support for [tab-separated values](http://en.wikipedia.org/wiki/Tab-separated_values) via d3.tsv. Similar to the previous d3.csv method, this makes it easy to load and parse TSV files.\n\n```javascript\nd3.tsv(\"data.tsv\", function(data) {\n  console.log(data[0].x);\n});\n```\n", "uid": "mbostock_3305937"}, {"code": "<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n\n  <body>\n    <script>\n      // Set the dimensions of the canvas / graph\n    var margin = {top: 30, right: 30, bottom: 40, left: 50};\n    var width = 800 - margin.left - margin.right;\n    var height = 300 - margin.top - margin.bottom;\n\n    // Set the ranges\n    var x = d3.time.scale().range([0, width]);\n    var y = d3.scale.linear().range([height, 0]);\n\n    // Define the axes\n    var xAxis = d3.svg.axis().scale(x)\n        .orient(\"bottom\").ticks(5);\n\n    var yAxis = d3.svg.axis().scale(y)\n        .orient(\"left\").ticks(5);\n\n    // Adds the svg canvas\n    var svgContainer = d3.select(\"body\")\n        .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n            .attr(\"transform\", \n                  \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var data = [\n                {\"date\":\"1-Apr-15\", \"close\":140.61},\n                {\"date\":\"15-Apr-15\", \"close\":20.23},\n                {\"date\":\"13-May-15\", \"close\":99.00},\n                {\"date\":\"21-May-15\", \"close\":188.13},\n                {\"date\":\"18-Jun-15\", \"close\":59.13},\n                {\"date\":\"28-Jul-15\", \"close\":75.13},\n                {\"date\":\"8-Aug-15\", \"close\":109.13},\n                {\"date\":\"12-Aug-15\", \"close\":96.13}];\n\n    // Parse the date / time\n    var parseDate = d3.time.format(\"%d-%b-%y\").parse;\n\n    // Get the data\n    data.forEach(function(d) {\n        d.date = parseDate(d.date);\n        d.close = +d.close;\n    });\n\n    // Scale the range of the data\n    x.domain(d3.extent(data, function(d) { return d.date; }));\n    y.domain([0, d3.max(data, function(d) { return d.close; })]);\n\n    // Add the X Axis\n    svgContainer.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(xAxis);\n\n    // Add the Y Axis\n    svgContainer.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(yAxis);\n\n    // Draw vertical grid lines\n    svgContainer.append(\"g\")     \n        .attr(\"class\", \"grid\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(xAxis\n            .tickSize(-height, 0, 0)\n            .tickFormat(\"\")\n            )\n\n    // Draw horizontal grid lines\n    svgContainer.append(\"g\")     \n        .attr(\"class\", \"grid\")\n        .call(yAxis\n            .tickSize(-width, 0, 0)\n            .tickFormat(\"\")\n            )\n\n    svgContainer.selectAll(\"bar\")\n        .data(data)\n        .enter().append(\"rect\")\n        .style(\"fill\", \"#aec6a8\")\n        .attr(\"x\", function(d) { return x(d.date)-5; })\n        .attr(\"width\", 10)\n        .attr(\"y\", function(d) { return y(d.close); })\n        .attr(\"height\", function(d) { return height - y(d.close); });\n      \n    // Define the line (interpolate to smooth the line)\n    var valueline = d3.svg.line()\n        .interpolate(\"cardinal\")\n        .x(function(d) { return x(d.date); })\n        .y(function(d) { return y(d.close); });\n\n    svgContainer.append(\"path\")\n        .attr(\"class\", \"line\")\n        .attr(\"d\", valueline(data));\n\n   </script>\n</body>\n", "description": "D3 graphs", "created_at": "2015-10-23T23:48:33Z", "updated_at": "2015-10-24T07:33:28Z", "api": ["d3.time.scale", "d3.scale.linear", "d3.svg.axis", "d3.select", "d3.time.format", "d3.extent", "d3.max", "d3.svg.line"], "readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nSimple D3 graph.", "uid": "dmijalkovic_52fb07194d4b2988cafb"}, {"code": "<html>\n<head>\n    <meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=320\" />\n\t<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n\t<title>Gauge</title>\n\t<script type=\"text/javascript\" src=\"http://d3js.org/d3.v2.min.js\"></script>\n\t<style>\n\tbody {\n\t\tfont-family:  Helvetica, Arial, sans-serif;\n\t\tmargin: 32px;\n\t}\n\t#power-gauge g.arc {\n\t\tfill: steelblue;\n\t}\n\t#power-gauge g.pointer {\n\t\tfill: #e85116;\n\t\tstroke: #b64011;\n\t}\n\t\n\t#power-gauge g.label text {\n\t\ttext-anchor: middle;\n\t\tfont-size: 14px;\n\t\tfont-weight: bold;\n\t\tfill: #666;\n\t}\n\t</style>\n</head>\n<body>\n<div id=\"power-gauge\"></div>\n\t\n<script>\nvar gauge = function(container, configuration) {\n\tvar that = {};\n\tvar config = {\n\t\tsize\t\t\t\t\t\t: 200,\n\t\tclipWidth\t\t\t\t\t: 200,\n\t\tclipHeight\t\t\t\t\t: 110,\n\t\tringInset\t\t\t\t\t: 20,\n\t\tringWidth\t\t\t\t\t: 20,\n\t\t\n\t\tpointerWidth\t\t\t\t: 10,\n\t\tpointerTailLength\t\t\t: 5,\n\t\tpointerHeadLengthPercent\t: 0.9,\n\t\t\n\t\tminValue\t\t\t\t\t: 0,\n\t\tmaxValue\t\t\t\t\t: 10,\n\t\t\n\t\tminAngle\t\t\t\t\t: -90,\n\t\tmaxAngle\t\t\t\t\t: 90,\n\t\t\n\t\ttransitionMs\t\t\t\t: 750,\n\t\t\n\t\tmajorTicks\t\t\t\t\t: 5,\n\t\tlabelFormat\t\t\t\t\t: d3.format(',g'),\n\t\tlabelInset\t\t\t\t\t: 10,\n\t\t\n\t\tarcColorFn\t\t\t\t\t: d3.interpolateHsl(d3.rgb('#e8e2ca'), d3.rgb('#3e6c0a'))\n\t};\n\tvar range = undefined;\n\tvar r = undefined;\n\tvar pointerHeadLength = undefined;\n\tvar value = 0;\n\t\n\tvar svg = undefined;\n\tvar arc = undefined;\n\tvar scale = undefined;\n\tvar ticks = undefined;\n\tvar tickData = undefined;\n\tvar pointer = undefined;\n\tvar donut = d3.layout.pie();\n\t\n\tfunction deg2rad(deg) {\n\t\treturn deg * Math.PI / 180;\n\t}\n\t\n\tfunction newAngle(d) {\n\t\tvar ratio = scale(d);\n\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\treturn newAngle;\n\t}\n\t\n\tfunction configure(configuration) {\n\t\tvar prop = undefined;\n\t\tfor ( prop in configuration ) {\n\t\t\tconfig[prop] = configuration[prop];\n\t\t}\n\t\t\n\t\trange = config.maxAngle - config.minAngle;\n\t\tr = config.size / 2;\n\t\tpointerHeadLength = Math.round(r * config.pointerHeadLengthPercent);\n\t\t// a linear scale that maps domain values to a percent from 0..1\n\t\tscale = d3.scale.linear()\n\t\t\t.range([0,1])\n\t\t\t.domain([config.minValue, config.maxValue]);\n\t\t\t\n\t\tticks = scale.ticks(config.majorTicks);\n\t\ttickData = d3.range(config.majorTicks).map(function() {return 1/config.majorTicks;});\n\t\t\n\t\tarc = d3.svg.arc()\n\t\t\t.innerRadius(r - config.ringWidth - config.ringInset)\n\t\t\t.outerRadius(r - config.ringInset)\n\t\t\t.startAngle(function(d, i) {\n\t\t\t\tvar ratio = d * i;\n\t\t\t\treturn deg2rad(config.minAngle + (ratio * range));\n\t\t\t})\n\t\t\t.endAngle(function(d, i) {\n\t\t\t\tvar ratio = d * (i+1);\n\t\t\t\treturn deg2rad(config.minAngle + (ratio * range));\n\t\t\t});\n\t}\n\tthat.configure = configure;\n\t\n\tfunction centerTranslation() {\n\t\treturn 'translate('+r +','+ r +')';\n\t}\n\t\n\tfunction isRendered() {\n\t\treturn (svg !== undefined);\n\t}\n\tthat.isRendered = isRendered;\n\t\n\tfunction render(newValue) {\n\t\tsvg = d3.select(container)\n\t\t\t.append('svg:svg')\n\t\t\t\t.attr('class', 'gauge')\n\t\t\t\t.attr('width', config.clipWidth)\n\t\t\t\t.attr('height', config.clipHeight);\n\t\t\n\t\tvar centerTx = centerTranslation();\n\t\t\n\t\tvar arcs = svg.append('g')\n\t\t\t\t.attr('class', 'arc')\n\t\t\t\t.attr('transform', centerTx);\n\t\t\n\t\tarcs.selectAll('path')\n\t\t\t\t.data(tickData)\n\t\t\t.enter().append('path')\n\t\t\t\t.attr('fill', function(d, i) {\n\t\t\t\t\treturn config.arcColorFn(d * i);\n\t\t\t\t})\n\t\t\t\t.attr('d', arc);\n\t\t\n\t\tvar lg = svg.append('g')\n\t\t\t\t.attr('class', 'label')\n\t\t\t\t.attr('transform', centerTx);\n\t\tlg.selectAll('text')\n\t\t\t\t.data(ticks)\n\t\t\t.enter().append('text')\n\t\t\t\t.attr('transform', function(d) {\n\t\t\t\t\tvar ratio = scale(d);\n\t\t\t\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\t\t\t\treturn 'rotate(' +newAngle +') translate(0,' +(config.labelInset - r) +')';\n\t\t\t\t})\n\t\t\t\t.text(config.labelFormat);\n\t\tvar lineData = [ [config.pointerWidth / 2, 0], \n\t\t\t\t\t\t[0, -pointerHeadLength],\n\t\t\t\t\t\t[-(config.pointerWidth / 2), 0],\n\t\t\t\t\t\t[0, config.pointerTailLength],\n\t\t\t\t\t\t[config.pointerWidth / 2, 0] ];\n\t\tvar pointerLine = d3.svg.line().interpolate('monotone');\n\t\tvar pg = svg.append('g').data([lineData])\n\t\t\t\t.attr('class', 'pointer')\n\t\t\t\t.attr('transform', centerTx);\n\t\t\t\t\n\t\tpointer = pg.append('path')\n\t\t\t.attr('d', pointerLine/*function(d) { return pointerLine(d) +'Z';}*/ )\n\t\t\t.attr('transform', 'rotate(' +config.minAngle +')');\n\t\t\t\n\t\tupdate(newValue === undefined ? 0 : newValue);\n\t}\n\tthat.render = render;\n\t\n\tfunction update(newValue, newConfiguration) {\n\t\tif ( newConfiguration  !== undefined) {\n\t\t\tconfigure(newConfiguration);\n\t\t}\n\t\tvar ratio = scale(newValue);\n\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\tpointer.transition()\n\t\t\t.duration(config.transitionMs)\n\t\t\t.ease('elastic')\n\t\t\t.attr('transform', 'rotate(' +newAngle +')');\n\t}\n\tthat.update = update;\n\tconfigure(configuration);\n\t\n\treturn that;\n};\n</script>\n\n<script>\nfunction onDocumentReady() {\n\tvar powerGauge = gauge('#power-gauge', {\n\t\tsize: 300,\n\t\tclipWidth: 300,\n\t\tclipHeight: 300,\n\t\tringWidth: 60,\n\t\tmaxValue: 10,\n\t\ttransitionMs: 4000,\n\t});\n\tpowerGauge.render();\n\t\n\tfunction updateReadings() {\n\t\t// just pump in random data here...\n\t\tpowerGauge.update(Math.random() * 10);\n\t}\n\t\n\t// every few seconds update reading values\n\tupdateReadings();\n\tsetInterval(function() {\n\t\tupdateReadings();\n\t}, 5 * 1000);\n}\nif ( !window.isLoaded ) {\n\twindow.addEventListener(\"load\", function() {\n\t\tonDocumentReady();\n\t}, false);\n} else {\n\tonDocumentReady();\n}\n</script>\n</body>\n</html>", "description": "d3 gauge", "created_at": "2016-03-04T05:05:37Z", "updated_at": "2016-03-04T05:05:37Z", "api": ["d3.format", "d3.interpolateHsl", "d3.rgb", "d3.layout.pie", "d3.scale.linear", "d3.range", "d3.svg.arc", "d3.select", "d3.svg.line"], "readme": "d3 gauge\n\nforked from <a href='http://bl.ocks.org/ImSraone/'>ImSraone</a>'s block: <a href='http://bl.ocks.org/ImSraone/a6f4f74a628d844e6afb'>d3 gauge</a>", "uid": "ImSraone_216ee9834f42bdfaffae"}, {"code": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.js'></script>\n  <script src='http://d3js.org/d3.v2.min.js?2.9.3'></script>\n  <link\n      href='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.css'\n      rel='stylesheet' />\n  <style>\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n    .d3-vec { position:absolute; }\n    path {\n      fill: #000;\n      fill-opacity: .2;\n      stroke: #fff;\n      stroke-width: 1.5px;\n    }\n\n    path:hover {\n      fill: brown;\n      fill-opacity: .7;\n    }\n  </style>\n</head>\n<body>\n<div id='map'></div>\n<script>\n  function folly() {\n      var f = {}, bounds, feature;\n      var div = d3.select(document.body)\n          .append(\"div\")\n          .attr('class', 'd3-vec'),\n      svg = div.append('svg'),\n      g = svg.append(\"g\");\n\n      f.parent = div.node();\n\n      // Use Leaflet to implement a D3 geographic projection.\n      f.project = function(x) {\n        var point = f.map.locationPoint({ lat: x[1], lon: x[0] });\n        return [point.x, point.y];\n      }\n\n      // Reposition the SVG to cover the features.\n      f.draw = function() {\n        var bounds = f.map.extent(),\n            bl = bounds.southWest(),\n            tr = bounds.northEast();\n        var bottomLeft = f.project([bl.lon, bl.lat]),\n            topRight = f.project([tr.lon, tr.lat]);\n\n        svg.attr(\"width\", topRight[0] - bottomLeft[0])\n            .attr(\"height\", bottomLeft[1] - topRight[1])\n            .style(\"margin-left\", bottomLeft[0] + \"px\")\n            .style(\"margin-top\", topRight[1] + \"px\");\n\n        g.attr(\"transform\", \"translate(\" + -bottomLeft[0] + \",\" + -topRight[1] + \")\");\n\n        path = d3.geo.path().projection(f.project);\n\n        feature.attr(\"d\", path);\n      }\n\n      f.data = function(collection) {\n          bounds = d3.geo.bounds(collection);\n          feature = g.selectAll(\"path\")\n              .data(collection.features)\n              .enter().append(\"path\");\n          return f;\n      };\n\n      return f;\n  }\n  mapbox.auto('map', 'examples.map-vyofok3q', function(map) {\n      d3.json(\"us-states.json\", function(collection) {\n          var l = folly().data(collection);\n          map.addLayer(l);\n          map.zoom(4).center({ lat: 37, lon: -90 });\n      });\n  });\n</script>\n</body>\n</html>\n", "description": "MapBox + d3", "created_at": "2016-03-23T05:06:30Z", "updated_at": "2016-03-23T05:06:32Z", "api": ["d3.select", "d3.geo.path", "d3.geo.bounds", "d3.json"], "readme": "\n\nforked from <a href='http://bl.ocks.org/tmcw/'>tmcw</a>'s block: <a href='http://bl.ocks.org/tmcw/3426132'>MapBox + d3</a>", "uid": "jwarburg_357d91975a97e9f68208"}, {"code": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.js'></script>\n  <script src='http://d3js.org/d3.v2.min.js?2.9.3'></script>\n  <link\n      href='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.css'\n      rel='stylesheet' />\n  <style>\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n    .d3-vec { position:absolute; }\n    path {\n      fill: #000;\n      fill-opacity: .2;\n      stroke: #fff;\n      stroke-width: 1.5px;\n    }\n\n    path:hover {\n      fill: brown;\n      fill-opacity: .7;\n    }\n  </style>\n</head>\n<body>\n<div id='map'></div>\n<script>\n  function folly() {\n      var f = {}, bounds, feature;\n      var div = d3.select(document.body)\n          .append(\"div\")\n          .attr('class', 'd3-vec'),\n      svg = div.append('svg'),\n      g = svg.append(\"g\");\n\n      f.parent = div.node();\n\n      // Use Leaflet to implement a D3 geographic projection.\n      f.project = function(x) {\n        var point = f.map.locationPoint({ lat: x[1], lon: x[0] });\n        return [point.x, point.y];\n      }\n\n      // Reposition the SVG to cover the features.\n      f.draw = function() {\n        var bounds = f.map.extent(),\n            bl = bounds.southWest(),\n            tr = bounds.northEast();\n        var bottomLeft = f.project([bl.lon, bl.lat]),\n            topRight = f.project([tr.lon, tr.lat]);\n\n        svg.attr(\"width\", topRight[0] - bottomLeft[0])\n            .attr(\"height\", bottomLeft[1] - topRight[1])\n            .style(\"margin-left\", bottomLeft[0] + \"px\")\n            .style(\"margin-top\", topRight[1] + \"px\");\n\n        g.attr(\"transform\", \"translate(\" + -bottomLeft[0] + \",\" + -topRight[1] + \")\");\n\n        path = d3.geo.path().projection(f.project);\n\n        feature.attr(\"d\", path);\n      }\n\n      f.data = function(collection) {\n          bounds = d3.geo.bounds(collection);\n          feature = g.selectAll(\"path\")\n              .data(collection.features)\n              .enter().append(\"path\");\n          return f;\n      };\n\n      return f;\n  }\n  mapbox.auto('map', 'examples.map-vyofok3q', function(map) {\n      d3.json(\"us-states.json\", function(collection) {\n          var l = folly().data(collection);\n          map.addLayer(l);\n          map.zoom(4).center({ lat: 37, lon: -90 });\n      });\n  });\n</script>\n</body>\n</html>\n", "description": "MapBox + d3", "created_at": "2012-08-22T14:31:03Z", "updated_at": "2016-01-05T17:12:07Z", "api": ["d3.select", "d3.geo.path", "d3.geo.bounds", "d3.json"], "readme": "", "uid": "tmcw_3426132"}, {"code": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.js'></script>\n  <script src='http://d3js.org/d3.v2.js?2.9.3'></script>\n  <link\n      href='http://api.tiles.mapbox.com/mapbox.js/v0.6.4/mapbox.css'\n      rel='stylesheet' />\n  <style>\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n    .d3-vec { position:absolute; }\n    path {\n      fill: #000;\n      fill-opacity: .2;\n      stroke: #fff;\n      stroke-width: 1.5px;\n    }\n\n    path:hover {\n      fill: brown;\n      fill-opacity: .7;\n    }\n  </style>\n</head>\n<body>\n<div id='map'></div>\n<script>\n  function folly() {\n      var f = {}, bounds, feature;\n      var div = d3.select(document.body)\n          .append(\"div\")\n          .attr('class', 'd3-vec'),\n      svg = div.append('svg'),\n      g = svg.append(\"g\");\n\n      f.parent = div.node();\n\n      // Use Leaflet to implement a D3 geographic projection.\n      f.project = function(x) {\n        var point = f.map.locationPoint({ lat: x[1], lon: x[0] });\n        return [point.x, point.y];\n      }\n\n      // Reposition the SVG to cover the features.\n      f.draw = function() {\n        var bounds = f.map.extent(),\n            bl = bounds.southWest(),\n            tr = bounds.northEast();\n        var bottomLeft = f.project([bl.lon, bl.lat]),\n            topRight = f.project([tr.lon, tr.lat]);\n\n        svg.attr(\"width\", topRight[0] - bottomLeft[0])\n            .attr(\"height\", bottomLeft[1] - topRight[1])\n            .style(\"margin-left\", bottomLeft[0] + \"px\")\n            .style(\"margin-top\", topRight[1] + \"px\");\n\n        g.attr(\"transform\", \"translate(\" + -bottomLeft[0] + \",\" + -topRight[1] + \")\");\n\n        path = d3.geo.path().projection(f.project);\n\n        feature.attr(\"d\", path);\n      }\n\n      f.data = function(collection) {\n          bounds = d3.geo.bounds(collection);\n          feature = g.selectAll(\"path\")\n              .data(collection)\n              .enter().append(\"path\");\n          return f;\n      };\n\n      return f;\n  }\n  var mapbox_tilejson = 'http://api.tiles.mapbox.com/v3/mapbox.mapbox-light.jsonp';\n  mapbox.load(mapbox_tilejson, function(o) {\n    var m = mapbox.map('map');\n    m.addLayer(o.layer);\n    m.ui.zoomer.add();\n    var mapbounds = new MM.Extent(\n      32.15603702811953,\n      34.8453784951352,\n      32.02354637361072,\n      34.733455277361784);\n    m.setExtent(mapbounds);\n    m.setPanLimits(mapbounds);\n    m.setZoomRange(13,17);\n    d3.json(\"tlv.json\", function(collection) {\n        var l = folly().data([collection]);\n        m.addLayer(l);\n    });\n  });\n</script>\n</body>\n</html>\n", "description": "MapBox + d3", "created_at": "2012-11-25T01:48:18Z", "updated_at": "2015-10-13T04:48:05Z", "api": ["d3.select", "d3.geo.path", "d3.geo.bounds", "d3.json"], "readme": "", "uid": "pnavarrc_4142064"}, {"code": "<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <script src=\"https://cdn.rawgit.com/fabid/d3-heatmap/master/heatmap.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width:100%; height: 100% }\n  </style>\n</head>\n\n<body>\n  <script>\n   var margin = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      width = 960 - margin.left - margin.right,\n      height = 500 - margin.top - margin.bottom;\n\n    var randomX = d3.random.normal(width / 2, 80),\n      randomY = d3.random.normal(height / 2, 80),\n      points = d3.range(1000).map(function() {\n        return [randomX(), randomY()];\n      });\n    console.log(points);\n\t\tvar size = 4;\n    var heatmap = d3.heatmap()\n\t\t\t.std(5)\n    \t.dx(size)\n      .dy(size);\n\n    // the result of the heatmap layout\n    var heatmapData = heatmap(points);\n\n    var color = d3.scale.linear()\n      .domain([0, d3.max(heatmapData, function(d) {\n        return d.v;\n      })])\n      .range([\"white\", \"steelblue\"])\n      .interpolate(d3.interpolateLab);\n\n    var x = d3.scale.identity()\n      .domain([0, width]);\n\n    var y = d3.scale.linear()\n      .domain([0, height])\n      .range([height, 0]);\n    var yinv = d3.scale.linear()\n      .domain([height, 0])\n      .range([height, 0]);\n\n    var svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    svg.append(\"g\")\n      .selectAll(\".square\")\n      .data(heatmapData)\n      .enter().append(\"rect\")\n       .attr(\"class\", \"square\")\n      .attr(\"x\", function(d) { return x(d.x); })\n      .attr(\"y\", function(d) { return y(d.y) - yinv(size); })    \n      .attr(\"width\", x(size))\n      .attr(\"height\", yinv(size))\n      .style(\"fill\", function(d) {\n        return color(d.v)\n      })\n      .style(\"stroke\", \"none\");\n  </script>\n</body>\n", "description": "d3-heatmap", "created_at": "2016-03-01T16:18:25Z", "updated_at": "2016-03-02T14:50:07Z", "api": ["d3.random.normal", "d3.range", "d3.heatmap", "d3.scale.linear", "d3.max", "d3.scale.identity", "d3.select"], "readme": "Rectangular binning with [d3-heatmap](https://github.com/fabid/d3-heatmap/blob/master/heatmap.js)\nbased on [d3-hexbin demo](http://bl.ocks.org/xaranke/b956ee7215b7b50bc78a)\n\nBuilt with [blockbuilder.org](http://blockbuilder.org)\n", "uid": "fabid_0c4cf357ab5ed3e90382"}, {"code": "<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\n.axis text {\n  font: 10px sans-serif;\n}\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n</style>\n<body>\n<script src=\"//d3js.org/d3.v3.min.js\"></script>\n<script>\n    \nvar seq = \"CCTGGGTGGGGGACCCGCTGCGGGAGCGCCGAGCTCCCTCTGAGTTCTTACTTCGAAGGCTGTGCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCTGGGTGGGGGACCCGCTGCGGGAGCGCCGAGCTCCCTCTGAGTTCTTACTTCGAAGGCTGTGCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\";\n\nvar seqlength = seq.length;\nconsole.log(seqlength);\n\n\nvar margin = {top: 100, right: 100, bottom: 100, left: 100},\n    width = 860 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\nvar x = d3.scale.identity()\n    .domain([0, seqlength]);\n\nvar xAxis = d3.svg.axis()\n    .scale(x)\n    .ticks(seqlength%100)\n    .orient(\"bottom\");\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nsvg.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .call(xAxis);\n\nvar myString=\"gene.txt\"  \nvar length=\"myString.length\"  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</script>", "description": "D3 ruler", "created_at": "2016-02-18T17:06:35Z", "updated_at": "2016-02-18T17:06:36Z", "api": ["d3.scale.identity", "d3.svg.axis", "d3.select"], "readme": "Built with [blockbuilder.org](http://blockbuilder.org)\n\nforked from <a href='http://bl.ocks.org/Rico3734/'>Rico3734</a>'s block: <a href='http://bl.ocks.org/Rico3734/3a387f8041e1dc31d718'>D3 ruler</a>", "uid": "Rico3734_fa14dff4959ccb0886a9"}, {"code": "<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\n.axis text {\n  font: 10px sans-serif;\n}\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n</style>\n<body>\n<script src=\"//d3js.org/d3.v3.min.js\"></script>\n<script>\n  \nvar seqlength=0;\n\nd3.tsv(\"gene.txt\", function(error, data){\n\tif (error) throw error;\n\tvar line = data;\n\tvar linelength = line.length;\n  seqlength = seqlength + linelength;\n\tconsole.log(linelength);  \n});\n  \n\n\nvar margin = {top: 100, right: 100, bottom: 100, left: 100},\n    width = 860 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\nvar x = d3.scale.identity()\n    .domain([0, width]);\n\nvar xAxis = d3.svg.axis()\n    .scale(x)\n    .tickValues(length)\n    .orient(\"bottom\");\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nsvg.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .call(xAxis);\n\nvar myString=\"gene.txt\"  \nvar length=\"myString.length\"  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</script>", "description": "D3 ruler", "created_at": "2016-02-18T16:39:01Z", "updated_at": "2016-02-18T16:39:01Z", "api": ["d3.tsv", "d3.scale.identity", "d3.svg.axis", "d3.select"], "readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "uid": "Rico3734_2d06a6aadbb4af3398ba"}, {"code": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=320\" />\n\t<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n\t<title>Gauge</title>\n\t<script type=\"text/javascript\" src=\"http://d3js.org/d3.v2.min.js\"></script>\n\t<style>\n\tbody {\n\t\tfont-family:  Helvetica, Arial, sans-serif;\n\t\tmargin: 32px;\n\t}\n\n\t#power-gauge g.arc {\n\t\tfill: steelblue;\n\t}\n\n\t#power-gauge g.pointer {\n\t\tfill: #e85116;\n\t\tstroke: #b64011;\n\t}\n\t\n\t#power-gauge g.label text {\n\t\ttext-anchor: middle;\n\t\tfont-size: 14px;\n\t\tfont-weight: bold;\n\t\tfill: #666;\n\t}\n\t</style>\n</head>\n<body>\n<div id=\"power-gauge\"></div>\n\t\n<script>\nvar gauge = function(container, configuration) {\n\tvar that = {};\n\tvar config = {\n\t\tsize\t\t\t\t\t\t: 200,\n\t\tclipWidth\t\t\t\t\t: 200,\n\t\tclipHeight\t\t\t\t\t: 110,\n\t\tringInset\t\t\t\t\t: 20,\n\t\tringWidth\t\t\t\t\t: 20,\n\t\t\n\t\tpointerWidth\t\t\t\t: 10,\n\t\tpointerTailLength\t\t\t: 5,\n\t\tpointerHeadLengthPercent\t: 0.9,\n\t\t\n\t\tminValue\t\t\t\t\t: 0,\n\t\tmaxValue\t\t\t\t\t: 10,\n\t\t\n\t\tminAngle\t\t\t\t\t: -90,\n\t\tmaxAngle\t\t\t\t\t: 90,\n\t\t\n\t\ttransitionMs\t\t\t\t: 750,\n\t\t\n\t\tmajorTicks\t\t\t\t\t: 5,\n\t\tlabelFormat\t\t\t\t\t: d3.format(',g'),\n\t\tlabelInset\t\t\t\t\t: 10,\n\t\t\n\t\tarcColorFn\t\t\t\t\t: d3.interpolateHsl(d3.rgb('#e8e2ca'), d3.rgb('#3e6c0a'))\n\t};\n\tvar range = undefined;\n\tvar r = undefined;\n\tvar pointerHeadLength = undefined;\n\tvar value = 0;\n\t\n\tvar svg = undefined;\n\tvar arc = undefined;\n\tvar scale = undefined;\n\tvar ticks = undefined;\n\tvar tickData = undefined;\n\tvar pointer = undefined;\n\n\tvar donut = d3.layout.pie();\n\t\n\tfunction deg2rad(deg) {\n\t\treturn deg * Math.PI / 180;\n\t}\n\t\n\tfunction newAngle(d) {\n\t\tvar ratio = scale(d);\n\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\treturn newAngle;\n\t}\n\t\n\tfunction configure(configuration) {\n\t\tvar prop = undefined;\n\t\tfor ( prop in configuration ) {\n\t\t\tconfig[prop] = configuration[prop];\n\t\t}\n\t\t\n\t\trange = config.maxAngle - config.minAngle;\n\t\tr = config.size / 2;\n\t\tpointerHeadLength = Math.round(r * config.pointerHeadLengthPercent);\n\n\t\t// a linear scale that maps domain values to a percent from 0..1\n\t\tscale = d3.scale.linear()\n\t\t\t.range([0,1])\n\t\t\t.domain([config.minValue, config.maxValue]);\n\t\t\t\n\t\tticks = scale.ticks(config.majorTicks);\n\t\ttickData = d3.range(config.majorTicks).map(function() {return 1/config.majorTicks;});\n\t\t\n\t\tarc = d3.svg.arc()\n\t\t\t.innerRadius(r - config.ringWidth - config.ringInset)\n\t\t\t.outerRadius(r - config.ringInset)\n\t\t\t.startAngle(function(d, i) {\n\t\t\t\tvar ratio = d * i;\n\t\t\t\treturn deg2rad(config.minAngle + (ratio * range));\n\t\t\t})\n\t\t\t.endAngle(function(d, i) {\n\t\t\t\tvar ratio = d * (i+1);\n\t\t\t\treturn deg2rad(config.minAngle + (ratio * range));\n\t\t\t});\n\t}\n\tthat.configure = configure;\n\t\n\tfunction centerTranslation() {\n\t\treturn 'translate('+r +','+ r +')';\n\t}\n\t\n\tfunction isRendered() {\n\t\treturn (svg !== undefined);\n\t}\n\tthat.isRendered = isRendered;\n\t\n\tfunction render(newValue) {\n\t\tsvg = d3.select(container)\n\t\t\t.append('svg:svg')\n\t\t\t\t.attr('class', 'gauge')\n\t\t\t\t.attr('width', config.clipWidth)\n\t\t\t\t.attr('height', config.clipHeight);\n\t\t\n\t\tvar centerTx = centerTranslation();\n\t\t\n\t\tvar arcs = svg.append('g')\n\t\t\t\t.attr('class', 'arc')\n\t\t\t\t.attr('transform', centerTx);\n\t\t\n\t\tarcs.selectAll('path')\n\t\t\t\t.data(tickData)\n\t\t\t.enter().append('path')\n\t\t\t\t.attr('fill', function(d, i) {\n\t\t\t\t\treturn config.arcColorFn(d * i);\n\t\t\t\t})\n\t\t\t\t.attr('d', arc);\n\t\t\n\t\tvar lg = svg.append('g')\n\t\t\t\t.attr('class', 'label')\n\t\t\t\t.attr('transform', centerTx);\n\t\tlg.selectAll('text')\n\t\t\t\t.data(ticks)\n\t\t\t.enter().append('text')\n\t\t\t\t.attr('transform', function(d) {\n\t\t\t\t\tvar ratio = scale(d);\n\t\t\t\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\t\t\t\treturn 'rotate(' +newAngle +') translate(0,' +(config.labelInset - r) +')';\n\t\t\t\t})\n\t\t\t\t.text(config.labelFormat);\n\n\t\tvar lineData = [ [config.pointerWidth / 2, 0], \n\t\t\t\t\t\t[0, -pointerHeadLength],\n\t\t\t\t\t\t[-(config.pointerWidth / 2), 0],\n\t\t\t\t\t\t[0, config.pointerTailLength],\n\t\t\t\t\t\t[config.pointerWidth / 2, 0] ];\n\t\tvar pointerLine = d3.svg.line().interpolate('monotone');\n\t\tvar pg = svg.append('g').data([lineData])\n\t\t\t\t.attr('class', 'pointer')\n\t\t\t\t.attr('transform', centerTx);\n\t\t\t\t\n\t\tpointer = pg.append('path')\n\t\t\t.attr('d', pointerLine/*function(d) { return pointerLine(d) +'Z';}*/ )\n\t\t\t.attr('transform', 'rotate(' +config.minAngle +')');\n\t\t\t\n\t\tupdate(newValue === undefined ? 0 : newValue);\n\t}\n\tthat.render = render;\n\t\n\tfunction update(newValue, newConfiguration) {\n\t\tif ( newConfiguration  !== undefined) {\n\t\t\tconfigure(newConfiguration);\n\t\t}\n\t\tvar ratio = scale(newValue);\n\t\tvar newAngle = config.minAngle + (ratio * range);\n\t\tpointer.transition()\n\t\t\t.duration(config.transitionMs)\n\t\t\t.ease('elastic')\n\t\t\t.attr('transform', 'rotate(' +newAngle +')');\n\t}\n\tthat.update = update;\n\n\tconfigure(configuration);\n\t\n\treturn that;\n};\n</script>\n\n<script>\nfunction onDocumentReady() {\n\tvar powerGauge = gauge('#power-gauge', {\n\t\tsize: 300,\n\t\tclipWidth: 300,\n\t\tclipHeight: 300,\n\t\tringWidth: 60,\n\t\tmaxValue: 10,\n\t\ttransitionMs: 4000,\n\t});\n\tpowerGauge.render();\n\t\n\tfunction updateReadings() {\n\t\t// just pump in random data here...\n\t\tpowerGauge.update(Math.random() * 10);\n\t}\n\t\n\t// every few seconds update reading values\n\tupdateReadings();\n\tsetInterval(function() {\n\t\tupdateReadings();\n\t}, 5 * 1000);\n}\n\nif ( !window.isLoaded ) {\n\twindow.addEventListener(\"load\", function() {\n\t\tonDocumentReady();\n\t}, false);\n} else {\n\tonDocumentReady();\n}\n</script>\n</body>\n</html>\n", "description": "d3 gauge", "created_at": "2012-07-30T00:03:05Z", "updated_at": "2016-05-02T11:23:14Z", "api": ["d3.format", "d3.interpolateHsl", "d3.rgb", "d3.layout.pie", "d3.scale.linear", "d3.range", "d3.svg.arc", "d3.select", "d3.svg.line"], "readme": "", "uid": "msqr_3202712"}, {"code": "<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width:100%; height: 100% }\n  </style>\n</head>\n\n<body>\n  <script>\n    // Feel free to change or delete any of the code you see!\n    var svg = d3.select(\"body\").append(\"svg\")\n    svg.append(\"rect\")\n      .attr({x: 100, y: 10, width: 700, height: 480})\n      .style({ fill: \"#a72d1a\"})\n      .transition().duration(3000).ease(\"bounce\")\n      .style({ fill: \"#5db9e3\"})\n\n    console.log(\"you are now rocking with d3\", d3);\n  </script>\n</body>\n", "description": "D3 ruler", "created_at": "2016-02-18T16:39:17Z", "updated_at": "2016-02-18T16:39:17Z", "api": ["d3.select"], "readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "uid": "Rico3734_3a387f8041e1dc31d718"}, {"code": "<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width:100%; height: 100% }\n  </style>\n</head>\n\n<body>\n  <script>\n    // Feel free to change or delete any of the code you see!\n    var svg = d3.select(\"body\").append(\"svg\")\n    svg.append(\"rect\")\n      .attr({x: 100, y: 10, width: 700, height: 480})\n      .style({ fill: \"#a72d1a\"})\n      .transition().duration(3000).ease(\"bounce\")\n      .style({ fill: \"#5db9e3\"})\n\n    console.log(\"you are now rocking with d3\", d3);\n  </script>\n</body>\n", "description": "D3 - AmaTest", "created_at": "2016-03-03T13:52:52Z", "updated_at": "2016-03-03T13:52:52Z", "api": ["d3.range", "d3.select"], "readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "uid": "diskmanti_bc208f5266e4ffd5484a"}, {"code": "<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n  <style>\n    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }\n    svg { width: 100%; height: 100%; }\n  </style>\n</head>\n\n<body>\n  <script>\n    var gaussianDataGenerator = d3.random.normal();\n    var margin = {top: 20, right: 10, bottom: 20, left: 10};\n    var width = 960 - margin.left - margin.right;\n    var height = 500 - margin.top - margin.bottom;\n    \n    // Create the svg container\n    var svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n    \t.append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\t\t// Create some rectangles inside the svg container\n    var rectangles = svg.selectAll(\"rect\")\n    \t\t\t\t\t\t\t\t\t\t.data([1,2,3,4,5])\n       \t\t\t\t\t\t\t\t\t.enter()\n    \t\t\t\t\t\t\t\t\t\t.append(\"rect\")\n       \t\t\t\t\t\t\t\t\t.attr('x', function(d){\n                          return d + 1\n                        }) \n       \t\t\t\t\t\t\t\t\t.attr('y', function(d){\n                        \treturn d + 2\n                        })\n    \t \t\t\t\t\t\t\t\t\t.attr(\"width\", width)\n    \t \t\t\t\t\t\t\t\t\t.attr(\"height\", height)\n       \t\t\t\t\t\t\t\t\t.style({ fill: \"#196496\"})\n  </script>\n</body>\n", "description": "d3-introduction", "created_at": "2015-11-17T11:21:04Z", "updated_at": "2015-11-17T20:43:15Z", "api": ["d3.random.normal", "d3.select"], "readme": "Built with [blockbuilder.org](http://blockbuilder.org)", "uid": "yassineAlouini_fdbca6ea6f4416e6b328"}]}